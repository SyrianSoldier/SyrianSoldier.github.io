import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,e as n,f as s,b as t,d as p}from"./app-f65858bf.js";const i={},u=p(`<h1 id="react中的ts" tabindex="-1"><a class="header-anchor" href="#react中的ts" aria-hidden="true">#</a> React中的TS</h1><p>更多React相关类型请参照</p><h2 id="一-props中常见的ts类型" tabindex="-1"><a class="header-anchor" href="#一-props中常见的ts类型" aria-hidden="true">#</a> 一: Props中常见的TS类型</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">AppProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  count<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  disabled<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  <span class="token comment">// 字符串数组如: hobbies: [&#39;吃饭&#39;, &#39;睡觉&#39;..]</span>
  names<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// 指定精确的字符串值，并使用联合类型将其连接在一起</span>
  status<span class="token operator">:</span> <span class="token string">&quot;waiting&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span>
  <span class="token comment">// 已知属性的对象(运行时可能增加属性)</span>
  obj<span class="token operator">:</span> <span class="token punctuation">{</span>
    id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// 常用: 对象数组</span>
  objArr<span class="token operator">:</span> <span class="token punctuation">{</span>
    id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// 非原始类型, 一般作为占位符(详细见重点摘要)</span>
  obj2<span class="token operator">:</span> object<span class="token punctuation">;</span>
  <span class="token comment">// {}不意味着一个对象, 等价于interface {}, 意思为一个没有任何属性的接口(不常用)</span>
  obj3<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/** 一个对象, 并且对象的key类型相同, 对象的属性数量不限制 */</span>
  dict1<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> MyTypeHere<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  dict2<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> MyTypeHere<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// 等价于上面的dic1</span>
  
  <span class="token comment">// 不返回任何东西的函数</span>
  <span class="token function-variable function">onClick</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  
  <span class="token function-variable function">onChange</span><span class="token operator">:</span> <span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 接受事件的函数类型语法, e的类型为 事件类型&lt;触发事件的元素类型&gt;</span>
  <span class="token function-variable function">onChange</span><span class="token operator">:</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> React<span class="token punctuation">.</span>ChangeEvent<span class="token operator">&lt;</span>HTMLInputElement<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  
  <span class="token doc-comment comment">/** 函数语法的另一种写法 */</span>
  <span class="token function">onClick</span><span class="token punctuation">(</span>event<span class="token operator">:</span> React<span class="token punctuation">.</span>MouseEvent<span class="token operator">&lt;</span>HTMLButtonElement<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  
  <span class="token doc-comment comment">/** 任何函数类型(不常用) */</span>
  onSomething<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">;</span>
  
  <span class="token doc-comment comment">/** 可选参数 */</span>
  optional<span class="token operator">?</span><span class="token operator">:</span> OptionalType<span class="token punctuation">;</span>
  
  <span class="token doc-comment comment">/** 传递setState给子组件时的类型 */</span>
  setState<span class="token operator">:</span> React<span class="token punctuation">.</span>Dispatch<span class="token operator">&lt;</span>React<span class="token punctuation">.</span>SetStateAction<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="object-object-和interface-a-的区别" tabindex="-1"><a class="header-anchor" href="#object-object-和interface-a-的区别" aria-hidden="true">#</a> object, Object, {}, 和interface A{}的区别</h4><h4 id="object" tabindex="-1"><a class="header-anchor" href="#object" aria-hidden="true">#</a> object</h4><blockquote><p>除非知道明确用法, 一般不使用</p></blockquote><ol><li><code>object</code> 是一种类型，表示所有非原始类型的集合。原始类型包括 <code>string</code>、<code>number</code>、<code>boolean</code>、<code>symbol</code>、<code>null</code> 和 <code>undefined</code>。换句话说，<code>object</code> 类型用于表示除原始类型以外的所有内容，例如数组、函数、对象等。</li><li>在 React 中键入“任何非原始值(object)”很可能不应该做太多事情，这意味着您可能不会太多使用<code>object</code></li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MyComponentProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  data<span class="token operator">:</span> object<span class="token punctuation">;</span> <span class="token comment">// 可以是任意非原始类型, 可能是数组, 对象, 函数</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> MyComponent<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>MyComponentProps<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 无法直接访问 data 的属性，除非使用类型断言</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token comment">/* 使用 data 之前需要断言 */</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="object-和interface-a" tabindex="-1"><a class="header-anchor" href="#object-和interface-a" aria-hidden="true">#</a> Object, {}, 和interface A{}</h4><p>interface A{}、 <code>{}</code>和<code>Object</code>都代表“任何非空值”，而不是“空对象”</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 等价于 type A = {}, type A = Object</span>

<span class="token keyword">let</span> value<span class="token operator">:</span> <span class="token constant">A</span><span class="token punctuation">;</span>

<span class="token comment">// value为非空值, 可以允许字符串, 数字,函数等等, 但不允许空值如undifined, null</span>
value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
value <span class="token operator">=</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">;</span>
<span class="token function-variable function">value</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
value <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token string">&quot;bar&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

value <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>React.FC&lt;&gt;中的{}</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 你可能见过如下代码</span>
<span class="token comment">// 这里的{}表示一个没有key的对象, 这看起来和上面的有所差异,不是很能理解, 我提了问题在stackoverflow上暂时还没有好的解答</span>
<span class="token comment">// </span>
<span class="token keyword">const</span> <span class="token literal-property property">App</span><span class="token operator">:</span>React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
  	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">我是App</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>泛型约束中的{}</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 这里表示P被{}约束了, 和{}拥有一样的特性. 即P是非空值</span>
<span class="token keyword">function</span> test<span class="token operator">&lt;</span><span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">P</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> arg
<span class="token punctuation">}</span>

test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>number</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">(1)
test</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">(&#39;abc&#39;)
test&lt;</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> string <span class="token punctuation">}</span><span class="token plain-text">&gt;(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;zhangSan&#39;</span><span class="token punctuation">}</span><span class="token plain-text">)
//Error Type
test</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>null</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">(null)
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="与组件相关的props类型" tabindex="-1"><a class="header-anchor" href="#与组件相关的props类型" aria-hidden="true">#</a> 与组件相关的props类型</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">interface</span> <span class="token class-name">AppProps</span> <span class="token punctuation">{</span>
  children<span class="token operator">?</span><span class="token operator">:</span> React<span class="token punctuation">.</span>ReactNode<span class="token punctuation">;</span> <span class="token comment">// 推荐, 任何react可以渲染的东西(除了对象外)</span>
  childrenElement<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">JSX</span><span class="token punctuation">.</span>Element<span class="token punctuation">;</span> <span class="token comment">// JSX.Element和ReactNode都可以作为组件的返回值类型, 后者更推荐. 到底用哪个有一些深层次讨论(不在这里详细阐述了)</span>
  style<span class="token operator">?</span><span class="token operator">:</span> React<span class="token punctuation">.</span>CSSProperties<span class="token punctuation">;</span> <span class="token comment">// 内联样式的类型, 见下面的例子</span>
 <span class="token comment">// 提取button的所有props(不包括ref)再和组件Props合并	(详细见下方)</span>
  props<span class="token operator">:</span> Props <span class="token operator">&amp;</span> React<span class="token punctuation">.</span>ComponentPropsWithoutRef<span class="token operator">&lt;</span><span class="token string">&quot;button&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
  props2<span class="token operator">:</span> Props <span class="token operator">&amp;</span> React<span class="token punctuation">.</span>ComponentPropsWithRef<span class="token operator">&lt;</span>MyButtonWithForwardRef<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 React 中，<code>React.CSSProperties</code> 是 TypeScript 提供的一种类型，用于表示 React 组件的内联样式属性（<code>style</code>）。该类型基于标准的 CSS 属性，并添加了 TypeScript 的类型检查和补全功能。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> MyComponent<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token function-variable function">FC</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> style<span class="token operator">:</span> React<span class="token punctuation">.</span>CSSProperties <span class="token operator">=</span> <span class="token punctuation">{</span>
    backgroundColor<span class="token operator">:</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span>
    marginTop<span class="token operator">:</span> <span class="token string">&#39;20px&#39;</span><span class="token punctuation">,</span>
    display<span class="token operator">:</span> <span class="token string">&#39;flex&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span>style<span class="token punctuation">}</span><span class="token operator">&gt;</span>Hello<span class="token punctuation">,</span> World<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>React.ComponentPropsWithoutRef&lt;T&gt;</code>可以提取HTML元素或者组件的Props属性, 不包括ref</p><p><code>React.ComponentPropsWithRef&lt;T&gt;</code>可以提取HTML元素或者组件的Props属性, 包括ref</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>ComponentProps<span class="token punctuation">,</span> ComponentPropsWithoutRef<span class="token punctuation">,</span> <span class="token constant">FC</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">MainProps</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">label</span><span class="token operator">:</span>string
  <span class="token literal-property property">name</span><span class="token operator">:</span> string
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token literal-property property">Main</span><span class="token operator">:</span><span class="token constant">FC</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MainProps</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> = () =&gt; </span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token plain-text">

type B = ComponentPropsWithoutRef</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeof</span> <span class="token attr-name">Main</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">

// B类型和MainProps类型是一致的, 
// 另外可以提取HTML元素的类型React.ComponentPropsWithoutRef&lt;&quot;button&quot;&gt; 等价于 { onClick:()=&gt;void 等等 }
const obj:B = </span><span class="token punctuation">{</span>
  <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;label&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token plain-text">


export default Main

</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用type还是interface" tabindex="-1"><a class="header-anchor" href="#使用type还是interface" aria-hidden="true">#</a> 使用Type还是Interface</h3><p>⚠️在某些情况下</p><ol><li>建议使用interface, 除非到了必要使用type的时候</li><li>在创作库或第 3 方环境类型定义时，始终使用公共 API 定义的<code>interface</code> ，因为如果缺少某些定义，这允许使用者通过<em>声明合并</em>来扩展它们</li></ol><table><thead><tr><th>Aspect 方面</th><th>Type 类型</th><th>Interface 界面</th></tr></thead><tbody><tr><td>Can describe functions 可以描述功能</td><td>✅</td><td>✅</td></tr><tr><td>Can describe constructors可以描述构造函数</td><td>✅</td><td>✅</td></tr><tr><td>Can describe tuples 可以描述元组</td><td>✅</td><td>✅</td></tr><tr><td>Interfaces can extend it 接口可以扩展它</td><td>⚠️</td><td>✅</td></tr><tr><td>Classes can extend it 类可以扩展它</td><td>🚫</td><td>✅</td></tr><tr><td>Classes can implement it (<code>implements</code>)类可以实现它（ <code>implements</code> ）</td><td>⚠️</td><td>✅</td></tr><tr><td>Can intersect another one of its kind可以与另一同类相交</td><td>✅</td><td>⚠️</td></tr><tr><td>Can create a union with another one of its kind可以与另一个同类建立联盟</td><td>✅</td><td>🚫</td></tr><tr><td>Can be used to create mapped types可用于创建映射类型</td><td>✅</td><td>🚫</td></tr><tr><td>Can be mapped over with mapped types可以使用映射类型进行映射</td><td>✅</td><td>✅</td></tr><tr><td>Expands in error messages and logs在错误消息和日志中扩展</td><td>✅</td><td>🚫</td></tr><tr><td>Can be augmented 可以增强</td><td>🚫</td><td>✅</td></tr><tr><td>Can be recursive 可以递归</td><td>⚠️</td><td>✅</td></tr></tbody></table><h2 id="二-函数组件" tabindex="-1"><a class="header-anchor" href="#二-函数组件" aria-hidden="true">#</a> 二: 函数组件</h2><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 函数组件props的类型, 如果想要留下扩展的空间, 使用interface (同名的interface自动合并, 并且interface能implement,extend )</span>
type AppProps <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">message</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 声明函数组件最简单的方式, 返回类型是自动推导的</span>
<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> message <span class="token punctuation">}</span><span class="token operator">:</span> AppProps</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>

<span class="token comment">// 使用FC或者FunctionComponent</span>
<span class="token keyword">const</span> <span class="token literal-property property">App</span><span class="token operator">:</span> React<span class="token punctuation">.</span>FunctionComponent<span class="token operator">&lt;</span><span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> string <span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> message <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// or</span>
<span class="token keyword">const</span> <span class="token literal-property property">App</span><span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AppProps</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> = ({ message }) =&gt; </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">;
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三-hooks" tabindex="-1"><a class="header-anchor" href="#三-hooks" aria-hidden="true">#</a> 三: Hooks</h2><h3 id="usestate" tabindex="-1"><a class="header-anchor" href="#usestate" aria-hidden="true">#</a> useState</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 自动推断类型为boolean, 适合简单的state</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用和null的联合类型, 适用于初始值为null的时候</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>user<span class="token punctuation">,</span> setUser<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token operator">&lt;</span>User <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 假如user数据是从后端拉取的, 我们知道接下来很快就会有数据, 此时可以暂时向 TypeScript 编译器“撒谎”，表明{}属于User类型</span>
<span class="token comment">// 但应该通过及时设置user状态来跟进 - 如果不这样做，代码的其余部分可能依赖于user是User类型的事实，这可能会导致运行时错误。</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>user<span class="token punctuation">,</span> setUser<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">User</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token plain-text"> as User);

</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="usecallback" tabindex="-1"><a class="header-anchor" href="#usecallback" aria-hidden="true">#</a> useCallback</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">/**
   useCallBack不需要额外设置类型
   
 * VSCODE将显示以下类型(自动类型推导为)
 * const memoizedCallback:
 *  (param1: string, param2: number) =&gt; { ok: boolean }
 */</span>
<span class="token keyword">const</span> memoizedCallback <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">param1</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">param2</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>param1<span class="token punctuation">,</span> param2<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">ok</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="usereducer" tabindex="-1"><a class="header-anchor" href="#usereducer" aria-hidden="true">#</a> useReducer</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
type <span class="token constant">ACTION_TYPE</span> <span class="token operator">=</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;increment&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">payload</span><span class="token operator">:</span> number <span class="token punctuation">}</span> <span class="token operator">|</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;decrement&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">payload</span><span class="token operator">:</span> number <span class="token punctuation">}</span>

<span class="token comment">// reducer的state用typeof取, action是联合类型</span>
<span class="token keyword">const</span> <span class="token function-variable function">reducer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token keyword">typeof</span> initialState<span class="token punctuation">,</span> <span class="token literal-property property">action</span><span class="token operator">:</span> <span class="token constant">ACTION_TYPE</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&#39;increment&#39;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">}</span>
    <span class="token keyword">case</span> <span class="token string">&#39;decrement&#39;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">}</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> state
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 报销流程</span>
<span class="token keyword">const</span> <span class="token literal-property property">Main</span><span class="token operator">:</span> <span class="token constant">FC</span><span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialState<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;increment&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">payload</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">+</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;decrement&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">payload</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">-</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子中, reducer的类型也可以使用Redux提供的Reducer类型</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span><span class="token constant">FC</span><span class="token punctuation">,</span> useReducer<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>Reducer<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;redux&quot;</span><span class="token punctuation">;</span>


<span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
type <span class="token constant">ACTION_TYPE</span> <span class="token operator">=</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;increment&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">payload</span><span class="token operator">:</span> number <span class="token punctuation">}</span> <span class="token operator">|</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;decrement&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">payload</span><span class="token operator">:</span> number <span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token literal-property property">reducer</span><span class="token operator">:</span> Reducer<span class="token operator">&lt;</span><span class="token keyword">typeof</span> initialState<span class="token punctuation">,</span> <span class="token constant">ACTION_TYPE</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> initialState<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
 <span class="token comment">// 省略</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="useeffect-uselayouteffect" tabindex="-1"><a class="header-anchor" href="#useeffect-uselayouteffect" aria-hidden="true">#</a> useEffect &amp; useLayoutEffect</h3><p>一般这两个钩子不需要任何类型, 但要注意回调函数的返回值类型是void, 有的时候会不小心返回非void</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 正确的写法, 隐式的返回undifined, 返回值为void类型</span>
<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 错误的写法, setTimeout隐式返回了数字, 编译器会报错</span>
<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> 
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="useref" tabindex="-1"><a class="header-anchor" href="#useref" aria-hidden="true">#</a> useRef</h3><h4 id="使用ref访问dom" tabindex="-1"><a class="header-anchor" href="#使用ref访问dom" aria-hidden="true">#</a> 使用ref访问DOM</h4><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果可能的话，尽可能具体。例如，HTMLDivElement 它比HTMLElement更好，也比Element更好。</span>
  <span class="token comment">// divRef的类型为RefObject&lt;HTMLDivElement&gt;</span>
  <span class="token keyword">const</span> divRef <span class="token operator">=</span> useRef<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HTMLDivElement</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">(null);

  useEffect(() =&gt; </span><span class="token punctuation">{</span>
   <span class="token comment">// 注意，ref.current可能为null，需要对null的情况做处理</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>divRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&quot;divRef is not assigned&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 现在divRef一定是HTMLDivElement类型</span>
    <span class="token function">doSomethingWith</span><span class="token punctuation">(</span>divRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token plain-text">);

  // 将引用ref给一个元素，这样React就可以为你管理它了
  return </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>divRef<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">etc</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">;
}
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 也可以这么写, 如果您确定divRef.current永远不会为 null，也可以使用非空断言运算符!</span>
<span class="token comment">// 但这是主动退出了类型保护, 如果您**忘记**将 ref 分配给渲染中的元素，或者如果 ref绑定的元素是**有条件渲染**的，则会出现运行时错误。</span>
<span class="token keyword">const</span> divRef <span class="token operator">=</span> useRef<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HTMLDivElement</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">(null!);
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>非空断言运算符的使用语法</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 1. 固定语法: 用在null!, 表示虽然赋值为null但是一定不为null(欺骗ts编译器)</span>
<span class="token keyword">const</span> divRef <span class="token operator">=</span> useRef<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HTMLDivElement</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">(null!);
// 2. 用在变量之后 
let value: string | undefined;
let length: number = value!.length;
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="可变ref" tabindex="-1"><a class="header-anchor" href="#可变ref" aria-hidden="true">#</a> 可变ref</h4><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// intervalRef的类型为 MutableRefObject&lt;number | null&gt;</span>
  <span class="token keyword">const</span> intervalRef <span class="token operator">=</span> useRef<span class="token operator">&lt;</span>number <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 你自己手动给ref赋值,而不是react赋值（这就是为什么它被称为MutableRefObject！）</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    intervalRef<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">clearInterval</span><span class="token punctuation">(</span>intervalRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 这个ref不能传给任何DOM元素的ref属性</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token comment">/* clearInterval the ref */</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Cancel timer</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="useimperativehandle" tabindex="-1"><a class="header-anchor" href="#useimperativehandle" aria-hidden="true">#</a> useImperativeHandle</h3><div class="language-JSX line-numbers-mode" data-ext="JSX"><pre class="language-JSX"><code>// A组件内容

// 定义将传递给forwardRef的类型
export type AHandle = {
  start: () =&gt; void;
};
// A组件的props类型
type AProps = {};

const A = forwardRef&lt;CountdownHandle, CountdownProps&gt;((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    // start（）在这里有类型推断
    start() {
      alert(&quot;Start&quot;);
    },
  }));

  return &lt;div&gt;Countdown&lt;/div&gt;;
});


==================================================================================================
// 使用A组件
import A, { AHandle } from &quot;./Countdown.tsx&quot;;

function App() {
  // ref的泛型传递为AHandle
  const AEl = useRef&lt;AHandle&gt;(null);

  useEffect(() =&gt; {
    if (AEl.current) {
      // 这里有类型推断
      AEl.current.start();
    }
  }, []);

  return &lt;Countdown ref={AEl} /&gt;;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义hooks" tabindex="-1"><a class="header-anchor" href="#自定义hooks" aria-hidden="true">#</a> 自定义hooks</h3><h4 id="const断言" tabindex="-1"><a class="header-anchor" href="#const断言" aria-hidden="true">#</a> const断言</h4><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// str会被推断为string类型而不是字面量&#39;hello&#39;类型, 这是因为当声明变量或属性时，TypeScript 通常会扩大类型</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span> 

<span class="token comment">// str被推断为字面量类型 &quot;hello&quot;, as const用于显式的告诉编译器, 不要扩大类型</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span> <span class="token keyword">as</span> <span class="token keyword">const</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>type Shape <span class="token operator">=</span>
  <span class="token operator">|</span> <span class="token punctuation">{</span> <span class="token literal-property property">kind</span><span class="token operator">:</span> <span class="token string">&quot;circle&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">radius</span><span class="token operator">:</span> number <span class="token punctuation">}</span>
  <span class="token operator">|</span> <span class="token punctuation">{</span> <span class="token literal-property property">kind</span><span class="token operator">:</span> <span class="token string">&quot;square&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">sideLength</span><span class="token operator">:</span> number <span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getShapes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> readonly Shape<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果不加 as const, 编译器会报错, 因为返回值中kind的类型为string, 和type Shape中的字面量类型是不符合的</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">kind</span><span class="token operator">:</span> <span class="token string">&quot;circle&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">radius</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">kind</span><span class="token operator">:</span> <span class="token string">&quot;square&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">sideLength</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span>

 
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>as const的作用总结</p><ul><li>该表达式中的字面量类型不应扩大（例如，不要从<code>&quot;hello&quot;</code>到<code>string</code> ）</li><li>对象属性获取<code>readonly</code>属性</li><li>数组变成元组</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 变成 &#39;10&#39;而不是string</span>
<span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">10</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>

<span class="token comment">// 变成&#39;readonly [10, 20]&#39; 而不是number[]</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>

<span class="token comment">// 变成 &#39;{ readonly text: &quot;hello&quot; }&#39;</span>
<span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;hello&quot;</span> <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自定义hooks中的返回值" tabindex="-1"><a class="header-anchor" href="#自定义hooks中的返回值" aria-hidden="true">#</a> 自定义hooks中的返回值</h4>`,59),r={href:"https://devblogs.microsoft.com/typescript/announcing-typescript-3-4/#const-assertions",target:"_blank",rel:"noopener noreferrer"},k=p(`<div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>isLoading<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> load <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token comment">/*省略*/</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   <span class="token comment">// 省略</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  
  <span class="token comment">//加上const返回值类型推断为 [boolean, typeof load] 不加const推断为 (boolean | typeof load)[],这样，当解构时，会根据解构位置获得正确的类型。 </span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span>isLoading<span class="token punctuation">,</span> load<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四-类组件" tabindex="-1"><a class="header-anchor" href="#四-类组件" aria-hidden="true">#</a> 四: 类组件</h2><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>type MyProps <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//使用interface也可以</span>
  <span class="token literal-property property">message</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
type MyState <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">count</span><span class="token operator">:</span> number<span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&lt;</span>MyProps<span class="token punctuation">,</span> MyState<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 这里需要再次给state标注类型MyState, 以获得更好的类型提示</span>
  <span class="token literal-property property">state</span><span class="token operator">:</span> MyState <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>message<span class="token punctuation">}</span><span class="token plain-text"> </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>类的成员方法</strong>：不需要为类的成员方法标注额外的类型, 把他们的形参的类型写好就行</p><h2 id="五-表单与事件" tabindex="-1"><a class="header-anchor" href="#五-表单与事件" aria-hidden="true">#</a> 五: 表单与事件</h2><h3 id="内联函数写法" tabindex="-1"><a class="header-anchor" href="#内联函数写法" aria-hidden="true">#</a> 内联函数写法</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> el <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>
    <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">/* 最简单的写法, 内联函数, event会自动推断类型! */</span>
    <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
  <span class="token punctuation">/&gt;</span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="单独定义事件处理函数" tabindex="-1"><a class="header-anchor" href="#单独定义事件处理函数" aria-hidden="true">#</a> 单独定义事件处理函数</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&lt;</span>Props<span class="token punctuation">,</span> State<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 语法为 事件名&lt;触发元素&gt;</span>
  onChange <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> React<span class="token punctuation">.</span>FormEvent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HTMLInputElement</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">): void =&gt; </span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span> e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token plain-text">;
  render() </span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>text<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onChange<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token plain-text">
}
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code> <span class="token comment">// 也可以将类型定义在左边</span>
 onChange<span class="token operator">:</span> React<span class="token punctuation">.</span>ChangeEventHandler<span class="token operator">&lt;</span>HTMLInputElement<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>text<span class="token operator">:</span> e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h3><h3 id="常用的-react-事件类型" tabindex="-1"><a class="header-anchor" href="#常用的-react-事件类型" aria-hidden="true">#</a> 常用的 React 事件类型</h3><h4 id="_1-mouseevent" tabindex="-1"><a class="header-anchor" href="#_1-mouseevent" aria-hidden="true">#</a> 1. <strong>MouseEvent</strong></h4><p>用于处理鼠标相关的事件，例如 <code>onClick</code>, <code>onMouseEnter</code>, <code>onMouseLeave</code> 等。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> handleClick <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> React<span class="token punctuation">.</span>MouseEvent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HTMLButtonElement</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">) =&gt; </span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>currentTarget<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取触发事件的元素</span>
<span class="token punctuation">}</span><span class="token plain-text">;

</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click me</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">;

</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-changeevent" tabindex="-1"><a class="header-anchor" href="#_2-changeevent" aria-hidden="true">#</a> 2. <strong>ChangeEvent</strong></h4><p>用于处理输入控件（如 <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, <code>&lt;select&gt;</code>）的值变化事件，例如 <code>onChange</code>。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> handleInputChange <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> React<span class="token punctuation">.</span>ChangeEvent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HTMLInputElement</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">) =&gt; </span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取输入框的值</span>
<span class="token punctuation">}</span><span class="token plain-text">;

</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleInputChange<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">;

</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-formevent" tabindex="-1"><a class="header-anchor" href="#_3-formevent" aria-hidden="true">#</a> 3. <strong>FormEvent</strong></h4><p>用于处理表单的提交事件，通常用于 <code>onSubmit</code>。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> handleSubmit <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> React<span class="token punctuation">.</span>FormEvent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HTMLFormElement</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">) =&gt; </span><span class="token punctuation">{</span>
  event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 阻止表单默认提交行为</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Form submitted&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token plain-text">;

</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleSubmit<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Submit</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">;

</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-keyboardevent" tabindex="-1"><a class="header-anchor" href="#_4-keyboardevent" aria-hidden="true">#</a> 4. <strong>KeyboardEvent</strong></h4><p>用于处理键盘事件，例如 <code>onKeyDown</code>, <code>onKeyUp</code>, <code>onKeyPress</code>。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> handleKeyDown <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> React<span class="token punctuation">.</span>KeyboardEvent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HTMLInputElement</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">) =&gt; </span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取按下的键</span>
<span class="token punctuation">}</span><span class="token plain-text">;

</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onKeyDown</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleKeyDown<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">;

</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-focusevent" tabindex="-1"><a class="header-anchor" href="#_5-focusevent" aria-hidden="true">#</a> 5. <strong>FocusEvent</strong></h4><p>用于处理元素获得或失去焦点的事件，例如 <code>onFocus</code>, <code>onBlur</code>。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> handleFocus <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> React<span class="token punctuation">.</span>FocusEvent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HTMLInputElement</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">) =&gt; </span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Input focused&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token plain-text">;

</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onFocus</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleFocus<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">;

</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-dragevent" tabindex="-1"><a class="header-anchor" href="#_6-dragevent" aria-hidden="true">#</a> 6. <strong>DragEvent</strong></h4><p>用于处理拖拽事件，例如 <code>onDragStart</code>, <code>onDragOver</code>, <code>onDrop</code>。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> handleDragStart <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> React<span class="token punctuation">.</span>DragEvent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HTMLDivElement</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">) =&gt; </span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Dragging started&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token plain-text">;

</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">draggable</span> <span class="token attr-name">onDragStart</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleDragStart<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  Drag me
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">;

</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-wheelevent" tabindex="-1"><a class="header-anchor" href="#_7-wheelevent" aria-hidden="true">#</a> 7. <strong>WheelEvent</strong></h4><p>用于处理鼠标滚轮事件，例如 <code>onWheel</code>。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> handleWheel <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> React<span class="token punctuation">.</span>WheelEvent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HTMLDivElement</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">) =&gt; </span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>deltaY<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取滚动的方向和速度</span>
<span class="token punctuation">}</span><span class="token plain-text">;

</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onWheel</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleWheel<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Scroll me</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">;

</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-touchevent" tabindex="-1"><a class="header-anchor" href="#_8-touchevent" aria-hidden="true">#</a> 8. <strong>TouchEvent</strong></h4><p>用于处理触摸事件，主要在移动设备上使用，例如 <code>onTouchStart</code>, <code>onTouchMove</code>, <code>onTouchEnd</code>。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> handleTouchStart <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> React<span class="token punctuation">.</span>TouchEvent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HTMLDivElement</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">) =&gt; </span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Touch start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token plain-text">;

</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onTouchStart</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleTouchStart<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Touch me</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">;

</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-clipboardevent" tabindex="-1"><a class="header-anchor" href="#_9-clipboardevent" aria-hidden="true">#</a> 9. <strong>ClipboardEvent</strong></h4><p>用于处理剪贴板事件，例如 <code>onCopy</code>, <code>onPaste</code>。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> handleCopy <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> React<span class="token punctuation">.</span>ClipboardEvent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HTMLInputElement</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">) =&gt; </span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Text copied&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token plain-text">;

</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onCopy</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleCopy<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">;


</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="泛型事件类型" tabindex="-1"><a class="header-anchor" href="#泛型事件类型" aria-hidden="true">#</a> 泛型事件类型</h4><p>有时，你可能需要创建可以处理多种类型元素的事件处理函数。这时可以使用泛型事件类型，例如：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> handleClick <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">T</span></span> <span class="token attr-name">extends</span> <span class="token attr-name">HTMLElement</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">(event: React.MouseEvent</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">T</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">) =&gt; </span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>tagName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取触发事件的元素的标签名</span>
<span class="token punctuation">}</span><span class="token plain-text">;

</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">handleClick</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click me</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">;
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">handleClick</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click div</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">;
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>Event Type 事件类型</th><th>Description 描述</th></tr></thead><tbody><tr><td>AnimationEvent 动画事件</td><td>CSS Animations. CSS 动画。</td></tr><tr><td>ChangeEvent 变更事件</td><td>Changing the value of <code>&lt;input&gt;</code>, <code>&lt;select&gt;</code> and <code>&lt;textarea&gt;</code> element.更改<code>&lt;input&gt;</code> 、 <code>&lt;select&gt;</code>和<code>&lt;textarea&gt;</code>元素的值。</td></tr><tr><td>ClipboardEvent 剪贴板事件</td><td>Using copy, paste and cut events.使用复制、粘贴和剪切事件。</td></tr><tr><td>CompositionEvent 合成事件</td><td>Events that occur due to the user indirectly entering text (e.g. depending on Browser and PC setup, a popup window may appear with additional characters if you e.g. want to type Japanese on a US Keyboard)由于用户间接输入文本而发生的事件（例如，根据浏览器和 PC 设置，如果您想在美式键盘上输入日语，可能会出现一个带有附加字符的弹出窗口）</td></tr><tr><td>DragEvent 拖动事件</td><td>Drag and drop interaction with a pointer device (e.g. mouse).与指针设备（例如鼠标）的拖放交互。</td></tr><tr><td>FocusEvent 焦点事件</td><td>Event that occurs when elements gets or loses focus.当元素获得或失去焦点时发生的事件。</td></tr><tr><td>FormEvent 表单事件</td><td>Event that occurs whenever a form or form element gets/loses focus, a form element value is changed or the form is submitted.每当表单或表单元素获得/失去焦点、表单元素值更改或提交表单时发生的事件。</td></tr><tr><td>InvalidEvent 无效事件</td><td>Fired when validity restrictions of an input fails (e.g <code>&lt;input type=&quot;number&quot; max=&quot;10&quot;&gt;</code> and someone would insert number 20).当输入的有效性限制失败时触发（例如 <code>&lt;input type=&quot;number&quot; max=&quot;10&quot;&gt;</code> 有人会插入数字 20)。</td></tr><tr><td>KeyboardEvent 键盘事件</td><td>User interaction with the keyboard. Each event describes a single key interaction.用户与键盘的交互。每个事件都描述一个关键交互。</td></tr><tr><td>MouseEvent 鼠标事件</td><td>Events that occur due to the user interacting with a pointing device (e.g. mouse)由于用户与指点设备（例如鼠标）交互而发生的事件</td></tr><tr><td>PointerEvent 指针事件</td><td>Events that occur due to user interaction with a variety pointing of devices such as mouse, pen/stylus, a touchscreen and which also supports multi-touch. Unless you develop for older browsers (IE10 or Safari 12), pointer events are recommended. Extends UIEvent.由于用户与各种定点设备（例如鼠标、笔/手写笔、触摸屏）交互而发生的事件，并且还支持多点触摸。除非您针对较旧的浏览器（IE10 或 Safari 12）进行开发，否则建议使用指针事件。扩展 UIEvent。</td></tr><tr><td>TouchEvent 触摸事件</td><td>Events that occur due to the user interacting with a touch device. Extends UIEvent.由于用户与触摸设备交互而发生的事件。扩展 UIEvent。</td></tr><tr><td>TransitionEvent 转换事件</td><td>CSS Transition. Not fully browser supported. Extends UIEventCSS 过渡。不完全支持浏览器。扩展 UIEvent</td></tr><tr><td>UIEvent 用户界面事件</td><td>Base Event for Mouse, Touch and Pointer events.鼠标、触摸和指针事件的基本事件。</td></tr><tr><td>WheelEvent 轮盘事件</td><td>Scrolling on a mouse wheel or similar input device. (Note: <code>wheel</code> event should not be confused with the <code>scroll</code> event)在鼠标滚轮或类似输入设备上滚动。 （注意： <code>wheel</code>事件不应与<code>scroll</code>事件混淆）</td></tr><tr><td>SyntheticEvent 综合事件</td><td>The base event for all above events. Should be used when unsure about event type上述所有事件的基本事件。当不确定事件类型时应使用</td></tr></tbody></table><h3 id="六-context" tabindex="-1"><a class="header-anchor" href="#六-context" aria-hidden="true">#</a> 六: Context</h3><h4 id="context的基本写法" tabindex="-1"><a class="header-anchor" href="#context的基本写法" aria-hidden="true">#</a> Context的基本写法</h4><p>声明的类型</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>

type ThemeContextType <span class="token operator">=</span> <span class="token string">&quot;light&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;dark&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> ThemeContext <span class="token operator">=</span> createContext<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeContextType</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">(&quot;light&quot;);
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Provider有关的类型</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>theme<span class="token punctuation">,</span> setTheme<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeContextType</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">(&quot;light&quot;);

  return (
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeContext.Provider</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  );
};
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>useContext有关的类型</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 不需要传入额外的类型, 会自动推导</span>
  <span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>ThemeContext<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">The current theme is </span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span><span class="token plain-text">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="context不写默认值的几种写法" tabindex="-1"><a class="header-anchor" href="#context不写默认值的几种写法" aria-hidden="true">#</a> Context不写默认值的几种写法</h4><ol><li>Context的默认值直接指定为null, 用可选链操作符访问属性</li></ol><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// Context定义</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">CurrentUserContextType</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">username</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> CurrentUserContext <span class="token operator">=</span> createContext<span class="token operator">&lt;</span>CurrentUserContextType <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// APP组件</span>
<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>currentUser<span class="token punctuation">,</span> setCurrentUser<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CurrentUserContextType</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;filiptammergard&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token plain-text">);

  return (
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CurrentUserContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>currentUser<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">CurrentUserContext.Provider</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  );
};
// MyComponent组件
import </span><span class="token punctuation">{</span> useContext <span class="token punctuation">}</span><span class="token plain-text"> from &quot;react&quot;;

const MyComponent = () =&gt; </span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> currentUser <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>CurrentUserContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 这里使用可选链操作符访问属性	</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Name: </span><span class="token punctuation">{</span>currentUser<span class="token operator">?.</span>username<span class="token punctuation">}</span><span class="token plain-text">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token plain-text">;
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Context的默认值直接指定为null, 使用非空断言访问属性</li></ol><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> currentUser <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>CurrentUserContext<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Name: </span><span class="token punctuation">{</span>currentUser<span class="token operator">!</span><span class="token punctuation">.</span>username<span class="token punctuation">}</span><span class="token plain-text">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>Context的默认值指定为{} 空对象, 并转为初始类型. 使用时候正常访问属性</li></ol><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> CurrentUserContext <span class="token operator">=</span> createContext<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CurrentUserContextType</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">(
  </span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token plain-text"> as CurrentUserContextType
);
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>Context的默认值直接指定为null, 但使用非空断言去除null类型, 使用时候正常访问属性</li></ol><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> CurrentUserContext <span class="token operator">=</span> createContext<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CurrentUserContextType</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">(null!);
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="七-hoc" tabindex="-1"><a class="header-anchor" href="#七-hoc" aria-hidden="true">#</a> 七: HOC</h3><h4 id="泛型函数vs类型别名泛型定义函数" tabindex="-1"><a class="header-anchor" href="#泛型函数vs类型别名泛型定义函数" aria-hidden="true">#</a> 泛型函数vs类型别名泛型定义函数</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Func</span> <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">P</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">P</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">P</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> func<span class="token operator">:</span><span class="token function-variable function">Func</span> <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> value
<span class="token generic-function"><span class="token function">func</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 泛型函数类型是在调用时候传入泛型, 也可以省略传入泛型, ts会自动推导</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 注意此时泛型在类型后</span>
<span class="token keyword">type</span> <span class="token class-name">Func<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">P</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">P</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> func<span class="token operator">:</span>Func<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> value <span class="token comment">// 类型别名泛型定义的函数, 是在使用类型别名时候, 必须显式的传递泛型</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="ts中定义函数类型的方式" tabindex="-1"><a class="header-anchor" href="#ts中定义函数类型的方式" aria-hidden="true">#</a> ts中定义函数类型的方式</h4><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 最常见的方式</span>
type <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">value</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 使用接口定义函数</span>
<span class="token keyword">interface</span> <span class="token class-name">FuncType</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">}</span>

<span class="token comment">// 上面的代码等价于</span>
<span class="token keyword">type</span> <span class="token class-name">FuncType</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">}</span>
<span class="token comment">// 测试成功</span>
<span class="token keyword">const</span> func<span class="token operator">:</span><span class="token function-variable function">FuncType</span> <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> value <span class="token operator">===</span> <span class="token string">&#39;a&#39;</span>


<span class="token comment">// 也可以写成一行, 采用匿名的方式</span>
<span class="token comment">// 这种方式常被用于一个函数的参数为函数, 如 const func = (callback: { (value:string):void }) =&gt; { //... }</span>
<span class="token keyword">const</span> func<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> value <span class="token operator">===</span> <span class="token string">&#39;a&#39;</span>

<span class="token comment">// 如果定义时, 增加额外的属性, 则是限制函数的静态属性</span>
<span class="token keyword">interface</span> <span class="token class-name">FuncType</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span>

  name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token comment">// 要求该函数必须还要有name属性</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> func2<span class="token operator">:</span> <span class="token function-variable function">FuncType</span> <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> value <span class="token operator">===</span> <span class="token string">&#39;a&#39;</span>

func2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;我是func2&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数重载</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 最常见的函数重载方式</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">a</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">a</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token comment">// const a = 1 不允许中间插代码</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">a</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span><span class="token operator">:</span> any <span class="token punctuation">{</span> <span class="token comment">// 重载的的声明和实现必须紧贴在一起</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">// 使用type实现重载, 好处是不用立刻实现</span>
<span class="token comment">// 使用interface也行</span>
type Add <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span>a<span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
  <span class="token punctuation">(</span>a<span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="jsx-element-reactelement和reactnode-componenttype类型的区别" tabindex="-1"><a class="header-anchor" href="#jsx-element-reactelement和reactnode-componenttype类型的区别" aria-hidden="true">#</a> JSX.Element,ReactElement和ReactNode,ComponentType类型的区别</h4>`,70),d={href:"https://stackoverflow.com/questions/58123398/when-to-use-jsx-element-vs-reactnode-vs-reactelement",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/9f855c408dac3c7b3bf0ed9d78242ce073c7aaf1/types/react/index.d.ts#L327",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"ReactElement",-1),b=n("code",null,"type",-1),g=n("code",null,"props",-1),y=n("code",null,"key",-1),h=n("strong",null,"对象",-1),x=p(`<ul><li><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">ReactElement<span class="token operator">&lt;</span> <span class="token constant">P</span><span class="token punctuation">,</span><span class="token constant">T</span> <span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
  props<span class="token operator">:</span> <span class="token constant">P</span><span class="token punctuation">;</span>
  key<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,1),f={href:"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/9f855c408dac3c7b3bf0ed9d78242ce073c7aaf1/types/react/index.d.ts#L4260",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"JSX.Element",-1),q=n("code",null,"ReactElement<any, any>",-1),j=p(`<ul><li><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> global <span class="token punctuation">{</span>
  <span class="token comment">// …</span>
  <span class="token keyword">namespace</span> <span class="token constant">JSX</span> <span class="token punctuation">{</span>
    <span class="token comment">// …</span>
    <span class="token keyword">interface</span> <span class="token class-name">Element</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>ReactElement<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment">// …</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// …</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,1),C=p(`<li><p>ReactNode包含一切React可以渲染的元素, 包括虚拟DOM, string, num, boolean等等</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>type ReactNode <span class="token operator">=</span>
  <span class="token operator">|</span> ReactElement
  <span class="token operator">|</span> string
  <span class="token operator">|</span> number
  <span class="token operator">|</span> Iterable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ReactNode</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  | ReactPortal
  | boolean
  | null
  | undefined;
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>ComponentType是React中组件的类型, 包括函数式组件和类组件</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>  type ComponentType<span class="token operator">&lt;</span><span class="token constant">P</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token operator">=</span> ComponentClass<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">P</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> | FunctionComponent</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">P</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​</p></li>`,2),T=p(`<p>例子</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> // &lt;- 这是ReactElement
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> // &lt;- ReactElement
    </span><span class="token punctuation">{</span>condition <span class="token operator">&amp;&amp;</span> <span class="token string">&#39;text&#39;</span><span class="token punctuation">}</span><span class="token plain-text"> // &lt;- ReactNode
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Component</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="hoc示例" tabindex="-1"><a class="header-anchor" href="#hoc示例" aria-hidden="true">#</a> HOC示例</h4><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>
type PropsAreEqual<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">P</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> = (
  prevProps: Readonly</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">P</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">,
  nextProps: Readonly</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">P</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
) =&gt; boolean;

const withSampleHoC = &lt;P extends </span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token plain-text">&gt;(
  component: </span><span class="token punctuation">{</span>
    <span class="token punctuation">(</span>props<span class="token operator">:</span> <span class="token constant">P</span><span class="token punctuation">)</span><span class="token operator">:</span> Exclude<span class="token operator">&lt;</span>React<span class="token punctuation">.</span>ReactNode<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    displayName<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token plain-text">,
  propsAreEqual?: PropsAreEqual</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">P</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> | false,

  componentName = component.displayName ?? component.name
): </span><span class="token punctuation">{</span>
  <span class="token punctuation">(</span>props<span class="token operator">:</span> <span class="token constant">P</span><span class="token punctuation">)</span><span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">JSX</span><span class="token punctuation">.</span>Element<span class="token punctuation">;</span>
  <span class="token literal-property property">displayName</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token plain-text"> =&gt; </span><span class="token punctuation">{</span>

  <span class="token keyword">function</span> <span class="token function">WithSampleHoc</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token constant">P</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//Do something special to justify the HoC.</span>
    <span class="token keyword">return</span> <span class="token function">component</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token keyword">as</span> React<span class="token punctuation">.</span><span class="token constant">JSX</span><span class="token punctuation">.</span>Element<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  WithSampleHoc<span class="token punctuation">.</span>displayName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">withSampleHoC(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>componentName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> wrappedComponent <span class="token operator">=</span> propsAreEqual <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token operator">?</span> WithSampleHoc <span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span>WithSampleHoc<span class="token punctuation">,</span> propsAreEqual<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">//copyStaticProperties(component, wrappedComponent);</span>

  <span class="token keyword">return</span> wrappedComponent <span class="token keyword">as</span> <span class="token keyword">typeof</span> WithSampleHoc
<span class="token punctuation">}</span><span class="token plain-text">;
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="hoc与注入props" tabindex="-1"><a class="header-anchor" href="#hoc与注入props" aria-hidden="true">#</a> HOC与注入props</h4><p>假如我们有一个themeContext如下</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createContext<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ThemeContextProps</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token string">&quot;light&quot;</span> <span class="token operator">|</span> <span class="token string">&#39;dark&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token literal-property property">initialTheme</span><span class="token operator">:</span> ThemeContextProps <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token string">&quot;light&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> themeContext <span class="token operator">=</span> createContext<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeContextProps</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">(initialTheme)


export default themeContext
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时想封装一个高阶组件, 为使用这个高阶组件的组件注入这个context</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>ComponentType<span class="token punctuation">,</span> createContext<span class="token punctuation">,</span> useContext<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ThemeContextProps</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token string">&quot;light&quot;</span> <span class="token operator">|</span> <span class="token string">&#39;dark&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token literal-property property">initialTheme</span><span class="token operator">:</span> ThemeContextProps <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token string">&quot;light&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> themeContext <span class="token operator">=</span> createContext<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeContextProps</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">(initialTheme)

// 新增以下代码
const withThemeContext = </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">P</span></span> <span class="token attr-name">extends</span> <span class="token attr-name">ThemeContextProps</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">(
  Component: ComponentType</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">P</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
) =&gt; </span><span class="token punctuation">{</span>
  <span class="token comment">// withThemeContext在使用的时候应该是 export default withThemeContext(被包裹的组件)</span>
  <span class="token comment">// 那么withThemeContext()返回的组件的props是不需要的注入的这些属性, 注入的属性只能被包裹的组件使用</span>
  <span class="token comment">// 不允许调用包裹后的组件的消费者还能传递这些prop, 所以在这里手动删除了props中注入的属性</span>
  <span class="token keyword">const</span> <span class="token function-variable function">WithThemeComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">props</span><span class="token operator">:</span> Omit<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token punctuation">,</span> keyof ThemeContextProps<span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> themeProps <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>themeContext<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>themeProps<span class="token punctuation">}</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">(</span>props <span class="token keyword">as</span> <span class="token constant">P</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>  <span class="token punctuation">/&gt;</span></span><span class="token comment">//请注意，由于 TS 3.2 中的当前错误，需要{...(props as P)}断言</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> WithThemeComponent
<span class="token punctuation">}</span><span class="token plain-text">

export default themeContext
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token constant">FC</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>ThemeContextProps<span class="token punctuation">,</span> withThemeContext<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./themeContext&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">AppProps</span> <span class="token keyword">extends</span> <span class="token class-name">ThemeContextProps</span><span class="token punctuation">{</span> <span class="token comment">// 这里需要继承themeContext的props,因为高阶组件会扩展App的props</span>
  <span class="token comment">// ... APP自己的props</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token literal-property property">App</span><span class="token operator">:</span><span class="token constant">FC</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AppProps</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> = ({theme}) =&gt; </span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>theme<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">业务逻辑</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token plain-text">

// 1. withThemeContext(App)的类型: React.ComponentType&lt;AppProps&gt;): (props:Omit&lt;AppProps, &quot;theme&quot;&gt;) =&gt; JSX.Element
// 2. 这里删除了theme属性, 是为了外面使用APP组件的时候, 不允许传入theme属性, 因为theme属性是高阶组件通过context传递的
// 3. 不用显式的给withThemeContext传递泛型(尽管定义的时候使用了泛型), 会自动类型推导
export default withThemeContext(App);

</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>改造一下withThemeContext, 养成良好的习惯, 你的HOC应该在react dev tools里有一个好的名字</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> withThemeContext <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">P</span></span> <span class="token attr-name">extends</span> <span class="token attr-name">ThemeContextProps</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">(
  Component: ComponentType</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">P</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
) =&gt; </span><span class="token punctuation">{</span>
  
  <span class="token keyword">const</span> <span class="token function-variable function">WithThemeComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">props</span><span class="token operator">:</span> Omit<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token punctuation">,</span> keyof ThemeContextProps<span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> themeProps <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>themeContext<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>themeProps<span class="token punctuation">}</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">(</span>props <span class="token keyword">as</span> <span class="token constant">P</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>  <span class="token punctuation">/&gt;</span></span><span class="token comment">//请注意，由于 TS 3.2 中的当前错误，需要{...(props as P)}断言</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 新增</span>
  <span class="token keyword">const</span> ComponentName <span class="token operator">=</span> Component<span class="token punctuation">.</span>displayName <span class="token operator">||</span> Component<span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token string">&quot;Component&quot;</span>
  WithThemeComponent<span class="token punctuation">.</span>displayName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">withTheme(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ComponentName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span>

  <span class="token keyword">return</span> WithThemeComponent
<span class="token punctuation">}</span><span class="token plain-text">
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="工具类型" tabindex="-1"><a class="header-anchor" href="#工具类型" aria-hidden="true">#</a> 工具类型</h3><h5 id="omit" tabindex="-1"><a class="header-anchor" href="#omit" aria-hidden="true">#</a> Omit</h5><p>从对象类型中删除key(key可以是联合类型)</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token function-variable function">work</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">OmitPerson</span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;work&quot;</span><span class="token operator">&gt;</span> <span class="token comment">// 从Person接口中删除了age和work属性</span>
<span class="token keyword">const</span> person<span class="token operator">:</span>OmitPerson <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="keyof" tabindex="-1"><a class="header-anchor" href="#keyof" aria-hidden="true">#</a> keyof</h5><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token function-variable function">work</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Keys</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> Person <span class="token comment">// key的类型为联合类型 &quot;name&quot; |&quot;age&quot; | &quot;work&quot;</span>

<span class="token keyword">let</span> key<span class="token operator">:</span>Keys
key <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span>
key<span class="token operator">=</span><span class="token string">&quot;age&quot;</span>
key <span class="token operator">=</span><span class="token string">&quot;work&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="八-其他" tabindex="-1"><a class="header-anchor" href="#八-其他" aria-hidden="true">#</a> 八: 其他</h3><h4 id="declare的用法" tabindex="-1"><a class="header-anchor" href="#declare的用法" aria-hidden="true">#</a> declare的用法</h4><p><strong>0. 基本用法</strong></p><ol><li>declare 用于.d.ts文件</li><li>.d.ts文件中<strong>根级别</strong>的声明(除了type 和 interface)外必须使用declare声明(如function, namespace, moudle等)</li></ol><h5 id="_1-declare-global" tabindex="-1"><a class="header-anchor" href="#_1-declare-global" aria-hidden="true">#</a> 1.declare global</h5><p>declare global 用于扩展全局作用域, 意思是使用declare global包裹的类型, 可以在项目任意位置使用, 而不必显式的import, export</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>declare global <span class="token punctuation">{</span>
  <span class="token comment">// 可以在项目中任意位置使用User</span>
  type User <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span>string <span class="token punctuation">}</span>
  
  type <span class="token function-variable function">voidFunction</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
  
  <span class="token comment">// 扩展window上的属性, 当引入第三方js编写的库时候, 可以用到这个功能</span>
  <span class="token keyword">interface</span> <span class="token class-name">Winodw</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">Vue</span><span class="token operator">:</span> Object <span class="token comment">// 现在可以在项目中任何位置使用window.Vue而不报错了</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 确保ts文件将该文件视为一个模块</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注: 一般用global.d.ts文件保存这些扩展的全局类型</p><h5 id="_2-declare-module" tabindex="-1"><a class="header-anchor" href="#_2-declare-module" aria-hidden="true">#</a> 2. declare module</h5><ol><li>通配符moudle</li></ol><p>示例一: 引入图片</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 这意味着引入任何路径下jpg图片, 都会被视为一个src字符串</span>
<span class="token comment">// 导入jpg图片就是在导入字符串(该字符串记录了一个src)</span>
declare module <span class="token string">&#39;*.jpg&#39;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token literal-property property">src</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> src<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token constant">PNG</span> <span class="token keyword">from</span> <span class="token string">&#39;../public/logo192.png&#39;</span>
<span class="token keyword">let</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token keyword">typeof</span> <span class="token constant">PNG</span> <span class="token operator">=</span> <span class="token number">111</span> <span class="token comment">// 这里会报错:  Type &#39;number&#39; is not assignable to type &#39;string&#39;, 因为PNG是一个string类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例二: vue中的通配符</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">//  vue-shims.d.ts中有以下代码</span>
<span class="token comment">// 这个代码意味着任何导入的.vue文件都是一个DefineComponent&lt;{}, {}, any&gt;类型, 即组件类型</span>
declare module <span class="token string">&#39;*.vue&#39;</span> <span class="token punctuation">{</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span> DefineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token literal-property property">component</span><span class="token operator">:</span> DefineComponent<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> any<span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> component<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>增强模块</li></ol><p>见八-声明合并-增强模块(扩展第三方库)</p><h4 id="react中的类型保护" tabindex="-1"><a class="header-anchor" href="#react中的类型保护" aria-hidden="true">#</a> React中的类型保护</h4><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">interface</span> <span class="token class-name">Admin</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">role</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">email</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 这里user是联合类型</span>
<span class="token keyword">function</span> <span class="token function">redirect</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">user</span><span class="token operator">:</span> Admin <span class="token operator">|</span> User</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 使用in关键字缩窄user的类型, 进行类型保护</span>
  <span class="token comment">// 除了in外还有typeof, instanceof都可以在if判断中缩窄user类型</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;role&quot;</span> <span class="token keyword">in</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">routeToAdminPage</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>role<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">routeToHomePage</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了in, instanceof, typeof以外还可以使用ts语法自定义类型保护</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 语法如下, 自定义类型保护就是一个名为isXXX的函数</span>
<span class="token keyword">function</span> <span class="token function">isXXX</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">variable</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span><span class="token operator">:</span> variable is SpecificType <span class="token punctuation">{</span>
  <span class="token comment">// 当return ture时, ts编译器会将</span>
  <span class="token keyword">return</span> <span class="token comment">/* true or false */</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个自定义类型保护的例子</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">interface</span> <span class="token class-name">Fish</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">swim</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Bird</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">fly</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
<span class="token punctuation">}</span>

<span class="token comment">// 自定义类型保护最重要的一点就是声明一个 isXXX的函数</span>
<span class="token keyword">function</span> <span class="token function">isFish</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">animal</span><span class="token operator">:</span> Fish <span class="token operator">|</span> Bird</span><span class="token punctuation">)</span><span class="token operator">:</span> animal is Fish <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>animal <span class="token keyword">as</span> Fish<span class="token punctuation">)</span><span class="token punctuation">.</span>swim <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用时</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">animal</span><span class="token operator">:</span> Fish<span class="token operator">|</span> Bird</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isFish</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 此时缩窄了类型, ts不会报错</span>
    animal<span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
    animal<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举" aria-hidden="true">#</a> 枚举</h4>`,45),P={href:"https://fettblog.eu/tidy-typescript-avoid-enums/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://twitter.com/orta/status/1348966323271987201?s=20",target:"_blank",rel:"noopener noreferrer"},A=p(`<div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">export</span> declare type Position <span class="token operator">=</span> <span class="token string">&quot;left&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;right&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;top&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;bottom&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="type-branding" tabindex="-1"><a class="header-anchor" href="#type-branding" aria-hidden="true">#</a> type branding</h4><p>type branding是为了区分相同的类型的</p><p>比如我用string类型表示ID, 但无法用string类型分别表示OrderID和UserID, 此时就可以用type branding区分string</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">OrderID</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span> <span class="token keyword">readonly</span> brand<span class="token operator">:</span> unique <span class="token builtin">symbol</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">UserID</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span> <span class="token keyword">readonly</span> brand<span class="token operator">:</span> unique <span class="token builtin">symbol</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">ID</span></span> <span class="token operator">=</span> OrderID <span class="token operator">|</span> UserID<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当区分ID后, 要创建类型的辅助函数, 帮助将id:string 转为具体的区分类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">OrderID</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> id <span class="token keyword">as</span> OrderID<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">UserID</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> id <span class="token keyword">as</span> UserID<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是使用辅助函数, 便可以区分id的类型了</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">queryForUser</span><span class="token punctuation">(</span>id<span class="token operator">:</span> UserID<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
<span class="token function">queryForUser</span><span class="token punctuation">(</span><span class="token function">OrderID</span><span class="token punctuation">(</span><span class="token string">&quot;foobar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 传入OrderID(&quot;foobar&quot;)会导致类型不匹配, 应该传入UserID(&quot;foobar&quot;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="交叉类型" tabindex="-1"><a class="header-anchor" href="#交叉类型" aria-hidden="true">#</a> 交叉类型</h4><p>可以使用交叉类型扩展DOM元素的属性, 下面是一个扩展Button组件的例子</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 扩展的button的属性</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">PrimaryButtonProps</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">label</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> PrimaryButton <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token comment">// 扩展类型与原类型交叉</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> PrimaryButtonProps <span class="token operator">&amp;</span> React<span class="token punctuation">.</span>ButtonHTMLAttributes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HTMLButtonElement</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
) =&gt; </span><span class="token punctuation">{</span>
  <span class="token comment">// 由于props的类型是大于原button的属性的, 所以解构赋值,全部传入进去</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>label<span class="token punctuation">}</span><span class="token plain-text"> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token plain-text">;
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="第三方组件库的类型未导出" tabindex="-1"><a class="header-anchor" href="#第三方组件库的类型未导出" aria-hidden="true">#</a> 第三方组件库的类型未导出</h4><p>组件props类型未导出</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 假如第三方库只导出了Button组件, 但没有导出它的类型</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;library&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 可以通过ComponentProps + typeof取组件的props类型</span>
type ButtonProps <span class="token operator">=</span> React<span class="token punctuation">.</span>ComponentProps<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeof</span> <span class="token attr-name">Button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">; 
// 再删除Button组件的onClick类型, 我们准备实现自己的click
type AlertButtonProps = Omit&lt;ButtonProps, &quot;onClick&quot;&gt;;
const AlertButton = (props: AlertButtonProps) =&gt; (
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
);


</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),R={href:"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/a05cc538a42243c632f054e42eab483ebf1560ab/types/react/index.d.ts#L774",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"ComponentPropsWithoutRef",-1),_={href:"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/a05cc538a42243c632f054e42eab483ebf1560ab/types/react/index.d.ts#L770",target:"_blank",rel:"noopener noreferrer"},M=n("code",null,"ComponentPropsWithRef",-1),I=p(`<p>函数返回值类型未导出</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 假如某些库的函数返回值类型未导出</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">bar</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">baz</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 可以使用ReturnType取出该函数返回值类型</span>
type FooReturn <span class="token operator">=</span> ReturnType<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeof</span> <span class="token attr-name">foo</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">; 
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="常见的取类型的手段" tabindex="-1"><a class="header-anchor" href="#常见的取类型的手段" aria-hidden="true">#</a> 常见的取类型的手段</h4><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token literal-property property">subInstArr</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
        <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 取出函数返回值对象的类型</span>
type InstType <span class="token operator">=</span> ReturnType<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeof</span> <span class="token attr-name">foo</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">;
// 取出对象某个属性的类型
type SubInstArr = InstType[&quot;subInstArr&quot;];
// 取出组成数组的元素的类型. 另外一个例子是:  type A = string[], type B = A[0], 则B的类型是string
type SubInstType = SubInstArr[0];

// 测试一下, 组成数组的元素类型是正确的
let baz: SubInstType = </span><span class="token punctuation">{</span>
  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
  <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token comment">// type checks ok!</span>
<span class="token punctuation">}</span><span class="token plain-text">;

// 上面的代码也可以写出一行
type SubInstType2 = ReturnType</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeof</span> <span class="token attr-name">foo</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">[&quot;subInstArr&quot;][0];
let baz2: SubInstType2 = </span><span class="token punctuation">{</span>
  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
  <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token comment">// type checks ok!</span>
<span class="token punctuation">}</span><span class="token plain-text">;
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外TS 还附带了一个<code>Parameters</code>实用程序类型，用于提取函数的参数</p><h4 id="使用的js模块没有ts类型" tabindex="-1"><a class="header-anchor" href="#使用的js模块没有ts类型" aria-hidden="true">#</a> 使用的JS模块没有TS类型</h4><h5 id="definitelytyped" tabindex="-1"><a class="header-anchor" href="#definitelytyped" aria-hidden="true">#</a> DefinitelyTyped</h5><p>DefinitelyTyped 是一个为 TypeScript 社区维护的github开源仓库,</p><p>这个仓库的types目录里有数千个第三方js库的ts声明, 全是社区编写的.</p><p>任何发布到types目录里的第三方ts声明, 都会在一个半小时之内发布到npm上, 发布后就可以通过</p><p><code>npm i @types/xxx -D</code> 下载使用</p><p>例子: 如 你正在使用<code>axios-cancel</code> 这个纯js的第三方库, 但项目是ts的, 你需要为他编写ts类型定义, 不妨先去DefinitelyTyped库中搜索下社区是否为其编写过ts定义</p><p>于是你在types中可以找到 axios-cancel的声明文件, 你便可以使用<code>npm i @types/axios-cancel -D</code>下载并直接使用, 而无需手动编写ts声明文件</p><h5 id="在tsconfig-json中配置" tabindex="-1"><a class="header-anchor" href="#在tsconfig-json中配置" aria-hidden="true">#</a> 在tsconfig.json中配置</h5><p><code>llowJs</code> 是 <code>tsconfig.json</code> 中的一个配置选项。启用该选项时，TypeScript 编译器允许对 JavaScript 文件（<code>.js</code> 和 <code>.jsx</code> 文件）进行编译。具体来说，设置 <code>allowJs: true</code> 后，TypeScript 项目可以同时包含 TypeScript 文件（<code>.ts</code> 和 <code>.tsx</code>）以及 JavaScript 文件。</p><p><strong>示例配置</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;allowJs&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;outDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/**/*&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>allowJs</code> 选项的主要作用：</p><ol><li><strong>支持 JavaScript 文件编译</strong>：在项目中包含并编译 JavaScript 文件。这对于从 JavaScript 项目逐步迁移到 TypeScript 项目特别有用，因为它允许你逐步将 JavaScript 文件转化为 TypeScript 文件，而不需要一次性完成转换。</li><li><strong>编译输出</strong>：当 <code>allowJs</code> 选项启用时，TypeScript 编译器会像处理 TypeScript 文件一样处理 JavaScript 文件，生成对应的 <code>.js</code> 文件（如果设置了 <code>outDir</code>，生成的文件会输出到指定目录）。</li><li><strong>与 checkJs 搭配使用</strong>：如果还启用了 <code>checkJs: true</code>，TypeScript 编译器会对 JavaScript 文件进行类型检查。这对改进现有 JavaScript 代码的类型安全性很有帮助。</li></ol><p><strong>注意事项：</strong></p><ul><li><strong>项目过渡</strong>：<code>allowJs</code> 通常用于项目过渡期，即将项目从纯 JavaScript 逐步迁移到 TypeScript。它允许你在 TypeScript 项目中继续使用现有的 JavaScript 代码。</li><li><strong>性能影响</strong>：启用 <code>allowJs</code> 后，编译器需要处理更多文件，这可能会影响编译性能，尤其是在大型项目中。</li></ul><p><strong><code>allowJs</code> 与 <code>checkJs</code> 的区别：</strong></p><ul><li><strong>allowJs</strong>: 允许 TypeScript 编译器编译 JavaScript 文件，但不进行类型检查。</li><li><strong>checkJs</strong>: 启用后，TypeScript 编译器不仅会编译 JavaScript 文件，还会对 JavaScript 文件进行类型检查。</li></ul><p><strong><code>allowJs</code> 与 <code>declaration</code> 的冲突：</strong></p><p>如果你启用了 <code>allowJs</code>，但同时启用了 <code>declaration</code> 生成类型声明文件，TypeScript 会抛出一个错误。这是因为 TypeScript 不能为 JavaScript 文件生成 <code>.d.ts</code> 类型声明文件。要解决此问题，通常需要将 <code>declaration</code> 设置为 <code>false</code>，或者将 <code>.js</code> 文件逐步转换为 <code>.ts</code> 文件。</p><h5 id="使用工具自动为js文件生成类型" tabindex="-1"><a class="header-anchor" href="#使用工具自动为js文件生成类型" aria-hidden="true">#</a> 使用工具自动为js文件生成类型</h5>`,26),B={href:"https://github.com/Microsoft/dts-gen",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"dts-gen",-1),J=p(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> dts-gen
dts-gen <span class="token parameter variable">-m</span> <span class="token operator">&lt;</span>your-module<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="为js编写的hook编写类型" tabindex="-1"><a class="header-anchor" href="#为js编写的hook编写类型" aria-hidden="true">#</a> 为js编写的hook编写类型</h5><p>假设在 use-untyped-hook.js文件有如下文件</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">useUntypedHook</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">prop</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// some processing happens here</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token comment">/* ReturnProps */</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> useUntypedHook<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在自己的.d.ts文件中为这个hook编写类型, 应该遵循以下规范</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>declare module <span class="token string">&#39;use-untyped-hook&#39;</span> <span class="token punctuation">{</span> <span class="token comment">// 1 需要声明模块</span>
  <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">InputProps</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>   <span class="token comment">// 2. 声明hook接收的prop属性的类型并导出</span>
  <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ReturnProps</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span> <span class="token comment">// 3. 声明hook返回的prop属性的类型并导出</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">useUntypedHook</span><span class="token punctuation">(</span> <span class="token comment">//4. 默认导出该hook函数的类型</span>
    <span class="token literal-property property">prop</span><span class="token operator">:</span> InputProps
    <span class="token comment">// ...</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> ReturnProps<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="tsconfig-json" tabindex="-1"><a class="header-anchor" href="#tsconfig-json" aria-hidden="true">#</a> tsconfig.json</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;incremental&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 启用增量编译，编译器会缓存上一次编译的结果，以便下次编译时更快。</span>
    <span class="token string-property property">&quot;outDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;build/lib&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 指定编译输出目录。</span>
    <span class="token string-property property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es5&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 编译输出的 JavaScript 版本为 ES5。</span>
    <span class="token string-property property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;esnext&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 指定模块系统为 ESNext。ESNext 是 ECMAScript 的一个目标版本，表示最新的 ECMAScript 标准（即 JavaScript）规范中的功能，通常包含尚未正式发布的未来特性。</span>
    <span class="token string-property property">&quot;lib&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;DOM&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ESNext&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 编译时包含的库文件，提供 DOM 和 ESNext 的类型定义。</span>
    <span class="token string-property property">&quot;sourceMap&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 生成对应的 source map 文件，帮助调试。</span>
    <span class="token string-property property">&quot;importHelpers&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 启用将辅助代码（如 __extends）从 tslib 模块导入，以减少生成代码的大小。</span>
    <span class="token string-property property">&quot;declaration&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 生成 .d.ts 类型声明文件。</span>
    <span class="token string-property property">&quot;rootDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;src&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 指定项目的根目录，TypeScript 会在该目录下查找文件。</span>
    <span class="token string-property property">&quot;strict&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 启用所有严格类型检查选项。</span>
    <span class="token string-property property">&quot;noUnusedLocals&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 报告未使用的局部变量。</span>
    <span class="token string-property property">&quot;noUnusedParameters&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 报告未使用的函数参数。</span>
    <span class="token string-property property">&quot;noImplicitReturns&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 报告没有显式返回值的函数。</span>
    <span class="token string-property property">&quot;noFallthroughCasesInSwitch&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 报告 switch 语句中的 fall-through 情况。</span>
    <span class="token string-property property">&quot;allowJs&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 禁止编译 JavaScript 文件，只编译 TypeScript 文件。</span>
    <span class="token string-property property">&quot;jsx&quot;</span><span class="token operator">:</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 处理 JSX 语法时使用 React 模式。</span>
    <span class="token string-property property">&quot;moduleResolution&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 使用 Node.js 风格的模块解析规则。</span>
    <span class="token string-property property">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;src&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 设置模块导入的基础目录，通常与根目录设置一致。</span>
    <span class="token string-property property">&quot;forceConsistentCasingInFileNames&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 强制在文件名中使用一致的大小写。</span>
    <span class="token string-property property">&quot;esModuleInterop&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 允许默认导入非 ES 模块的模块。</span>
    <span class="token string-property property">&quot;suppressImplicitAnyIndexErrors&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 隐藏对隐式 \`any\` 的索引访问错误。</span>
    <span class="token string-property property">&quot;allowSyntheticDefaultImports&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 允许从没有默认导出的模块中导入默认值。</span>
    <span class="token string-property property">&quot;experimentalDecorators&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 启用实验性的装饰器。</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/**/*&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 包含的文件或文件夹，指示编译器应编译这些文件。</span>
  <span class="token string-property property">&quot;exclude&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;node_modules&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;build&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;scripts&quot;</span><span class="token punctuation">]</span> <span class="token comment">// 排除的文件或文件夹，编译器不会编译这些文件。</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="声明合并" tabindex="-1"><a class="header-anchor" href="#声明合并" aria-hidden="true">#</a> 声明合并</h4><ol><li>“声明合并”意味着编译器将<strong>使用相同名称</strong>声明的两个单独的声明<strong>合并到一个定义</strong>中。</li><li>这个合并的定义具有两个原始声明的特征。</li><li>可以合并任意数量的声明；不仅限于两个声明。</li></ol><h5 id="接口合并" tabindex="-1"><a class="header-anchor" href="#接口合并" aria-hidden="true">#</a> 接口合并</h5><ol><li>同名的接口会自动合并</li><li>靠后的接口优先级更高</li><li>不同接口内相同属性不允许类型不同</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token comment">// 上面的代码等价于</span>
<span class="token comment">// interface A {</span>
<span class="token comment">//   age: number // 下面的接口优先级更高, age排在签名</span>
<span class="token comment">//   name:string</span>
<span class="token comment">// }</span>
<span class="token keyword">const</span> obj<span class="token operator">:</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="命名空间合并" tabindex="-1"><a class="header-anchor" href="#命名空间合并" aria-hidden="true">#</a> 命名空间合并</h5><p>和interface合并规则类似</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">namespace</span> <span class="token constant">A</span> <span class="token punctuation">{</span>
  <span class="token keyword">export</span> <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
<span class="token keyword">namespace</span> <span class="token constant">A</span> <span class="token punctuation">{</span>
  <span class="token keyword">export</span> <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span>
<span class="token punctuation">}</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="命名空间与class合并" tabindex="-1"><a class="header-anchor" href="#命名空间与class合并" aria-hidden="true">#</a> 命名空间与class合并</h5><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">class</span> <span class="token class-name">Album</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">label</span><span class="token operator">:</span>Album<span class="token punctuation">.</span>AlbumLabel
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>label <span class="token operator">=</span> Album<span class="token punctuation">.</span>AlbumLabel
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 拥有一个和class同名的namespace, 相当于扩展了class的静态属性, 所以在上面的class中, 可以使用扩展的静态属性</span>
<span class="token comment">// 注意, 使用namespace 扩展class, NameSpace要写在靠后的位置</span>
namespace Album <span class="token punctuation">{</span>
  <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AlbumLabel</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="命名空间与函数合并" tabindex="-1"><a class="header-anchor" href="#命名空间与函数合并" aria-hidden="true">#</a> 命名空间与函数合并</h5><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">test</span> <span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> test<span class="token punctuation">.</span><span class="token constant">PREFIX</span> <span class="token operator">+</span> str 
<span class="token punctuation">}</span>

<span class="token comment">// 拥有一个和函数同名的namespace, 相当于扩展了函数的静态属性, 所以在上面的函数中, 可以使用扩展的静态属性</span>
<span class="token comment">// 注意, 使用namespace 扩展函数, NameSpace要写在靠后的位置</span>
<span class="token keyword">namespace</span> test <span class="token punctuation">{</span>
  <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">PREFIX</span> <span class="token operator">=</span> <span class="token string">&#39;prefix&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="接口与class-合并" tabindex="-1"><a class="header-anchor" href="#接口与class-合并" aria-hidden="true">#</a> 接口与class 合并</h5><p>在 TypeScript 中，接口可以用来描述类的形状（shape）。当你定义一个<code> A接口</code>并将其与已经存在的 <code>A类</code> 一起使用时，这个接口并不会重新定义类，而是为这个类增加类型信息。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">{</span> <span class="token comment">// 此时同名的接口为class身上添加了一个id属性</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> string
<span class="token punctuation">}</span>

<span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">&quot;111&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="增强模块-扩展第三方库" tabindex="-1"><a class="header-anchor" href="#增强模块-扩展第三方库" aria-hidden="true">#</a> 增强模块(扩展第三方库)</h5><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 假如有一个第三方库暴露了一个class A</span>
<span class="token comment">// a.ts中</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 在自己的文件中想扩展A</span>
<span class="token comment">// b.ts中</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span><span class="token constant">A</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./a&#39;</span><span class="token punctuation">;</span> 

declare module <span class="token string">&#39;./a&#39;</span> <span class="token punctuation">{</span> <span class="token comment">// 扩展class的实力方法</span>
  <span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">map1</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  namespace <span class="token constant">A</span> <span class="token punctuation">{</span> <span class="token comment">// 扩展class的静态方法</span>
    <span class="token keyword">export</span> <span class="token keyword">let</span> <span class="token function-variable function">map2</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token class-name">A</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">map1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token constant">A</span><span class="token punctuation">.</span><span class="token function-variable function">map2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>增强模块的流程</p><ol><li>被增强的模块需要导出被扩展的东西(可能是class, 函数等等), 但要记住: <strong>默认导出无法增强，只能命名导出的东西能增强</strong>(因为您需要通过导出名称来增强导出</li><li>无法在扩展中声明新的顶级声明 - 只能对现有声明进行修补。</li></ol><p>第二个例子</p><p>这是第三方库axios-cancel扩展了axios的实例方法</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> AxiosStatic <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;axios&quot;</span><span class="token punctuation">;</span>

declare module <span class="token string">&quot;axios&quot;</span> <span class="token punctuation">{</span>
  <span class="token comment">// axios里也有一个AxiosRequestConfig接口, 用于定制请求配置, 此扩展了axios请求配置对象</span>
    <span class="token keyword">interface</span> <span class="token class-name">AxiosRequestConfig</span> <span class="token punctuation">{</span> 
        requestId<span class="token operator">?</span><span class="token operator">:</span> string <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token comment">//   AxiosStatic是axios模块暴露的实例类型, 下面扩展了axios的两个实例方法</span>
    <span class="token keyword">interface</span> <span class="token class-name">AxiosStatic</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">cancel</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">requestId</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
        <span class="token function-variable function">cancelAll</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 下面的代码不重要...</span>
<span class="token keyword">interface</span> <span class="token class-name">AxiosCancelOptions</span> <span class="token punctuation">{</span>
    <span class="token comment">/**
     * Enables logging
     * default: false
     */</span>
    <span class="token literal-property property">debug</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

declare <span class="token keyword">function</span> <span class="token function">axiosCancel</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">axiosStatic</span><span class="token operator">:</span> AxiosStatic<span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> AxiosCancelOptions</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> axiosCancel<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="索引签名" tabindex="-1"><a class="header-anchor" href="#索引签名" aria-hidden="true">#</a> 索引签名</h4><p>索引签名用于描述</p><ol><li>描述对象</li><li>不知道对象的属性名, 知道对象属性的类型(对象的属性只能是string, number, symbol)</li><li>知道对象的属性值的形状</li><li>不知道对象属性的数量</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 该例子描述一个对象, 不知道属性名(key)是什么, 只知道是string类型</span>
<span class="token comment">// 该对象可以有任意个属性, 但每个属性的形状为 {name: string, age: number}</span>
<span class="token keyword">interface</span> <span class="token class-name">IndexType</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    age<span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> person<span class="token operator">:</span> IndexType <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;John&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span> <span class="token number">30</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;Jane&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span> <span class="token number">25</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意: ts中的<code>Record&lt;key,value&gt;</code>是索引签名的类型别名, 是等价的</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 完全等价与索引签名</span>
<span class="token keyword">type</span> <span class="token class-name">IndexType</span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span><span class="token operator">&gt;</span>

<span class="token keyword">const</span> person<span class="token operator">:</span> IndexType <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;John&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span> <span class="token number">30</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;Jane&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span> <span class="token number">25</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="三斜线指令" tabindex="-1"><a class="header-anchor" href="#三斜线指令" aria-hidden="true">#</a> 三斜线指令</h4>`,37),F={href:"https://www.cnblogs.com/kunmomo/p/15272695.html",target:"_blank",rel:"noopener noreferrer"},H=p(`<h4 id="模块导出语法" tabindex="-1"><a class="header-anchor" href="#模块导出语法" aria-hidden="true">#</a> 模块导出语法</h4><p>ts中现在有三种导出语法</p><p>一: ES6的导出语法</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 模块a.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">AA</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token constant">BB</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token constant">BB</span>
<span class="token comment">// 模块b.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span><span class="token constant">AA</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./a&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token constant">BB</span> <span class="token keyword">from</span> <span class="token string">&#39;./a&#39;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二: Commonjs的导出语法</p><blockquote><p>注意要修改tsconfig.json中的&quot;module&quot;: &quot;commonJs&quot;,</p></blockquote><h3 id="九-按照demo划分的有用的知识" tabindex="-1"><a class="header-anchor" href="#九-按照demo划分的有用的知识" aria-hidden="true">#</a> 九: 按照demo划分的有用的知识</h3><h4 id="包装html" tabindex="-1"><a class="header-anchor" href="#包装html" aria-hidden="true">#</a> 包装HTML</h4><p>假如想要基础html的button封装一个Button</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>ComponentPropsWithoutRef<span class="token punctuation">,</span> <span class="token constant">FC</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// ComponentPropsWithoutRef 是一个类型，用于获取组件或者HTML的所有属性，除了 ref 属性</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ButtonProps</span> <span class="token keyword">extends</span> <span class="token class-name">ComponentPropsWithoutRef</span><span class="token operator">&lt;</span><span class="token string">&quot;button&quot;</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  specialPrs<span class="token operator">?</span><span class="token operator">:</span> string <span class="token comment">//等等额外的屬性</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token literal-property property">Button</span><span class="token operator">:</span> <span class="token constant">FC</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ButtonProps</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> = ({specialPrs,...args}) =&gt; </span><span class="token punctuation">{</span>
  <span class="token comment">// 根據specialPrs做額外的邏輯</span>
  <span class="token comment">// 将button原有的属性给他</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>  <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>args<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token punctuation">}</span><span class="token plain-text">

export default Button

</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="动态展示组件-动态根节点" tabindex="-1"><a class="header-anchor" href="#动态展示组件-动态根节点" aria-hidden="true">#</a> 动态展示组件(动态根节点)</h4><p><strong>前置知识</strong></p><p>使用jsx渲染元素时, 即<code>&lt;Component/&gt;</code>, Component可以是以下几种之一</p><ol><li><p>是原生DOM字符串</p></li><li><p>函数组件的函数名, 类组件的组件名</p><p>​</p></li></ol><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token literal-property property">Component</span><span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">我是一个组件</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> ButtonStr <span class="token operator">=</span> <span class="token string">&quot;button&quot;</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>App<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"> </span><span class="token punctuation">{</span><span class="token comment">/*渲染了一个组件*/</span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ButtonStr</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"> </span><span class="token punctuation">{</span><span class="token comment">/*渲染了一个Button*/</span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​</p><p>实现以下效果</p><ol><li>动态根组件可以渲染HTML元素, 或者自定义组件</li><li>动态组件的props由两部分组成 1. 动态组件必须得props(如as属性决定根元素是谁) 2. 动态组件渲染的元素的props(如渲染div,就需要接受div的属性等)</li></ol><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ComponentPropsWithoutRef<span class="token punctuation">,</span> ElementType<span class="token punctuation">,</span> ReactNode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&quot;./styles.css&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 动态组件</span>
<span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">as</span><span class="token operator">:</span> Component<span class="token punctuation">,</span> children<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Component</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">MyButton</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> props<span class="token punctuation">.</span>color <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>App<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>div<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">我是DIV</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MyComponent</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token attr-name">as</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>MyButton<span class="token punctuation">}</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>red<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        我是Button
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MyComponent</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ts实现</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ComponentPropsWithoutRef<span class="token punctuation">,</span> ElementType<span class="token punctuation">,</span> ReactNode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&quot;./styles.css&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// T被约束为只能是html元素字符串或者组件(ElementType&lt;any&gt;代表该类型)</span>
<span class="token comment">// as是T类型</span>
type MyComponentProps<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">ElementType</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>any</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">&gt; = </span><span class="token punctuation">{</span>
  <span class="token keyword">as</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> ReactNode<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token plain-text"> &amp; ComponentPropsWithoutRef</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">T</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">; // ComponentPropsWithoutRef&lt;T&gt;用于提取HTML元素或者组件的props

// 可以看见这是一个函数组件, 但也是一个函数泛型
// 当使用&lt;MyComponent/&gt; 时, 无需显式传递T, 会根据传入as自动推断该组件的props
const MyComponent = &lt;T extends ElementType</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>any</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">&gt;(</span><span class="token punctuation">{</span>
  <span class="token keyword">as</span><span class="token operator">:</span> Component<span class="token punctuation">,</span>
  children<span class="token punctuation">,</span>
  <span class="token operator">...</span>rest
<span class="token punctuation">}</span><span class="token plain-text">: MyComponentProps</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">T</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">) =&gt; </span><span class="token punctuation">{</span>
  <span class="token comment">// 由于ts的bug, 这里必须as any做下处理</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">(</span>rest <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Component</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token plain-text">;

export default function App() </span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">MyButton</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> string<span class="token punctuation">;</span> children<span class="token operator">:</span> ReactNode <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> props<span class="token punctuation">.</span>color <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>App<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span>
        <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>div<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
      <span class="token punctuation">&gt;</span></span><span class="token plain-text">
        我是DIV
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MyComponent</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">

      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token attr-name">as</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>MyButton<span class="token punctuation">}</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>string<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        我是Button
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MyComponent</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token plain-text">

</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="泛型props与泛型组件" tabindex="-1"><a class="header-anchor" href="#泛型props与泛型组件" aria-hidden="true">#</a> 泛型Props与泛型组件</h4><p>泛型Props与泛型组件一般联合使用. 泛型函数中的泛型传给泛型Props, 然后调用组件时候, 再将泛型传给泛型函数(或不传, 进行自动类型推导)</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ReactNode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&quot;./styles.css&quot;</span><span class="token punctuation">;</span>

type ListProps<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">T</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> = </span><span class="token punctuation">{</span>
  <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function-variable function">renderItem</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">item</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token literal-property property">index</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ReactNode<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token plain-text">;


// List的组件知识将items,map了一下, 由于不知道Item的类型, 必须使用泛型
const List = &lt;T,&gt;(</span><span class="token punctuation">{</span> items<span class="token punctuation">,</span> renderItem <span class="token punctuation">}</span><span class="token plain-text">: ListProps</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">T</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">) =&gt; </span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>items<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>renderItem<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token plain-text">;

// -----------------------------------------

type Item = </span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span> age<span class="token operator">:</span> string <span class="token punctuation">}</span><span class="token plain-text">;

const items: Item[] = [
  </span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token string">&quot;18&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token plain-text">,
  </span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token string">&quot;19&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token plain-text">,
  </span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;王五&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token string">&quot;20&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token plain-text">,
];
export default function App() </span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>App<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span> <span class="token comment">/* 这里可以省略&lt;Item&gt;, 省略时候就是自动类型推导 */</span> <span class="token punctuation">}</span><span class="token plain-text">
      &lt;List</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        items=</span><span class="token punctuation">{</span>items<span class="token punctuation">}</span><span class="token plain-text">
        renderItem=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
        <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
      /&gt;
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  );
}

</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="根据组件的props做类型缩小" tabindex="-1"><a class="header-anchor" href="#根据组件的props做类型缩小" aria-hidden="true">#</a> 根据组件的props做类型缩小</h4><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ComponentPropsWithoutRef<span class="token punctuation">,</span> <span class="token constant">JSX</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&quot;./styles.css&quot;</span><span class="token punctuation">;</span>

type AncerProps <span class="token operator">=</span> ComponentPropsWithoutRef<span class="token operator">&lt;</span><span class="token string">&quot;a&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
type ButtonProps <span class="token operator">=</span> ComponentPropsWithoutRef<span class="token operator">&lt;</span><span class="token string">&quot;button&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token comment">// 自定义类型保护</span>
<span class="token keyword">const</span> isAncer <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token operator">:</span> AncerProps <span class="token operator">|</span> ButtonProps<span class="token punctuation">)</span><span class="token operator">:</span> props is <span class="token parameter">AncerProps</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&quot;href&quot;</span> <span class="token keyword">in</span> props<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

type ButtonOverload <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span>props<span class="token operator">:</span> AncerProps<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">JSX</span><span class="token punctuation">.</span>Element<span class="token punctuation">;</span>
  <span class="token punctuation">(</span>props<span class="token operator">:</span> ButtonProps<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">JSX</span><span class="token punctuation">.</span>Element<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token literal-property property">Button</span><span class="token operator">:</span> <span class="token function-variable function">ButtonOverload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 触发类型保护, 如果是ancer的属性赋值给a标签, 如果不是ancer的属性赋值给了A标签就会导致类型不匹配</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isAncer</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>App<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span><span class="token comment">/* 正常的渲染 */</span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>www.baidu.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">百度</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span><span class="token comment">/* 正常的渲染 */</span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">disabled</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">前进</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">

      </span><span class="token punctuation">{</span><span class="token comment">/* TS报错, 因为disabled是button的属性, href是a的属性, 混用会触发类型缩小,类型不匹配 */</span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">disabled</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>www.baidu.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        百度
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例子二</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>
type LinkProps <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>React<span class="token punctuation">.</span><span class="token constant">JSX</span><span class="token punctuation">.</span>IntrinsicElements<span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;href&quot;</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span>
  to<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">RouterLink</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">props</span><span class="token operator">:</span> LinkProps <span class="token operator">|</span> AnchorProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;href&quot;</span> <span class="token keyword">in</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="组件的某些props有依赖关系" tabindex="-1"><a class="header-anchor" href="#组件的某些props有依赖关系" aria-hidden="true">#</a> 组件的某些props有依赖关系</h4><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>

<span class="token comment">//实现一个组件</span>
<span class="token comment">// 1. 可以单独传A属性(也可以不传A)</span>
<span class="token comment">// 2. 可以同时传A,B属性</span>
<span class="token comment">// 3. 不允许只传B属性, 但不传A属性</span>
<span class="token comment">// 4. 除了A,B属性以外, 允许传其他属性</span>

<span class="token keyword">interface</span> <span class="token class-name">CommonProps</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

type Overload <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">/**
   *  该重载实现了以下调用, 可传A, 也可不传A
   *  &lt;Comopnent name=&quot;张三&quot; age={18} A=&quot;A&quot; /&gt;
      &lt;Comopnent name=&quot;张三&quot; age={18} /&gt;
   */</span>
  <span class="token punctuation">(</span>props<span class="token operator">:</span> CommonProps <span class="token operator">&amp;</span> <span class="token punctuation">{</span> <span class="token constant">A</span><span class="token operator">?</span><span class="token operator">:</span> string <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">JSX</span><span class="token punctuation">.</span>Element<span class="token punctuation">;</span>

  <span class="token comment">/**
   *  该重载实现了, A,B 必须同时传
   *  &lt;Comopnent name=&quot;张三&quot; age={18} A=&quot;A&quot; B=&quot;B&quot; /&gt;
      &lt;Comopnent name=&quot;张三&quot; age={18} B=&quot;B&quot; /&gt; Error不允许
   */</span>
  <span class="token punctuation">(</span>props<span class="token operator">:</span> CommonProps <span class="token operator">&amp;</span> <span class="token punctuation">{</span> <span class="token constant">A</span><span class="token operator">:</span> string<span class="token punctuation">;</span> <span class="token constant">B</span><span class="token operator">:</span> string <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">JSX</span><span class="token punctuation">.</span>Element<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 这里必须给props显式的类型, 否则不能解构赋值</span>
<span class="token keyword">const</span> <span class="token literal-property property">Comopnent</span><span class="token operator">:</span> <span class="token function-variable function">Overload</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">props</span><span class="token operator">:</span> CommonProps <span class="token operator">&amp;</span> <span class="token punctuation">{</span> <span class="token constant">A</span><span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">;</span> <span class="token constant">B</span><span class="token operator">?</span><span class="token operator">:</span> string <span class="token punctuation">}</span></span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> <span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span> <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> ...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Comopnent</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>张三<span class="token punctuation">&quot;</span></span> <span class="token attr-name">age</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">18</span><span class="token punctuation">}</span></span> <span class="token attr-name">A</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>A<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Comopnent</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>张三<span class="token punctuation">&quot;</span></span> <span class="token attr-name">age</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">18</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">

      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Comopnent</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>张三<span class="token punctuation">&quot;</span></span> <span class="token attr-name">age</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">18</span><span class="token punctuation">}</span></span> <span class="token attr-name">A</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>A<span class="token punctuation">&quot;</span></span> <span class="token attr-name">B</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>B<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">

      </span><span class="token punctuation">{</span><span class="token comment">/** Error */</span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token punctuation">{</span><span class="token comment">/**&lt;Comopnent name=&quot;张三&quot; age={18} B=&quot;B&quot; /&gt; */</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30);function U(L,N){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("如果在 组定义Hook 中返回一个数组，需要避免类型推断，因为 TypeScript 将推断联合类型。需要使用"),n("a",r,[s("TS 3.4 const 断言"),t(a)]),s("：")]),k,n("p",null,[n("a",d,[s("JSX.Element,ReactElement和ReactNode类型的区别"),t(a)])]),n("ol",null,[n("li",null,[n("p",null,[n("a",v,[m,t(a)]),s("是一个具有"),b,s(" 、 "),g,s("和"),y,s("属性的"),h,s(", 即React中的虚拟DOM")]),x]),n("li",null,[n("p",null,[n("a",f,[w,t(a)]),s("是"),q,s(" , 即一个类型不固定, props不固定的虚拟DOM")]),j]),C]),T,n("p",null,[s("枚举有一些"),n("a",P,[s("记录在案的问题"),t(a)]),s("（TS 团队"),n("a",S,[s("同意"),t(a)]),s("）, 所以不建议使用 。枚举的一个更简单的替代方法是声明字符串文字的联合类型")]),A,n("p",null,[s("除了ComponentProps可以取组件的props类型外, 您还可以使用"),n("a",R,[E,t(a)]),s(" （而不是 ComponentProps）和"),n("a",_,[M,t(a)]),s(" （如果您的组件专门转发引用）取组件类型")]),I,n("p",null,[s("使用"),n("a",B,[D,t(a)]),s(" 可以自动为js生成ts类型, 但有时不太准确, 需要手动修改下. 使用chatGPT也可以完成此功能")]),J,n("p",null,[n("a",F,[s("三斜线指令"),t(a)])]),H])}const X=e(i,[["render",U],["__file","React中的ts.html.vue"]]);export{X as default};

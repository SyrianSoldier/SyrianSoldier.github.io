import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as t,c as l,e,f as o,b as s,d as a}from"./app-df2b7e24.js";const c="/assets/cookie-3aeb75d3.png",h={},d=a('<h1 id="鉴权方案" tabindex="-1"><a class="header-anchor" href="#鉴权方案" aria-hidden="true">#</a> 鉴权方案</h1><h2 id="什么是鉴权" tabindex="-1"><a class="header-anchor" href="#什么是鉴权" aria-hidden="true">#</a> 什么是鉴权</h2><p>鉴权方案，即<strong>认证</strong>和<strong>授权</strong>方案，是指用于验证用户身份并确定其访问权限的一套机制和流程。鉴权方案通常包括以下几个方面：</p><p><strong>身份验证（Authentication）</strong>：</p><ul><li>用户名和密码：最常见的身份验证方式，用户通过输入预设的用户名和密码来验证身份。</li><li>多因素认证（MFA）：通过组合多种验证方式（如密码、手机验证码、指纹识别等）来增加安全性。</li><li>生物识别技术：如指纹、面部识别、虹膜扫描等。</li><li>OAuth/OpenID Connect：通过第三方服务（如微信登录, QQ登录等）进行身份验证。</li></ul><p><strong>授权（Authorization）</strong>：</p><ul><li>角色权限控制（RBAC）：基于用户角色来分配权限，每个角色具有不同的访问权限。</li><li>基于属性的访问控制（ABAC）：根据用户属性和环境属性（如时间、地点）来决定访问权限。</li><li>访问控制列表（ACL）：为每个资源定义允许访问的用户或用户组。</li><li>策略语言（如XACML）：使用策略语言来定义复杂的访问控制规则。</li></ul><h2 id="_1-session鉴权方案" tabindex="-1"><a class="header-anchor" href="#_1-session鉴权方案" aria-hidden="true">#</a> 1. session鉴权方案</h2><p>因为我是前端出身, 曾经被这个概念混淆了很久, 要注意sessionStorage和session的区别, 前者是前端存储方案之一, 后者是鉴权方案的名称,<br> 并不是一个东西.</p><p>session鉴权方案概括有三个步骤</p><ol><li>后端给前端<strong>发</strong>身份证</li><li>前端把身份证<strong>保存</strong>好</li><li>前端每次找后端的时候, 都要<strong>带</strong>上身份证验证身份</li></ol><p>接下来详细解释一下这三个步骤中, 前后端都做了那些动作</p><p><strong>1. 后端给前端</strong>发<strong>身份证</strong></p><p>前端第一次提交登录请求后, 并且服务端成功验证了身份证和密码后, 服务端做了三件事:</p><ol><li>生成身份证(sessionID)</li><li>将身份证存入数据库中记录</li><li>发身份证给前端: 将sessionID存入Cookie中, 让前端携带回去</li></ol><p><strong>2. 前端把身份证保存好</strong><br> 由于Cookie的特性, 一但服务端将身份证塞入Cookie中, 前端就会自动保存好, 后续每次请求都会自动带上身份证.</p><p>所以这一步对前端是无感知的</p><p><strong>3. 前端每次找后端的时候, 都要带身份证验证身份</strong><br> 还是由于Cookie的特性, 前端会携带身份</p><p>而后端在这个阶段会到数据库中查身份证(sessionID), 如果查到了并且没有错误, 就返回前端想要的数据.</p><h3 id="cookie字段" tabindex="-1"><a class="header-anchor" href="#cookie字段" aria-hidden="true">#</a> Cookie字段</h3><img src="'+c+'" alt="cookie" style="zoom:50%;"><p><strong>Domain:</strong></p><ol><li>域,表示这条Cookie可以存到哪个域名下</li><li>存在父域名的Cookie, 子域名也有一份. 反之不行. 如上例中存在.zhihu.com的Cookie, 也可以被zhuanlan.zhihu.<br> com访问到</li></ol><p><strong>Path:</strong></p><ol><li>表示这条Cookie可以存到域名的哪个路径下</li></ol><p><strong>Expires:</strong></p><ol><li>表示这条Cookie的过期时间</li><li>session表示关闭浏览器(标签)此条cookie就消失, 具体的时间表示关闭浏览器后cookie的还能保存多久</li></ol><p><strong>Secure / HttpOnly</strong></p><ol><li>Secure: 表示这条Cookie只能通过https协议传输</li><li>HttpOnly: 表示这条Cookie不能通过js访问, 修改</li></ol><h3 id="session方案中的一些细节" tabindex="-1"><a class="header-anchor" href="#session方案中的一些细节" aria-hidden="true">#</a> session方案中的一些细节</h3><ol><li>session的数据格式是key-value: 即 sessionId-用户信息. 返回前端的是sessionId,<br> 后端在数据库里保存的sessionId-用户信息键值对.</li><li>后端常用redis存储session, 或直接存在服务器内存中(所以访问量过大时, 服务器内存会不够用)</li><li>登录界面中的, &quot;记住我&quot;按钮: 当不勾选&quot;记住我&quot;时候, Cookie中Expires字段被设置为关闭浏览器页面就消失. 当勾选&quot;记住我&quot;时候<br> , Expires字段被设置为30天(或者其他时间)后过期.</li><li>当用户在浏览器中设置&quot;禁用Cookie&quot;时, session方案直接嗝屁.</li></ol><h2 id="_2-token与jwt鉴权方案" tabindex="-1"><a class="header-anchor" href="#_2-token与jwt鉴权方案" aria-hidden="true">#</a> 2. token与JWT鉴权方案</h2><p>token方案和session方案类似, session方案中要为session专门建一个数据库, token方案中服务端不再新建数据库, 只做身份的校验</p><p><strong>流程</strong></p><ol><li>前端访问登录接口, 后端接到&quot;账号, 密码&quot;</li><li>后端验证账号密码, 验证成功后, 生成一个token</li><li>后端将token返回给前端</li></ol><p><strong>细节</strong></p><ol><li>token的生成方式 <ul><li>JSON Web Token (JWT) 是一个开放标准(各语言均有实现), 是一种成熟的 token 字符串生成方案。</li><li>node 上同样有相关的库实现：express-jwt , koa-jwt等</li><li>JWT 由三部分组成：头部（Header）、载荷（Payload）和签名（Signature）。头部和载荷使用 Base64URL 编码，签名使用 HMAC SHA256 算法生成。</li></ul></li><li>token可以以set-cookie的形式返回给前端,存储在Cookie中, 也可以让前端存在localstorage中, 然后<br> 在每次请求时, 在请求头中带上token(Authorization: token)</li><li>session方案和token方案的概念很模糊, 一般&quot;存在Cookie中 + 服务端存储状态&quot;表示session方案, &quot;存在web存储中<br> +服务端不存储状态, 只验证&quot;表示token方案</li></ol><h2 id="refresh-token" tabindex="-1"><a class="header-anchor" href="#refresh-token" aria-hidden="true">#</a> refresh token</h2><p>暂时没总结</p><h2 id="单点登录" tabindex="-1"><a class="header-anchor" href="#单点登录" aria-hidden="true">#</a> 单点登录</h2><p>暂时没总结</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章:</h2>',42),p={href:"https://mp.weixin.qq.com/s?__biz=MzU0OTE4MzYzMw==&mid=2247550739&idx=3&sn=79d9e71427954417c0c040bfb86db38e&chksm=fbb18eedccc607fb8854b707e3d3d36841810d08573d96ccdc19ae2761c6e8ca645771eb2a23&scene=27",target:"_blank",rel:"noopener noreferrer"},k={href:"https://zhuanlan.zhihu.com/p/677982758",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.bilibili.com/video/BV19S4y1N74v/?spm_id_from=333.337.search-card.all.click&vd_source=f0597bff9d28f459976cfa5b23ec3128",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.bilibili.com/video/BV1b14y1J7Yv/?spm_id_from=333.337.search-card.all.click&vd_source=f0597bff9d28f459976cfa5b23ec3128",target:"_blank",rel:"noopener noreferrer"};function f(b,g){const i=r("ExternalLinkIcon");return t(),l("div",null,[d,e("p",null,[o("1."),e("a",p,[o("前后端鉴权方案，一文打尽！"),s(i)])]),e("p",null,[o("2."),e("a",k,[o("一文读懂前端鉴权：cookie、session、token、jwt、单点登录"),s(i)])]),e("p",null,[o("3."),e("a",u,[o("Cookie：属性设置：domain & path & expire"),s(i)])]),e("p",null,[o("4."),e("a",_,[o("cookie、session、token 发展史与请求响应鉴权"),s(i)])])])}const x=n(h,[["render",f],["__file","鉴权方案.html.vue"]]);export{x as default};

import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as p,c as l,e as n,f as s,b as c,d as a}from"./app-e615decd.js";const i={},r=a('<h1 id="python" tabindex="-1"><a class="header-anchor" href="#python" aria-hidden="true">#</a> Python</h1><h2 id="一-前置知识" tabindex="-1"><a class="header-anchor" href="#一-前置知识" aria-hidden="true">#</a> 一: 前置知识</h2><h3 id="_1-1-下载" tabindex="-1"><a class="header-anchor" href="#_1-1-下载" aria-hidden="true">#</a> 1.1 下载</h3>',3),d={href:"http://xn--www-rw7eh25on0oozq.python.org",target:"_blank",rel:"noopener noreferrer"},u=a(`<p>下载最新的Release版</p><h3 id="_1-2-解释器" tabindex="-1"><a class="header-anchor" href="#_1-2-解释器" aria-hidden="true">#</a> 1.2 解释器</h3><p>python是一门解释型语言, 而非编译型语言. 所以需要存在解释器对语法进行解析.</p><p>其中<code>CPython</code>是自带的解释器, 使用C语言编写, 另外还有<code>IPython, PyPy</code>等</p><h2 id="二-第一个python程序" tabindex="-1"><a class="header-anchor" href="#二-第一个python程序" aria-hidden="true">#</a> 二: 第一个python程序</h2><h3 id="_2-1-hello-world" tabindex="-1"><a class="header-anchor" href="#_2-1-hello-world" aria-hidden="true">#</a> 2.1 hello, world</h3><p><strong>编辑器运行</strong></p><ol><li><p><strong>新建</strong>: 使用VS_Code新建文件hello.py</p></li><li><p><strong>编辑</strong>: 编辑代码<code>print(&quot;hello,world&quot;)</code>, 并保存</p></li><li><p><strong>命令行</strong>: 在当前目录打开命令行, 输入<code>python hello.py</code></p></li></ol><p><strong>解释器运行</strong></p><ol><li><p><strong>命令行</strong>: 通过<code>cmd</code>打开命令行</p></li><li><p><strong>进入交互</strong>: 输入<code>python</code>进入交互式程序</p></li><li><p><strong>编辑代码</strong>:编辑代码 <code>print(&quot;hello,world&quot;)</code>, 完成后敲回车, 查看结果</p></li><li><p><strong>退出</strong>: 输入<code>exit() 或者 Ctrl + z</code> 退出交互式程序</p></li></ol><h3 id="_2-2-输入与输出" tabindex="-1"><a class="header-anchor" href="#_2-2-输入与输出" aria-hidden="true">#</a> 2.2 输入与输出</h3><p><code>input: (string prompt) =&gt; {}</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Enter your name, please! &quot;</span><span class="token punctuation">)</span> <span class="token comment"># 输入CanSu</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Your name is&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token comment"># 输出 Your name is Sucan</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三-python基础" tabindex="-1"><a class="header-anchor" href="#三-python基础" aria-hidden="true">#</a> 三: Python基础</h2><h3 id="_3-1-数据类型" tabindex="-1"><a class="header-anchor" href="#_3-1-数据类型" aria-hidden="true">#</a> 3.1 数据类型</h3>`,15),k=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"数据类型"),n("th",null,"特点")])]),n("tbody",null,[n("tr",null,[n("td",null,"整数型"),n("td",null,[s("1) "),n("strong",null,"16进制"),s(": 十六进制用"),n("code",null,"0x"),s("前缀和0-9，a-f表示，例如："),n("code",null,"0xff00"),s("，"),n("code",null,"0xa5b4c3d2"),n("br"),s(" 2) "),n("strong",null,"分隔符"),s(": Python允许在数字中间以"),n("code",null,"_"),s("分隔，"),n("code",null,"10_000_000_000"),s("和"),n("code",null,"10000000000"),s("是完全一样的。十六进制数也可以写成"),n("code",null,"0xa1b2_c3d4"),s("。")])]),n("tr",null,[n("td",null,"浮点数"),n("td",null,[s("1) "),n("strong",null,"科学计数法"),s(": "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mtext",null,"把"),n("mn",null,"10"),n("mtext",null,"用"),n("mi",null,"e"),n("mtext",null,"替代，"),n("mn",null,"1.23"),n("mo",null,"∗"),n("mn",null,"1"),n("msup",null,[n("mn",null,"0"),n("mn",null,"9")]),n("mtext",null,"就是"),n("mn",null,"1.23"),n("mi",null,"e"),n("mn",null,"9"),n("mtext",null,"，或者"),n("mn",null,"12.3"),n("mi",null,"e"),n("mn",null,"8"),n("mtext",null,"，"),n("mn",null,"0.000012"),n("mtext",null,"可以写成"),n("mn",null,"1.2"),n("mi",null,"e"),n("mo",null,"−"),n("mn",null,"5")]),n("annotation",{encoding:"application/x-tex"},"把10用e替代，1.23 * 10^9就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord cjk_fallback"},"把"),n("span",{class:"mord"},"10"),n("span",{class:"mord cjk_fallback"},"用"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord cjk_fallback"},"替代，"),n("span",{class:"mord"},"1.23"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"∗"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mord"},[n("span",{class:"mord"},"0"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"9")])])])])])])]),n("span",{class:"mord cjk_fallback"},"就是"),n("span",{class:"mord"},"1.23"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord"},"9"),n("span",{class:"mord cjk_fallback"},"，或者"),n("span",{class:"mord"},"12.3"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord"},"8"),n("span",{class:"mord cjk_fallback"},"，"),n("span",{class:"mord"},"0.000012"),n("span",{class:"mord cjk_fallback"},"可以写成"),n("span",{class:"mord"},"1.2"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"5")])])])])]),n("tr",null,[n("td",null,"字符串"),n("td",null,[s("1) "),n("strong",null,"单双引号"),s(": 不区分单双引号"),n("br"),s("2) "),n("strong",null,"三引号"),s(": Python将三对引号解释为可换行的文本"),n("br"),s("3) "),n("strong",null,"元字符"),s(": Python将"),n("code",null,'r""'),s(" 解释为元字符串, 元字符串即纯文本, 内部没有任何转义字符.")])]),n("tr",null,[n("td",null,"布尔型"),n("td",null,[s("1) "),n("strong",null,"True和False:"),s(" 含有True 和 False两个关键词"),n("br"),s(" 2) "),n("strong",null,"and, not与or"),s(": and 等同于 &&, not 等同于 ! , or 等同于 ||")])])])],-1),m=a(`<h3 id="_3-2-字符串编码" tabindex="-1"><a class="header-anchor" href="#_3-2-字符串编码" aria-hidden="true">#</a> 3.2 字符串编码</h3><p><strong>数字信号</strong> :因为计算机只能保存,传输数字信号，如果要处理文本，就必须先把文本转换为数字才能处理。</p><p><strong>字符编码的种类</strong></p><ol><li><p><strong><code>ASCII</code>编码</strong>: <code>ASCII</code>编码有127个字符，包括大小写英文字母、数字和一些符号. 如 大写字母<code>A</code>的编码是<code>65</code>，小写字母<code>z</code>的编码是<code>122</code>。</p></li><li><p><strong><code>GB2312</code>编码:</strong> 一个字节无法处理中文，至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了<code>GB2312</code>编码，用来把中文编进去。</p></li><li><p><strong>其他编码</strong>: 日本把日文编到<code>Shift_JIS</code>里，韩国把韩文编到<code>Euc-kr</code>里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。</p></li></ol><p>4)<strong>Unicode字符集</strong>: Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了.Unicode标准也在不断发展，但最常用的是UCS-16编码，<strong>用两个字节表示一个字符</strong>（如果要用到<strong>非常偏僻的字符</strong>，<strong>就需要4个字节</strong>）</p><p><strong>UTF-8</strong></p><p><strong>存储空间:</strong> 由于<code>ASCII</code>使用1字节存储, <code>Unicode</code>使用2字节存储. 如果文本全部是英文，用<code>Unicode</code>编码比<code>ASCII</code>编码需要多一倍的存储空间，在存储和传输上就十分不划算。</p><p><strong>再编码:</strong> <code>UTF-8</code>是对<code>Unicode</code>的再编码.</p><ol><li><strong>英文被编成1个字节</strong></li><li><strong>中文一般编成3个字节</strong></li><li>很生僻的词被编成4-6个字节</li></ol><p>使用UTF-8在万国码的基础上, 既保证了不同国家之间不乱码, 又提高了存储和传输的效率.</p><p><strong>字符编码工作方式</strong></p><p><strong>内存中:</strong> 在计算机内存中，统一使用Unicode编码，</p><p><strong>硬盘或传输中</strong>: 当需要保存到硬盘或者需要传输的时候，转换为UTF-8编码, 因为更节省空间。</p><h3 id="_3-3-字节字符串" tabindex="-1"><a class="header-anchor" href="#_3-3-字节字符串" aria-hidden="true">#</a> 3.3 字节字符串</h3><ol><li><p><strong>字符串的操作</strong>: 字符串的操作是<mark>逐字符</mark>的, 英文字符是一个字节存储, 中文一般是三字节存储, 偏僻字可能需要4-6字节存储</p></li><li><p><strong>字节字符串的操作</strong>: 字节字符串是<mark>逐字节</mark>操作的, 英文字符串和对应的字节字符串长度相等. 中文字节字符串一般等于3倍字符串长度.</p></li></ol><p><strong>字符串和字节字符串的转换</strong></p><p>python中<code>\\x</code> 后面跟着两个十六进制数字表示一个字节的值。如<code>\\xe6</code> 表示十六进制数 <code>0xe6</code></p><table><thead><tr><th>API</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td><code>str.encode(charset: string)</code></td><td>将<mark>字符串</mark>以指定编码<mark>转为字节字符串</mark>.<br>1) 若指定为ASCII编码, 则1字符占1字节<br>2) 若指定为<code>utf-8</code>, 则英文占1字节, 中文一般占3字节</td><td><code>&#39;中文&#39;.encode(&#39;utf-8&#39;)</code><br> # output: b&#39;\\xe4\\xb8\\xad\\xe6\\x96\\x87&#39; 共6字节</td></tr><tr><td><code>bytes.decode(charset: string)</code></td><td>将<mark>字节字符串</mark>以指定编码<mark>转为字符串</mark>.</td><td>b&#39;\\xe4\\xb8\\xad\\xe6\\x96\\x87&#39;.decode(&#39;utf-8&#39;)<br> #output: &#39;中文&#39;</td></tr></tbody></table><h3 id="_3-4-字符串的格式化" tabindex="-1"><a class="header-anchor" href="#_3-4-字符串的格式化" aria-hidden="true">#</a> 3.4 字符串的格式化</h3><p><strong>%字符串</strong></p><blockquote><p><strong>语法示例</strong>: <code> &#39;您的名字是%s&#39; % name</code>, 或者 <code>&#39;您的名字是%s, 年龄是$d&#39; % (name, age)</code></p></blockquote><table><thead><tr><th>占位符</th><th>替换内容</th></tr></thead><tbody><tr><td>%d</td><td>整数</td></tr><tr><td>%f</td><td>浮点数</td></tr><tr><td>%s</td><td>字符串</td></tr><tr><td>%x</td><td>十六进制整数</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入您的名字&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
请输入您的名字<span class="token punctuation">:</span> 张三
  
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> age <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入您的年龄: &#39;</span><span class="token punctuation">)</span>
请输入您的年龄<span class="token punctuation">:</span> <span class="token number">18</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;您的名字是%s, 年龄是$s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token string">&#39;您的名字是张三, 年龄是18&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>format()</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;我的名字是{0}, 今年{1}岁&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&#39;苏灿&#39;</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span>
<span class="token string">&#39;我的名字是苏灿, 今年22岁&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>f-string</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">&#39;苏灿&#39;</span><span class="token punctuation">;</span> age <span class="token operator">=</span> <span class="token number">18</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f&#39;我的名字是</span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">, 年龄是</span><span class="token interpolation"><span class="token punctuation">{</span>age<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span>
<span class="token string">&#39;我的名字是苏灿, 年龄是18&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>格式控制符</strong></p><p><strong>语法:</strong> <code>{:[标志][最小宽度][.精度][类型]}</code>, 所有参数都是可选的</p><ol><li><p><strong>标志</strong>:</p><ul><li><code>+</code>：显示正负号（对数字有效）。</li><li><code>-</code>：左对齐。</li><li><code>0</code>：用零填充（通常与最小宽度一起使用，对数字有效）。</li></ul></li><li><p><strong>最小宽度</strong></p><ul><li>最小宽度指定了数据应该至少占用多少字符的宽度。如果数据的宽度不足最小宽度，可以使用填充字符（通常是空格或零）来填充空白部分。</li></ul></li><li><p><strong>精度</strong></p><ul><li>精度用于控制小数部分的显示位数（对浮点数有效）</li></ul></li><li><p><strong>类型</strong></p><ul><li><code>d</code>：整数。</li><li><code>f</code>：浮点数。</li><li><code>s</code>：字符串。</li><li><code>x</code>：十六进制（通常与整数一起使用)</li></ul><p>​</p></li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">&#39;蒙牛鲜奶一盒{:.2f}元&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">5.231</span><span class="token punctuation">)</span> <span class="token comment">#保留两位小数</span>
<span class="token string">&#39;蒙牛鲜奶一盒5.23元&#39;</span>

<span class="token string">&#39;现在{:02d}点{:02d}分{:02d}秒&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>
<span class="token string">&#39;现在23点02分07秒&#39;</span>

r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">85</span><span class="token operator">-</span><span class="token number">72</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">72</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;%+2.1f%%&#39;</span> <span class="token operator">%</span> r<span class="token punctuation">)</span> <span class="token comment"># +18.1%</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-5-字符串api" tabindex="-1"><a class="header-anchor" href="#_3-5-字符串api" aria-hidden="true">#</a> 3.5 字符串<code>api</code></h3><table><thead><tr><th>API</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td><code>ord: (str: string) =&gt; number</code></td><td>获取字符串的数字编码</td><td><code>ord(&#39;A&#39;)</code> # output: 65</td></tr><tr><td><code>chr: (num: number) =&gt; string</code></td><td>获取数字编码对应的字符</td><td><code>chr(97)</code> # output: &#39;a&#39;</td></tr><tr><td>\`\`len: (str: bytes</td><td></td><td>string) =&gt; number\`\`</td></tr></tbody></table><h3 id="_3-6-list" tabindex="-1"><a class="header-anchor" href="#_3-6-list" aria-hidden="true">#</a> 3.6 list</h3><p>list与JavaScript中的数组基本是一致的</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># list的声明</span>
hobby <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;吃饭&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;睡觉&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;打豆豆&quot;</span><span class="token punctuation">]</span>

<span class="token comment"># 获取list的长度</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>hobby<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 使用索引访问list, 获取倒数i个元素</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>hobby<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> hobby<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># python中的索引具备JavaScript的at方法的特性</span>

<span class="token comment"># 索引越界</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>hobby<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># IndexError: list index out of range</span>

<span class="token comment"># 追加, 插入, 删除末尾元素, 删除指定位置元素</span>
hobby<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot;烫头&quot;</span><span class="token punctuation">)</span>
hobby<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;--插入--&quot;</span><span class="token punctuation">)</span>
hobby<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
hobby<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 删除第一个元素</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-7-tuple" tabindex="-1"><a class="header-anchor" href="#_3-7-tuple" aria-hidden="true">#</a> 3.7 tuple</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># tuple的声明</span>
arr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;吃饭&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;睡觉&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;打豆豆&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># tuple不能修改进行增, 删, 改操作. 只能进行查</span>
<span class="token comment"># arr[-1] = &quot;烫头&quot;  # TypeError: &#39;tuple&#39; object does not support item assignment</span>

<span class="token comment"># 空turple的定义与单个元素的tuple的定义</span>
arr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
arr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span>  <span class="token comment"># 定义单元素tuple时候要在其后添加逗号, 消除小括号带来的二义性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-8-条件语句" tabindex="-1"><a class="header-anchor" href="#_3-8-条件语句" aria-hidden="true">#</a> 3.8 条件语句</h3><p>与其他编程语言不同的是</p><ol><li><code>if</code>后没有( )</li></ol><p>2)<code> else if</code> 更名为 <code>elif</code></p><p>3)<code>if, elif, else </code>后需要加<code>:</code></p><ol start="4"><li>用一个缩进代表换行</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>flag <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;if&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> flag <span class="token operator">==</span> <span class="token number">20</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;elif 1&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> flag <span class="token operator">==</span> <span class="token number">20</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;elif 2&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;else&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不可以进行字符串与整型的比较, 不像JavaScript一样会进行隐式转换</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 输入1000, input输入的都是字符串</span>
<span class="token comment"># a = int(a) # 可以将a进行转换, 将str --&gt; int			</span>
<span class="token keyword">if</span> a <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">:</span>  <span class="token comment"># TypeError: &#39;&gt;&#39; not supported between instances of &#39;str&#39; and &#39;int&#39;</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;OK~&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-9-循环" tabindex="-1"><a class="header-anchor" href="#_3-9-循环" aria-hidden="true">#</a> 3.9 循环</h3><p><code>for循环</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> age <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>

<span class="token comment"># 下面的代码等价于上面的代码</span>
<span class="token comment"># range(len), 生成 0 到 len - 1的整数序列</span>
<span class="token keyword">for</span> age <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>while循环</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">while</span> aa <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;a等于10&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,52);function h(g,b){const t=o("ExternalLinkIcon");return p(),l("div",null,[r,n("p",null,[n("a",d,[s("翻墙访问www.python.org"),c(t)])]),u,k,m])}const f=e(i,[["render",h],["__file","python.html.vue"]]);export{f as default};

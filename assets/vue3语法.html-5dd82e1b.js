import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as e}from"./app-a87d2e20.js";const t={},l=e(`<h1 id="一-setup-函数" tabindex="-1"><a class="header-anchor" href="#一-setup-函数" aria-hidden="true">#</a> 一: setUp 函数</h1><ol><li>setUp 优势 <ul><li>setUp 组织代码的方式称为 composionAPI</li><li>composionAPI 比 optionsAPI 易于维护</li></ul></li><li>setUp 函数 <ul><li>执行时机在 beforeCreate 之上</li></ul></li><li>setUp 中的 this <ul><li>没有 this</li></ul></li><li>setUp 中的返回值 <ul><li>必须返回一个对象</li><li>对象中的属性可以直接在模板中使用(消费)</li></ul></li></ol><h1 id="二-响应式数据" tabindex="-1"><a class="header-anchor" href="#二-响应式数据" aria-hidden="true">#</a> 二: 响应式数据</h1><ol><li>reactive <ul><li>reactive 只能定义响应式的 复杂数据类型, 定义响应式基本数据类型不生效</li></ul></li><li>ref <ul><li>在 setUp 函数中需要通过 .value 获取, 在模板中直接使用/消费</li><li>既可以定义复杂数据类型,也可以定义基本数据类型</li></ul></li><li>使用 reactive or ref ? <ul><li>vue@3.2.0 版本后(^vue@3.2.0), ref 比 reactive 效率高的多</li></ul></li></ol><h1 id="三-script-setup" tabindex="-1"><a class="header-anchor" href="#三-script-setup" aria-hidden="true">#</a> 三: script-setup</h1><ol><li>什么是 script-setup <ul><li><code>&lt;script setup&gt;&lt;/script&gt;</code></li></ul></li><li>script-setup 的特点 <ul><li>script-setup 标签内, 在全局作用域下, 所有变量/函数, 均可在模板中直接消费, 不用 return 对象</li><li>script-setup 标签内的函数作用域内的变量, 不能在模板中直接消费</li></ul></li></ol><h1 id="四-计算属性-computed" tabindex="-1"><a class="header-anchor" href="#四-计算属性-computed" aria-hidden="true">#</a> 四: 计算属性-computed</h1><p>语法</p><ol><li><p>引入 computed</p><ul><li><code>import {computed} from &#39;vue&#39;</code></li></ul></li><li><p>函数式 conputed</p><ul><li><code>const 计算属性名 = computed(计算函数)</code></li><li>计算函数返回值, 作为计算属性的值</li></ul></li><li><p>对象式 conputed</p><ul><li><code> const 计算属性名 = computed(计算属性配置项)</code></li><li>计算属性配置项 <ul><li>计算属性配置项可配置 set/get 函数</li><li>set 函数接受一个参数, value, value 是修改计算属性时的修改值</li></ul></li></ul></li></ol><h1 id="五-监视属性-watch" tabindex="-1"><a class="header-anchor" href="#五-监视属性-watch" aria-hidden="true">#</a> 五: 监视属性 - watch</h1><p>语法</p><ol><li><p>基本语法</p><ul><li>watch(监视的数据, 数据变化后的处理函数, 配置项)</li></ul></li><li><p>监视 ref 定义的数据的特别之处</p><ul><li><p>监视的是 ref 数据的 value 属性 <code>watch(ref(0).value,()=&gt;{})</code></p></li><li><p>监视 ref 定义的复杂数据类型的两种写法</p><ul><li><p>监视 ref 对象本身, 并开启 deep:true</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">watch</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//不同处</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​</p></li><li><p>监视 ref 对象的 value</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">watch</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//不同处</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li><li><p>监视响应式对象的某个属性值</p><ul><li><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 只监视name的变化,age变化不会触发处理函数</span>

<span class="token function">watch</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> person<span class="token punctuation">.</span>value<span class="token punctuation">.</span>age<span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>​</p></li></ul></li></ol><h1 id="六-生命周期钩子" tabindex="-1"><a class="header-anchor" href="#六-生命周期钩子" aria-hidden="true">#</a> 六: 生命周期钩子</h1><p>vue3 生命周期钩子与 vue2 的变换</p><ol><li>取消 beforeCreate 和 created 替换为 setUp 函数</li><li>update 系列和 mount 系列前加 on <ul><li>beforeUpdate --&gt; OnBeforeUpdate</li><li>其他的以此类推</li></ul></li><li>detroyed 更名为 unMount. 并在前加 on <ul><li>beforeDetroyed ---&gt; onBeforeUnMounted</li></ul></li></ol><h1 id="七-组件传值" tabindex="-1"><a class="header-anchor" href="#七-组件传值" aria-hidden="true">#</a> 七: 组件传值</h1><h2 id="父传子" tabindex="-1"><a class="header-anchor" href="#父传子" aria-hidden="true">#</a> 父传子</h2><ol><li><p>定义子组件</p></li><li><p>在父组件引入子组件</p><ul><li>不需要使用 components 注册便可直接在模板中消费</li></ul></li><li><p>在父组件内, 通过 v-bind 给子组件绑定数据</p></li><li><p>子组件通过 defineProps 接受</p><ul><li><p>defineProps 不需要引入</p></li><li><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// defineProps 返回一个props对象</span>
<span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
    <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 在模板中直接使用, 在setup函数中需要props. 使用</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>​</p></li></ul></li></ol><h2 id="子传父" tabindex="-1"><a class="header-anchor" href="#子传父" aria-hidden="true">#</a> 子传父</h2><ol><li>在父子组件同时约定暗号(自定义事件) <ul><li>父组件通过 @事件名约定暗号</li><li>子组件通过 defineEmits([事件名])约定暗号</li></ul></li><li>defineEmits 返回 emit 函数, 通过 emit 函数触发自定义事件 <ul><li><code>emit(事件名, 参数)</code></li></ul></li></ol><h1 id="八-依赖注入-provide-inject" tabindex="-1"><a class="header-anchor" href="#八-依赖注入-provide-inject" aria-hidden="true">#</a> 八: 依赖注入 provide/inject</h1><ol><li>provide 和 inject 是什么 <ul><li>当前组件提供方法/函数, 其子孙组件都可以获取/消费</li></ul></li><li>provide/inject 语法 <ul><li>provide(数据名, 数据)</li><li>conat 数据 = inject(数据名)</li></ul></li></ol><h1 id="九-ref-绑定-dom-与组件" tabindex="-1"><a class="header-anchor" href="#九-ref-绑定-dom-与组件" aria-hidden="true">#</a> 九: ref 绑定 dom 与组件</h1><ol><li>绑定 ref <ol><li>在 setup 中定义 ref 容器 <code>const anyRef = ref(null)</code></li><li>在模板中绑定 ref &lt;标签 ref=&quot;anyRef&quot;&gt;&lt;/标签&gt;</li></ol></li><li>ref 获取组件实例的方法/属性 <ol><li>在父组件内完成绑定 ref</li><li>在子组件内通过 defineExpost({}) 暴露数据</li><li>在父组件内通过 ref.数据/方法 消费</li></ol></li></ol><h1 id="十-torefs" tabindex="-1"><a class="header-anchor" href="#十-torefs" aria-hidden="true">#</a> 十: toRefs</h1><ol><li>toRefs 是干什么的 <ul><li>解决本来响应式数据, 结构赋值后数据不响应的问题</li></ul></li><li>怎么用 <ul><li>const { 解构属性 } = refs(复杂数据类型响应式对象)</li></ul></li></ol>`,26),p=[l];function i(o,c){return s(),a("div",null,p)}const d=n(t,[["render",i],["__file","vue3语法.html.vue"]]);export{d as default};

import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c,e as n,f as s,b as t,d as e}from"./app-86b6ebdd.js";const i={},u=e('<h1 id="python语法基础" tabindex="-1"><a class="header-anchor" href="#python语法基础" aria-hidden="true">#</a> Python语法基础</h1><h2 id="一-前置知识" tabindex="-1"><a class="header-anchor" href="#一-前置知识" aria-hidden="true">#</a> 一: 前置知识</h2><h3 id="_1-1-下载" tabindex="-1"><a class="header-anchor" href="#_1-1-下载" aria-hidden="true">#</a> 1.1 下载</h3>',3),r={href:"http://xn--www-rw7eh25on0oozq.python.org",target:"_blank",rel:"noopener noreferrer"},d=e(`<p>下载最新的Release版</p><h3 id="_1-2-解释器" tabindex="-1"><a class="header-anchor" href="#_1-2-解释器" aria-hidden="true">#</a> 1.2 解释器</h3><p>python是一门解释型语言, 而非编译型语言. 所以需要存在解释器对语法进行解析.</p><p>其中<code>CPython</code>是自带的解释器, 使用C语言编写, 另外还有<code>IPython, PyPy</code>等</p><h2 id="二-第一个python程序" tabindex="-1"><a class="header-anchor" href="#二-第一个python程序" aria-hidden="true">#</a> 二: 第一个python程序</h2><h3 id="_2-1-hello-world" tabindex="-1"><a class="header-anchor" href="#_2-1-hello-world" aria-hidden="true">#</a> 2.1 hello, world</h3><p><strong>编辑器运行</strong></p><ol><li><p><strong>新建</strong>: 使用VS_Code新建文件hello.py</p></li><li><p><strong>编辑</strong>: 编辑代码<code>print(&quot;hello,world&quot;)</code>, 并保存</p></li><li><p><strong>命令行</strong>: 在当前目录打开命令行, 输入<code>python hello.py</code></p></li></ol><p><strong>解释器运行</strong></p><ol><li><p><strong>命令行</strong>: 通过<code>cmd</code>打开命令行</p></li><li><p><strong>进入交互</strong>: 输入<code>python</code>或<code>ipython</code>进入交互式程序</p></li><li><p><strong>编辑代码</strong>:编辑代码 <code>print(&quot;hello,world&quot;)</code>, 完成后敲回车, 查看结果</p></li><li><p><strong>退出</strong>: 输入<code>exit() 或者 Ctrl + z</code> 退出交互式程序</p></li></ol><h3 id="_2-2-输入与输出" tabindex="-1"><a class="header-anchor" href="#_2-2-输入与输出" aria-hidden="true">#</a> 2.2 输入与输出</h3><p><code>input: (string prompt) =&gt; {}</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Enter your name, please! &quot;</span><span class="token punctuation">)</span> <span class="token comment"># 输入CanSu</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Your name is&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token comment"># 输出 Your name is Sucan</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三-python基础" tabindex="-1"><a class="header-anchor" href="#三-python基础" aria-hidden="true">#</a> 三: Python基础</h2><h3 id="_3-1-数据类型" tabindex="-1"><a class="header-anchor" href="#_3-1-数据类型" aria-hidden="true">#</a> 3.1 数据类型</h3>`,15),k=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"数据类型"),n("th",null,"特点")])]),n("tbody",null,[n("tr",null,[n("td",null,"整数型-int"),n("td",null,[s("1) "),n("strong",null,"16进制"),s(": 十六进制用"),n("code",null,"0x"),s("前缀和0-9，a-f表示，例如："),n("code",null,"0xff00"),s("，"),n("code",null,"0xa5b4c3d2"),s("<br "),n("br"),s("/> 2) "),n("strong",null,"分隔符"),s(": Python允许在数字中间以"),n("code",null,"_"),s("分隔，"),n("code",null,"10_000_000_000"),s("和"),n("code",null,"10000000000"),s("是完全一样的。十六进制数也可以写成"),n("code",null,"0xa1b2_c3d4"),s("。")])]),n("tr",null,[n("td",null,"浮点数-float"),n("td",null,[s("1) "),n("strong",null,"科学计数法"),s(": "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mtext",null,"把"),n("mn",null,"10"),n("mtext",null,"用"),n("mi",null,"e"),n("mtext",null,"替代，"),n("mn",null,"1.23"),n("mo",null,"∗"),n("mn",null,"1"),n("msup",null,[n("mn",null,"0"),n("mn",null,"9")]),n("mtext",null,"就是"),n("mn",null,"1.23"),n("mi",null,"e"),n("mn",null,"9"),n("mtext",null,"，或者"),n("mn",null,"12.3"),n("mi",null,"e"),n("mn",null,"8"),n("mtext",null,"，"),n("mn",null,"0."),n("mo",null,"<"),n("mi",null,"b"),n("mi",null,"r"),n("mi",{mathvariant:"normal"},"/"),n("mo",null,">"),n("mn",null,"000012"),n("mtext",null,"可以写成"),n("mn",null,"1.2"),n("mi",null,"e"),n("mo",null,"−"),n("mn",null,"5")]),n("annotation",{encoding:"application/x-tex"},"把10用e替代，1.23 * 10^9就是1.23e9，或者12.3e8，0.<br/>000012可以写成1.2e-5")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord cjk_fallback"},"把"),n("span",{class:"mord"},"10"),n("span",{class:"mord cjk_fallback"},"用"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord cjk_fallback"},"替代，"),n("span",{class:"mord"},"1.23"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"∗"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8532em","vertical-align":"-0.0391em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mord"},[n("span",{class:"mord"},"0"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"9")])])])])])])]),n("span",{class:"mord cjk_fallback"},"就是"),n("span",{class:"mord"},"1.23"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord"},"9"),n("span",{class:"mord cjk_fallback"},"，或者"),n("span",{class:"mord"},"12.3"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord"},"8"),n("span",{class:"mord cjk_fallback"},"，"),n("span",{class:"mord"},"0."),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"<"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"b"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),n("span",{class:"mord"},"/"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},">"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},"000012"),n("span",{class:"mord cjk_fallback"},"可以写成"),n("span",{class:"mord"},"1.2"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"5")])])])])]),n("tr",null,[n("td",null,"字符串-string"),n("td",null,[s("1) "),n("strong",null,"单双引号"),s(": 不区分单双引号"),n("br"),s("2) "),n("strong",null,"三引号"),s(": Python将三对引号解释为可换行的文本"),n("br"),s("3) "),n("strong",null,"元字符"),s(": Python将"),n("code",null,'r""'),s(" 解释为元字符串, 元字符串即纯文本, 内部没有任何转义字符.")])]),n("tr",null,[n("td",null,"布尔型-boolean"),n("td",null,[s("1) "),n("strong",null,[s("True和False:"),n("br")]),s(" 含有True 和 False两个关键词"),n("br"),s(" 2) "),n("strong",null,"and, not与or"),s(": and 等同于 &&, not 等同于 ! , or 等同于 \\")])]),n("tr",null,[n("td",null,"列表型-list"),n("td",null,[s("即js中的数组 "),n("br")])]),n("tr",null,[n("td",null,"字典-map"),n("td",null,[s("即js中的对象.python中的key一定要写引号,否则会识别为变量 "),n("br"),s(),n("br")])])])],-1),m=e(`<p>查看数据类型</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token string">&quot;你好&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>数据类型转换</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#123将字符串转换成为整数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">123.78</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#123将浮点数转换成为整数, !!将小数掉后面全舍去(向下取整)!!</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#1布尔值True转换成为整数是1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#0布尔值False转换成为整数是0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">1111</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#python也遵循真假值转换的规则, 真值转为True, 假值转为False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-字符串编码" tabindex="-1"><a class="header-anchor" href="#_3-2-字符串编码" aria-hidden="true">#</a> 3.2 字符串编码</h3><p><strong>数字信号</strong> :因为计算机只能保存,传输数字信号，如果要处理文本，就必须先把文本转换为数字才能处理。</p><p><strong>字符编码的种类</strong></p><ol><li><p><strong><code>ASCII</code>编码</strong>: <code>ASCII</code>编码有127个字符，包括大小写英文字母、数字和一些符号. 如 大写字母<code>A</code>的编码是<code>65</code>，小写字母<code>z</code>的编码是<code>122</code>。</p></li><li><p><strong><code>GB2312</code>编码:</strong> 一个字节无法处理中文，至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了<code>GB2312</code>编码，用来把中文编进去。</p></li><li><p><strong>其他编码</strong>: 日本把日文编到<code>Shift_JIS</code>里，韩国把韩文编到<code>Euc-kr</code>里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。</p></li></ol><p>4)<strong>Unicode字符集</strong>: Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了.Unicode标准也在不断发展，但最常用的是UCS-16编码，<strong>用两个字节表示一个字符</strong>（如果要用到<strong>非常偏僻的字符</strong>，<strong>就需要4个字节</strong>）</p><p><strong>UTF-8</strong></p><p><strong>存储空间:</strong> 由于<code>ASCII</code>使用1字节存储, <code>Unicode</code>使用2字节存储. 如果文本全部是英文，用<code>Unicode</code>编码比<code>ASCII</code>编码需要多一倍的存储空间，在存储和传输上就十分不划算。</p><p><strong>再编码:</strong> <code>UTF-8</code>是对<code>Unicode</code>的再编码.</p><ol><li><strong>英文被编成1个字节</strong></li><li><strong>中文一般编成3个字节</strong></li><li>很生僻的词被编成4-6个字节</li></ol><p>使用UTF-8在万国码的基础上, 既保证了不同国家之间不乱码, 又提高了存储和传输的效率.</p><p><strong>字符编码工作方式</strong></p><p><strong>内存中:</strong> 在计算机内存中，统一使用Unicode编码，</p><p><strong>硬盘或传输中</strong>: 当需要保存到硬盘或者需要传输的时候，转换为UTF-8编码, 因为更节省空间。</p><h3 id="_3-3-字节字符串" tabindex="-1"><a class="header-anchor" href="#_3-3-字节字符串" aria-hidden="true">#</a> 3.3 字节字符串</h3><ol><li><p><strong>字符串的操作</strong>: 字符串的操作是<mark>逐字符</mark>的, 英文字符是一个字节存储, 中文一般是三字节存储, 偏僻字可能需要4-6字节存储</p></li><li><p><strong>字节字符串的操作</strong>: 字节字符串是<mark>逐字节</mark>操作的, 英文字符串和对应的字节字符串长度相等. 中文字节字符串一般等于3倍字符串长度.</p></li></ol><p><strong>字符串和字节字符串的转换</strong></p><p>python中<code>\\x</code> 后面跟着两个十六进制数字表示一个字节的值。如<code>\\xe6</code> 表示十六进制数 <code>0xe6</code></p><table><thead><tr><th>API</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td><code>str.encode(charset: string)</code></td><td>将<mark>字符串</mark>以指定编码<mark>转为字节字符串</mark>.<br>1) 若指定为ASCII编码, 则1字符占1字节<br>2) 若指定为<code>utf-8</code>, 则英文占1字节, 中文一般占3字节</td><td><code>&#39;中文&#39;.encode(&#39;utf-8&#39;)</code><br> # output: b&#39;\\xe4\\xb8\\xad\\xe6\\x96\\x87&#39; 共6字节</td></tr><tr><td><code>bytes.decode(charset: string)</code></td><td>将<mark>字节字符串</mark>以指定编码<mark>转为字符串</mark>.</td><td>b&#39;\\xe4\\xb8\\xad\\xe6\\x96\\x87&#39;.decode(&#39;utf-8&#39;)<br> #output: &#39;中文&#39;</td></tr></tbody></table><h3 id="_3-4-字符串的格式化" tabindex="-1"><a class="header-anchor" href="#_3-4-字符串的格式化" aria-hidden="true">#</a> 3.4 字符串的格式化</h3><p><strong>%字符串</strong></p><blockquote><p><strong>语法示例</strong>: <code> &#39;您的名字是%s&#39; % name</code>, 或者 <code>&#39;您的名字是%s, 年龄是$d&#39; % (name, age)</code></p></blockquote><table><thead><tr><th>占位符</th><th>替换内容</th></tr></thead><tbody><tr><td>%d</td><td>整数</td></tr><tr><td>%f</td><td>浮点数</td></tr><tr><td>%s</td><td>字符串</td></tr><tr><td>%x</td><td>十六进制整数</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入您的名字&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
请输入您的名字<span class="token punctuation">:</span> 张三
  
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> age <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入您的年龄: &#39;</span><span class="token punctuation">)</span>
请输入您的年龄<span class="token punctuation">:</span> <span class="token number">18</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;您的名字是%s, 年龄是$s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token string">&#39;您的名字是张三, 年龄是18&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>format()</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;我的名字是{0}, 今年{1}岁&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&#39;苏灿&#39;</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span>
<span class="token string">&#39;我的名字是苏灿, 今年22岁&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>f-string</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">&#39;苏灿&#39;</span><span class="token punctuation">;</span> age <span class="token operator">=</span> <span class="token number">18</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f&#39;我的名字是</span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">, 年龄是</span><span class="token interpolation"><span class="token punctuation">{</span>age<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span>
<span class="token string">&#39;我的名字是苏灿, 年龄是18&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>格式控制符</strong></p><p><strong>语法:</strong> <code>{:[标志][最小宽度][.精度][类型]}</code>, 所有参数都是可选的</p><ol><li><p><strong>标志</strong>:</p><ul><li><code>+</code>：显示正负号（对数字有效）。</li><li><code>-</code>：左对齐。</li><li><code>0</code>：用零填充（通常与最小宽度一起使用，对数字有效）。</li></ul></li><li><p><strong>最小宽度</strong></p><ul><li>最小宽度指定了数据应该至少占用多少字符的宽度。如果数据的宽度不足最小宽度，可以使用填充字符（通常是空格或零）来填充空白部分。</li></ul></li><li><p><strong>精度</strong></p><ul><li>精度用于控制小数部分的显示位数（对浮点数有效）</li></ul></li><li><p><strong>类型</strong></p><ul><li><code>d</code>：整数。</li><li><code>f</code>：浮点数。</li><li><code>s</code>：字符串。</li><li><code>x</code>：十六进制（通常与整数一起使用)</li></ul><p>​</p></li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">&#39;蒙牛鲜奶一盒{:.2f}元&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">5.231</span><span class="token punctuation">)</span> <span class="token comment">#保留两位小数</span>
<span class="token string">&#39;蒙牛鲜奶一盒5.23元&#39;</span>

<span class="token string">&#39;现在{:02d}点{:02d}分{:02d}秒&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>
<span class="token string">&#39;现在23点02分07秒&#39;</span>

r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">85</span><span class="token operator">-</span><span class="token number">72</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">72</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;%+2.1f%%&#39;</span> <span class="token operator">%</span> r<span class="token punctuation">)</span> <span class="token comment"># +18.1%</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-5-字符串api" tabindex="-1"><a class="header-anchor" href="#_3-5-字符串api" aria-hidden="true">#</a> 3.5 字符串<code>api</code></h3><table><thead><tr><th>API</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td><code>ord: (str: string) =&gt; number</code></td><td>获取字符串的数字编码</td><td><code>ord(&#39;A&#39;)</code> # output: 65</td></tr><tr><td><code>chr: (num: number) =&gt; string</code></td><td>获取数字编码对应的字符</td><td><code>chr(97)</code> # output: &#39;a&#39;</td></tr><tr><td>\`\`len: (str: bytes</td><td></td><td>string) =&gt; number\`\`</td></tr><tr><td><code>find: (c:char) =&gt; int</code></td><td>返回字符串某字符在串中出现第一次的索引</td><td><code>str.find(char)</code></td></tr><tr><td><code>startswith:(str:string)=&gt;boolean</code></td><td>判断字符串是否以某个字符开始</td><td><code>str.starswith(char)</code></td></tr><tr><td><code>endswith:(str:string)=&gt;boolean</code></td><td>判断字符串是否以某个字符结束</td><td><code>str.endswith(char)</code></td></tr><tr><td><code>count:(str:string)=&gt;int</code></td><td>统计字符串中某字符出现的次数</td><td><code>str.count(char)</code></td></tr><tr><td><code>replace:(oldstr:string,newstr)=&gt;string</code></td><td>替换字符串中子串</td><td><code>str.replace(str1,str2)</code></td></tr><tr><td><code>splite:(str: 分隔符)=&gt;list</code></td><td>以分隔符切割字符串,返回值为列表</td><td><code>str.splite(str)</code></td></tr><tr><td><code>upper:()=&gt;string</code></td><td>将字符串转为大小写</td><td><code>str.upper()</code></td></tr><tr><td><code>lower:()=&gt;string</code></td><td>将字符串转为小写</td><td><code>str.lower()</code></td></tr><tr><td><code>strip:()=&gt;string</code></td><td>去除收尾空格</td><td><code>str.strip()</code></td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 字符串的拼接</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;234&quot;</span><span class="token punctuation">)</span> <span class="token comment"># 输出: 123234</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token operator">+</span> <span class="token number">123</span><span class="token punctuation">)</span> <span class="token comment">#不允许!, python字符串的拼接需要两边都需要是字符串</span>

<span class="token comment"># 字符串的乘法</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello, world&quot;</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment"># 把把hello, world写五遍</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-6-list" tabindex="-1"><a class="header-anchor" href="#_3-6-list" aria-hidden="true">#</a> 3.6 list</h3><p>list与JavaScript中的数组基本是一致的</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># list的声明</span>
hobby <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;吃饭&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;睡觉&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;打豆豆&quot;</span><span class="token punctuation">]</span>

<span class="token comment"># 获取list的长度</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>hobby<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 使用索引访问list, 获取倒数i个元素</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>hobby<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> hobby<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># python中的索引具备JavaScript的at方法的特性</span>

<span class="token comment"># 索引越界</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>hobby<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># IndexError: list index out of range</span>

<span class="token comment"># 增删改查APIs</span>
<span class="token comment">#增</span>
hobby<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot;烫头&quot;</span><span class="token punctuation">)</span>
hobby<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;--插入--&quot;</span><span class="token punctuation">)</span>
hobby<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>hobby2<span class="token punctuation">)</span> <span class="token comment">#合并两个list</span>

<span class="token comment"># 删除</span>
<span class="token keyword">del</span> hobbys<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># 根据索引删除</span>

hobby<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 删除最后一个元素</span>
hobby<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 删除第一个元素</span>

hobby<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">&quot;烫头&quot;</span><span class="token punctuation">)</span> <span class="token comment"># 根据值删除</span>

<span class="token comment">#查</span>
<span class="token keyword">if</span> food <span class="token keyword">in</span> hobby_list <span class="token comment"># 判断元素是否在列表中</span>
<span class="token keyword">if</span> food <span class="token keyword">not</span> <span class="token keyword">in</span> hobby_list <span class="token comment"># 判断元素是否不在列表中</span>



</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-7-tuple" tabindex="-1"><a class="header-anchor" href="#_3-7-tuple" aria-hidden="true">#</a> 3.7 tuple</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># tuple的声明</span>
arr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;吃饭&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;睡觉&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;打豆豆&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># tuple不能修改进行增, 删, 改操作. 只能进行查</span>
<span class="token comment"># arr[-1] = &quot;烫头&quot;  # TypeError: &#39;tuple&#39; object does not support item assignment</span>

<span class="token comment"># 空turple的定义与单个元素的tuple的定义</span>
arr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
arr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span>  <span class="token comment"># 定义单元素tuple时候要在其后添加逗号, 消除小括号带来的二义性(被误认为带着括号的数字)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-8-条件语句" tabindex="-1"><a class="header-anchor" href="#_3-8-条件语句" aria-hidden="true">#</a> 3.8 条件语句</h3><p>与其他编程语言不同的是</p><ol><li><code>if</code>后没有( )</li></ol><p>2)<code> else if</code> 更名为 <code>elif</code></p><p>3)<code>if, elif, else </code>后需要加<code>:</code></p><ol start="4"><li>用一个缩进代表换行</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>flag <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;if&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> flag <span class="token operator">==</span> <span class="token number">20</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;elif 1&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> flag <span class="token operator">==</span> <span class="token number">20</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;elif 2&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;else&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不可以进行字符串与整型的比较, 不像JavaScript一样会进行隐式转换</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 输入1000, input输入的都是字符串</span>
<span class="token comment"># a = int(a) # 可以将a进行转换, 将str --&gt; int			</span>
<span class="token keyword">if</span> a <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">:</span>  <span class="token comment"># TypeError: &#39;&gt;&#39; not supported between instances of &#39;str&#39; and &#39;int&#39;</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;OK~&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-9-循环" tabindex="-1"><a class="header-anchor" href="#_3-9-循环" aria-hidden="true">#</a> 3.9 循环</h3><p><code>for循环</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 循环字符串</span>
<span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token string">&quot;china&quot;</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>

<span class="token comment"># 循环数组</span>
<span class="token keyword">for</span> age <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>


<span class="token comment"># 循环range</span>

<span class="token comment"># range(len), 生成 [0,len-1], 如range(5), 生成[0,1,2,3,4]的整数序列</span>
<span class="token keyword">for</span> age <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token comment">#0,1,2,3,4</span>
 
<span class="token comment"># range(起始值, 结束值),生成[起始值, 结束值-1]的整数序列</span>
<span class="token keyword">for</span> age <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token keyword">print</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token comment"># 2,3,4</span>
   
<span class="token comment"># rage(起始值,结束值,步长) 生成从起始值开始按照补长一直增加到结束值的序列</span>
<span class="token keyword">for</span> age <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token keyword">print</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token comment"># 1 4 </span>
   
<span class="token comment"># 遍历列表的下标</span>
a_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;王二麻子&quot;</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>a_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># &#39;int&#39; object is not iterable. 整数是无法遍历的, 需要放进range里</span>
   <span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>while循环</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">while</span> aa <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;a等于10&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-10-注释" tabindex="-1"><a class="header-anchor" href="#_3-10-注释" aria-hidden="true">#</a> 3.10 注释</h3><p>单行注释: #</p><p>多行注释: \`\`\` 注释内容 \`\`\`</p><h3 id="_3-11-算数运算符" tabindex="-1"><a class="header-anchor" href="#_3-11-算数运算符" aria-hidden="true">#</a> 3.11 算数运算符</h3><p>只记录和其他语言不相同的语法<br> a//b 整除: a和b做除法, 答案向下取整<br> a**b 指数: a的b次方</p><h3 id="_3-12-切片" tabindex="-1"><a class="header-anchor" href="#_3-12-切片" aria-hidden="true">#</a> 3.12 切片</h3><blockquote><p>切片指对列表, 字符串, 元祖等数据结构截取其中一部分的操作</p></blockquote><p>语法: <code>[(起始):(结束):(步长)]</code> 切片不包含结束位</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>hobbys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;吃饭&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;睡觉&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;烫头&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;aaa&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bbb&quot;</span><span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>hobbys<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出[&#39;睡觉&#39;, &#39;烫头&#39;], 不包含结束位</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>hobbys<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 从0-2的切片</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>hobbys<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 从3-结束的切片 </span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-13-字典" tabindex="-1"><a class="header-anchor" href="#_3-13-字典" aria-hidden="true">#</a> 3.13 字典</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 读取</span>
person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 方式一: 获取不存在的key值, 会报错KeyError</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 方式二: 获取不存在的key值, 返回None</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>preson<span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token comment"># 强调不能通过.的方式访问key</span>

<span class="token comment"># 遍历</span>
<span class="token keyword">for</span> key <span class="token keyword">in</span> person<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 遍历所有的key</span>
<span class="token keyword">for</span> value <span class="token keyword">in</span> person<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 遍历所有的value</span>
<span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> person<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 遍历所有的key和value</span>
<span class="token keyword">for</span> item <span class="token keyword">in</span> person<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 遍历对象的每一个键值对, item一个key和value的元祖</span>

<span class="token comment"># 改</span>
person<span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;法外狂徒&quot;</span>

<span class="token comment"># 增</span>
person<span class="token punctuation">[</span><span class="token string">&quot;sex&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;男&quot;</span>

<span class="token comment"># 删</span>
<span class="token keyword">del</span> person<span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span>
<span class="token keyword">del</span> person <span class="token comment"># 删除整个对象, 清空内存</span>

person<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#情况所有key-value, 但保存字典对象结构()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-14-函数" tabindex="-1"><a class="header-anchor" href="#_3-14-函数" aria-hidden="true">#</a> 3.14 函数</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 函数的定义</span>
<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">:</span> 
   <span class="token comment"># 函数体</span>
   
<span class="token comment"># 关键词传参</span>
<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token comment"># 函数体</span>
   
func<span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> a <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment"># 100将会传到形参b上, 1000将会传到形参a上, 强行修改了顺序</span>

<span class="token comment"># 函数作用域</span>
\`\`\`作用域和js一样<span class="token punctuation">,</span> 有函数作用域<span class="token punctuation">,</span> 全局作用域\`\`\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-15-io流" tabindex="-1"><a class="header-anchor" href="#_3-15-io流" aria-hidden="true">#</a> 3.15 IO流</h3><p>语法: open(pathName,mode)</p><p>打开模式（mode）决定了文件打开的方式，包括读取、写入等。常见的模式有：</p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>r</td><td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td>w</td><td>打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>a</td><td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>r+</td><td>打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>w+</td><td>打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>a+</td><td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td>b</td><td>二进制模式。</td></tr><tr><td>rb</td><td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。</td></tr><tr><td>rb+</td><td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td></tr><tr><td>wb</td><td>以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td>wb+</td><td>以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td>ab</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>ab+</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 写入操作</span>
fs <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;./test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 以读打开文件, 文件若存在会覆盖</span>
fs<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&quot;hello, world&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 写入文本</span>
fs<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 关闭文件流</span>

<span class="token comment"># 追加操作</span>
fs <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;./test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 以追加打开文件, 字符会追加</span>
fs<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&quot;hello, world&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 写入文本</span>
fs<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 关闭文件流</span>

<span class="token comment"># 读文件</span>
fs <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;./test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 以只读打开文件</span>
content <span class="token operator">=</span> fs<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 默认逐字节读</span>
<span class="token comment"># content = fs.readline()  # 逐行读(只读一行)</span>
<span class="token comment"># content = fs.readlines()  # 逐行读,读所有的数据, 但会将每一行数据保存到list的每一项中返回</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>
fs<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 关闭文件流</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="序列化与反序列化" tabindex="-1"><a class="header-anchor" href="#序列化与反序列化" aria-hidden="true">#</a> 序列化与反序列化</h3><blockquote><p>序列化: 将对象用二进制数字表示, 反序列化: 将对象的二进制序列读出来</p></blockquote><p>序列化</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 将列表转为json字符串并存</span>
fs <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;./test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">import</span> json <span class="token comment"># 必须因为JSON模块</span>
jsonStr <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;抽烟,喝酒,烫头&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 将列表转为JSON字符串</span>
fs<span class="token punctuation">.</span>write<span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span>
<span class="token comment"># json.dump([&quot;抽烟,喝酒,烫头&quot;], fs) # 相当于上面两行的总和, 不用再写fs.write(jsonStr)了</span>

fs<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 关闭文件流</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>反序列化</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># loads API</span>
<span class="token keyword">import</span> json
fs <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;./test.txt&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span>
hobby_list <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>fs<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 读取的是文件流提取的内容</span>
fs<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># load API</span>
<span class="token keyword">import</span> json
fs <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;./test.txt&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span>
hobby_list <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>fs<span class="token punctuation">)</span> <span class="token comment"># 读取的是整个文件流</span>
fs<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="异常与捕获" tabindex="-1"><a class="header-anchor" href="#异常与捕获" aria-hidden="true">#</a> 异常与捕获</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token comment"># name &#39;a&#39; is not defined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四-pip" tabindex="-1"><a class="header-anchor" href="#四-pip" aria-hidden="true">#</a> 四: PIP</h2><blockquote><p>pip是python的包管理工具</p></blockquote><h3 id="_4-1-pip的基本使用" tabindex="-1"><a class="header-anchor" href="#_4-1-pip的基本使用" aria-hidden="true">#</a> 4.1 pip的基本使用</h3><ol><li>查看python的安装路径： 可以在环境变量中查看</li><li>手动切换到python/Scripts目录在该目录下下载包</li><li>下载:尝试使用<code>pip install ipython</code>下载包(下载的为python的另一个解释器)</li></ol><h3 id="_4-2-pip的命令" tabindex="-1"><a class="header-anchor" href="#_4-2-pip的命令" aria-hidden="true">#</a> 4.2 pip的命令</h3><p>pip install/uninstall<br> pip list -- 显示已安装的包<br> pip freeze 以requirements.txt安装包</p><p>其他命令:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>查看某个安装包的信息 pip show selenium

结果如下:
Name: selenium
Version: <span class="token number">4.22</span>.0
Summary: Official Python bindings <span class="token keyword">for</span> Selenium WebDriver
Home-page: https://www.selenium.dev
Author:
Author-email:
License: Apache <span class="token number">2.0</span>
Location: C:<span class="token punctuation">\\</span>Users<span class="token punctuation">\\</span>苏察哈尔灿<span class="token punctuation">\\</span>Desktop<span class="token punctuation">\\</span>python笔记<span class="token punctuation">\\</span>代码练习<span class="token punctuation">\\</span>envirment<span class="token punctuation">\\</span>Lib<span class="token punctuation">\\</span>site-packages
Requires: certifi, trio, trio-websocket, typing_extensions, urllib3, websocket-client
Required-by:
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-修改pip下载镜像源-国内镜像源" tabindex="-1"><a class="header-anchor" href="#_4-3-修改pip下载镜像源-国内镜像源" aria-hidden="true">#</a> 4.3 修改pip下载镜像源(国内镜像源)</h3><p>pip install 包名 -i 镜像源地址</p>`,93),v={href:"https://pypi.tuna.tsinghua.edu.cn/simple",target:"_blank",rel:"noopener noreferrer"},b={href:"http://mirrors.aliyun.com/pypi/simple/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://pypi.mirrors.ustc.edu.cn/simple/",target:"_blank",rel:"noopener noreferrer"},g={href:"http://pypi.hustunique.com/",target:"_blank",rel:"noopener noreferrer"},y={href:"http://pypi.sdutlinux.org/",target:"_blank",rel:"noopener noreferrer"},f={href:"http://pypi.douban.com/simple/",target:"_blank",rel:"noopener noreferrer"};function q(w,_){const a=o("ExternalLinkIcon");return l(),c("div",null,[u,n("p",null,[n("a",r,[s("翻墙访问www.python.org"),t(a)])]),d,k,m,n("p",null,[s("清华："),n("a",v,[s("https://pypi.tuna.tsinghua.edu.cn/simple"),t(a)])]),n("p",null,[s("阿里云："),n("a",b,[s("http://mirrors.aliyun.com/pypi/simple/"),t(a)])]),n("p",null,[s("中国科技大学 "),n("a",h,[s("https://pypi.mirrors.ustc.edu.cn/simple/"),t(a)])]),n("p",null,[s("华中理工大学："),n("a",g,[s("http://pypi.hustunique.com/"),t(a)])]),n("p",null,[s("山东理工大学："),n("a",y,[s("http://pypi.sdutlinux.org/"),t(a)])]),n("p",null,[n("strong",null,[s("豆瓣："),n("a",f,[s("http://pypi.douban.com/simple/"),t(a)])]),s(" 推荐使用")])])}const S=p(i,[["render",q],["__file","python语法基础.html.vue"]]);export{S as default};

const e=JSON.parse('{"key":"v-ac5e4dc6","path":"/Coding/backend/c__.html","title":"C++","lang":"zh-CN","frontmatter":{"description":"VS操作 vs中如何格式化代码 在 Visual Studio 中，可以使用内置的格式化功能来格式化代码。以下是格式化代码的步骤： 1. 打开要格式化的文件。 2. 选择要格式化的代码部分。您可以选择整个文件或仅选择某个部分。 3. 打开“编辑”菜单，并选择“高级”->“格式化文档”或“格式化选定内容”。 4. 等待 Visual Studio 格式化...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/Coding/backend/c__.html"}],["meta",{"property":"og:site_name","content":"返回首页"}],["meta",{"property":"og:title","content":"C++"}],["meta",{"property":"og:description","content":"VS操作 vs中如何格式化代码 在 Visual Studio 中，可以使用内置的格式化功能来格式化代码。以下是格式化代码的步骤： 1. 打开要格式化的文件。 2. 选择要格式化的代码部分。您可以选择整个文件或仅选择某个部分。 3. 打开“编辑”菜单，并选择“高级”->“格式化文档”或“格式化选定内容”。 4. 等待 Visual Studio 格式化..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-09T03:50:32.000Z"}],["meta",{"property":"article:author","content":"苏察哈尔灿hh"}],["meta",{"property":"article:modified_time","content":"2023-10-09T03:50:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C++\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-10-09T03:50:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"苏察哈尔灿hh\\",\\"url\\":\\"https://syriansoldier.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"VS操作","slug":"vs操作","link":"#vs操作","children":[{"level":3,"title":"vs中如何格式化代码","slug":"vs中如何格式化代码","link":"#vs中如何格式化代码","children":[]},{"level":3,"title":"vs中注释的快捷键","slug":"vs中注释的快捷键","link":"#vs中注释的快捷键","children":[]}]},{"level":2,"title":"vs中只编译不运行的快捷键","slug":"vs中只编译不运行的快捷键","link":"#vs中只编译不运行的快捷键","children":[]},{"level":2,"title":"c++基础模板","slug":"c-基础模板","link":"#c-基础模板","children":[]},{"level":2,"title":"常量","slug":"常量","link":"#常量","children":[{"level":3,"title":"宏常量","slug":"宏常量","link":"#宏常量","children":[]},{"level":3,"title":"const 修饰的常量","slug":"const-修饰的常量","link":"#const-修饰的常量","children":[]}]},{"level":2,"title":"bool类型的隐式转换","slug":"bool类型的隐式转换","link":"#bool类型的隐式转换","children":[]},{"level":2,"title":"c++11初始化","slug":"c-11初始化","link":"#c-11初始化","children":[]},{"level":2,"title":"c++11初始化晋级","slug":"c-11初始化晋级","link":"#c-11初始化晋级","children":[]},{"level":2,"title":"c++11原始字面量","slug":"c-11原始字面量","link":"#c-11原始字面量","children":[]},{"level":2,"title":"goto语句","slug":"goto语句","link":"#goto语句","children":[]},{"level":2,"title":"作用域","slug":"作用域","link":"#作用域","children":[{"level":3,"title":"全局作用域","slug":"全局作用域","link":"#全局作用域","children":[]},{"level":3,"title":"函数作用域","slug":"函数作用域","link":"#函数作用域","children":[]},{"level":3,"title":"块作用域","slug":"块作用域","link":"#块作用域","children":[]}]},{"level":2,"title":"c++中的分号","slug":"c-中的分号","link":"#c-中的分号","children":[]},{"level":2,"title":"static 修饰的静态变量","slug":"static-修饰的静态变量","link":"#static-修饰的静态变量","children":[]},{"level":2,"title":":: 访问全局变量","slug":"访问全局变量","link":"#访问全局变量","children":[]},{"level":2,"title":"c++算数运算的细节","slug":"c-算数运算的细节","link":"#c-算数运算的细节","children":[]},{"level":2,"title":"函数分文件编写","slug":"函数分文件编写","link":"#函数分文件编写","children":[]},{"level":2,"title":"使用VS debug程序","slug":"使用vs-debug程序","link":"#使用vs-debug程序","children":[]},{"level":2,"title":"sizeof 测量变量/数据类型的内存大小","slug":"sizeof-测量变量-数据类型的内存大小","link":"#sizeof-测量变量-数据类型的内存大小","children":[]},{"level":2,"title":"c++ 的数据类型","slug":"c-的数据类型","link":"#c-的数据类型","children":[]},{"level":2,"title":"数据类型转换","slug":"数据类型转换","link":"#数据类型转换","children":[]},{"level":2,"title":"类型别名","slug":"类型别名","link":"#类型别名","children":[]},{"level":2,"title":"指针","slug":"指针","link":"#指针","children":[]},{"level":2,"title":"指针操作","slug":"指针操作","link":"#指针操作","children":[]},{"level":2,"title":"指针与常量","slug":"指针与常量","link":"#指针与常量","children":[]},{"level":2,"title":"任意指针","slug":"任意指针","link":"#任意指针","children":[]},{"level":2,"title":"new和delete控制堆内存空间","slug":"new和delete控制堆内存空间","link":"#new和delete控制堆内存空间","children":[]},{"level":2,"title":"空指针与野指针","slug":"空指针与野指针","link":"#空指针与野指针","children":[]},{"level":2,"title":"函数指针与回调函数","slug":"函数指针与回调函数","link":"#函数指针与回调函数","children":[]},{"level":2,"title":"一维数组声明, memset, memcpy函数","slug":"一维数组声明-memset-memcpy函数","link":"#一维数组声明-memset-memcpy函数","children":[]},{"level":2,"title":"指针的加法, 一维数组的运算表示法","slug":"指针的加法-一维数组的运算表示法","link":"#指针的加法-一维数组的运算表示法","children":[]},{"level":2,"title":"函数中形参为数组","slug":"函数中形参为数组","link":"#函数中形参为数组","children":[]},{"level":2,"title":"防止new声明的数组空间溢出","slug":"防止new声明的数组空间溢出","link":"#防止new声明的数组空间溢出","children":[]},{"level":2,"title":"数组的qsort函数","slug":"数组的qsort函数","link":"#数组的qsort函数","children":[]},{"level":2,"title":"malloc和 free函数","slug":"malloc和-free函数","link":"#malloc和-free函数","children":[]},{"level":2,"title":"结构体","slug":"结构体","link":"#结构体","children":[]},{"level":2,"title":"二分查找","slug":"二分查找","link":"#二分查找","children":[]},{"level":2,"title":"C风格字符串","slug":"c风格字符串","link":"#c风格字符串","children":[]},{"level":2,"title":"二维数组","slug":"二维数组","link":"#二维数组","children":[]}],"git":{"createdTime":1696820599000,"updatedTime":1696823432000,"contributors":[{"name":"Summer","email":"summer@tradev-group.com","commits":2}]},"readingTime":{"minutes":23.97,"words":7192},"filePathRelative":"Coding/backend/c++.md","localizedDate":"2023年10月9日","autoDesc":true}');export{e as data};

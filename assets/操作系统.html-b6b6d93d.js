import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as r,d as o}from"./app-4c1bc0bf.js";const t="/assets/os1-b20b1a92.jpg",s={},n=o('<h1 id="操作系统" tabindex="-1"><a class="header-anchor" href="#操作系统" aria-hidden="true">#</a> 操作系统</h1><h2 id="第一章-操作系统概述" tabindex="-1"><a class="header-anchor" href="#第一章-操作系统概述" aria-hidden="true">#</a> 第一章: 操作系统概述</h2><h3 id="_1-1-操作系统概念" tabindex="-1"><a class="header-anchor" href="#_1-1-操作系统概念" aria-hidden="true">#</a> 1.1 操作系统概念</h3><p><strong>操作系统( Operating System, OS )</strong></p><ol><li><strong>控制,管理与调度:</strong> 管理整个计算机系统的硬件和软件资源,合理的组织调度计算机的工作和资源的分配 <ul><li>操作系统管理计算机的资源. <strong>资源包括硬件资源和软件资源</strong>.操作系统为每个应用分配一定的资源.</li></ul></li><li><strong>向上层提供服务</strong>: 以提供给用户和其他软件方便的接口和环境 <ul><li><img src="'+t+'" width="231"></li><li>操作系统与用户和软件直接交互, 向上层提供方便好用的服务</li></ul></li><li><strong>向下层扩展功能:</strong> 他是计算机系统中最基本的系统软件. <ul><li>操作系统是最接近硬件的软件.</li></ul></li></ol><h3 id="_1-2-操作系统的功能" tabindex="-1"><a class="header-anchor" href="#_1-2-操作系统的功能" aria-hidden="true">#</a> 1.2 操作系统的功能</h3><p><strong>1. 从如何管理系统资源的看操作系统的功能</strong></p><p>操作系统通过以下4个模块处理系统资源:</p><ol><li>处理机管理 <ul><li>如何给不同应用分配cpu资源, 用于计算数据等</li></ul></li><li>存储器管理 <ul><li>内存如何读写, 磁盘如何读写, 如何分区等</li></ul></li><li>文件管理 <ul><li>文件系统, 文件按照树状结构存储在磁盘当中</li></ul></li><li>设备管理 <ul><li>如同一个摄像头如何给不同的应用使用</li></ul></li></ol><p>操作系统的目标是安全且功效的管理系统资源.</p><p><strong>2. 从向上层提供服务看操作系统的功能</strong></p><ol><li>向用户层提供GUI服务 <ul><li>用户可以通过图形用户接口直接与操作系统交互. 如用户可通过拖拽的方式改变文件存储位置.</li></ul></li><li>向软件层提供程序接口服务 <ul><li><strong>系统调用:</strong> 操作系统提供的程序接口一般又称为<strong>系统调用或者广义指令</strong></li><li><strong>二次封装:</strong> <strong>普通用户不能直接使用系统调用</strong>, 一般来说,高级程序语言会对系统调用进行二次封装, 提供给程序员使用.<br> 如操作系统关于网络请求的SocketAPI, 会经过各种高级语言如c++的二次封装, 提供给程序员使用.</li><li><strong>系统调用种类(从用户的角度对系统调用分类)</strong><ol><li>脱机命令接口: 又称为批处理接口. 用户说一堆, 系统做一堆.</li><li>联机命令接口: 又称为交互式处理接口. 用户说一句, 系统做一句.</li></ol></li></ul></li></ol><p><strong>3. 从向下层拓展功能看操作系统的功能</strong><br> 裸机指没有<strong>任何软件支持</strong>的计算机.</p><p>不太恰当的说, 裸机就是一堆废铜烂铁, 操作系统对逻辑进行扩展, 将逻辑改造成功能更强使用更方便的机器.</p><p>通常把覆盖了软件的机器称为扩充机器, 又称为<strong>虚拟机</strong></p><h3 id="操作系统的特征" tabindex="-1"><a class="header-anchor" href="#操作系统的特征" aria-hidden="true">#</a> 操作系统的特征</h3><ol><li>并发 <ul><li><strong>并发:</strong> 指宏观是同时发生, 但是微观是交替发生的</li><li><strong>并行:</strong> 指无论是宏观和微观, 不同事情都是在同一时刻发生的</li><li><strong>操作系统的并发性:</strong> 指操作系统上运行这多个软件, 在宏观上是同时运行的, 在微观上是交替运行的</li><li><strong>单核与多核CPU的并发性:</strong>: 单核CPU在同一时刻只能运行一个软件, 多个软件采用并发的形式运行. 多核CPU同一时刻能运行核数个软件,<br> 若运行比核数更多的软件, 也需要并发的形式的形式运行</li></ul></li><li>共享 <ul><li><strong>资源共享:</strong> 共享即资源共享, 即系统资源可以被内存中的多个并发的程序同时使用. 如英雄联盟与网易云音乐同时使用扬声器资源.</li><li><strong>资源贡献方式:</strong><ol><li><strong>互斥资源共享:</strong> 一个时间段只允许一个程序使用资源. 如摄像头资源可以被QQ和微信使用, 但QQ占用了摄像头,<br> 微信在占用期不能再使用摄像头.</li><li><strong>同时资源共享:</strong> 允许一个时间段内多个程序使用资源(同时的意思是并发的使用).</li></ol></li></ul></li><li>虚拟 <ul><li>虚拟技术指, 将一个物理存在的实体变为若干个逻辑上的对应物的技术.</li><li>如时分复用技术, 单核CPU只能运行一个程序, 但通过时分复用, 实现了并发, 可以同时运行多个程序, 看起来是拥有多核CPU一样.</li></ul></li><li>异步 <ul><li>指的是在多道程序环境下，允许<strong>多个程序并发执行</strong>，但由于资源有限，<strong>进程的执行是不连续、不可预知的</strong>，以不可预知的速度向前推进。</li><li>如JavaScript中的Promise, 一个网络请求的Promise将会和主线程的任务栈的并发运行, 即立即发送网络请求. 但由于资源的限制, 主要是网络请求的时间消耗和主线程任务栈任务执行情况的限制, 将不会保证什么时候能执行完.</li></ul></li></ol><p>并发与共享的关系:</p><ul><li>如果系统失去了并发性, 即系统只有一个程序正在运行, 资源共享没有意义.</li><li>如果系统失去了共享性, 即即使系统并发的运行着多个程序, 但多个程序无法访问同一资源, 如QQ和微信无法同时发送一个文件. 则并发性没有意义.</li></ul><p>综上并发与共享是互为存在条件.</p><h3 id="操作系统的运行机制" tabindex="-1"><a class="header-anchor" href="#操作系统的运行机制" aria-hidden="true">#</a> 操作系统的运行机制</h3><p>内核程序与应用程序</p><ul><li>操作系统内核: 操作系统&gt;操作系统内核. 操作系统内核是操作系统最核心的功能, 但不是全部的功能. 操作系统提供的GUI的功能不是核心的功能,<br> 即使没有GUI也可以通过命令行的方式实现. 内核程序集操作系统核心程序</li><li>应用程序: 指在基于操作系统接口开发的应用程序.</li></ul><p>特权指令和非特权指令</p><ul><li>特权指令: 只允许管理者即操作系统内核执行的指令. 如内存清零</li><li>非特权指令: 允许普通用户执行的指令</li></ul><p>cpu内部的<strong>程序状态字寄存器(PSW)</strong> 标识cpu的状态, 1标识cpu处于内核态, 0标识处于用户态</p><ul><li>处于内核态(核心态, 管态)的CPU, 运行的是内核程序, <strong>可以执行特权指令</strong></li><li>处于用户态(目态)的CPU, 运行的是应用程序, <strong>只能执行非特权指令</strong></li></ul><p>CPU状态的切换</p><ol><li>电脑上电: 运行内核程序, 处于内核态</li><li>切换为用户态: 运行一些内核程序后, 执行特权指令, 将CPU状态切换为用户态</li><li>运行应用程序: cpu在应用态下运行应用程序</li><li>中断信号: cpu可能会检测到中断信号, 当检测到中断信号后, 会<strong>立即将状态切换由用户态由用户态切换为核心态, 并停止应用程序</strong></li></ol>',29),a=[n];function e(g,u){return i(),r("div",null,a)}const c=l(s,[["render",e],["__file","操作系统.html.vue"]]);export{c as default};

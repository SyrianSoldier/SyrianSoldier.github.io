import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as p}from"./app-57e7b453.js";const e={},t=p(`<h1 id="代码分割" tabindex="-1"><a class="header-anchor" href="#代码分割" aria-hidden="true">#</a> 代码分割</h1><h2 id="代码分割的默认条件" tabindex="-1"><a class="header-anchor" href="#代码分割的默认条件" aria-hidden="true">#</a> 代码分割的默认条件</h2><blockquote><p>什么样的条件会使一个模块进行代码分割?</p></blockquote><ol><li>动态引入( import() )引入的模块会被检测是否需要代码分割</li><li>这个动态引入的模块,包含的模块是 共享的模块 或者是来自于node_moudles的</li><li>这个动态引入的模块包含的模块体积大于30kb</li><li>这个动态引入的模块, 引入的模块数小于30</li><li>当前页面并发请求数小于30</li></ol><p>以下为 webpack官网原文</p><p>默认情况下，它只会影响到按需加载的 chunks，因为修改 initial chunks 会影响到项目的 HTML 文件中的脚本标签。</p><p>webpack 将根据以下条件自动拆分 chunks：</p><p>新的 chunk 可以被共享，或者模块来自于 node_modules 文件夹<br> 新的 chunk 体积大于 20kb（在进行 min+gz 之前的体积）<br> 当按需加载 chunks 时，并行请求的最大数量小于或等于 30<br> 当加载初始化页面时，并发请求的最大数量小于或等于 30<br> 当尝试满足最后两个条件时，最好使用较大的 chunks。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&#39;async&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">minSize</span><span class="token operator">:</span> <span class="token number">20000</span><span class="token punctuation">,</span>
      <span class="token literal-property property">minRemainingSize</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token literal-property property">minChunks</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token literal-property property">maxAsyncRequests</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
      <span class="token literal-property property">maxInitialRequests</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
      <span class="token literal-property property">enforceSizeThreshold</span><span class="token operator">:</span> <span class="token number">50000</span><span class="token punctuation">,</span>
      <span class="token literal-property property">cacheGroups</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">defaultVendors</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\\\/]node_modules[\\\\/]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
          <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span>
          <span class="token literal-property property">reuseExistingChunk</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">minChunks</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
          <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span>
          <span class="token literal-property property">reuseExistingChunk</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="代码分割-code-spliting" tabindex="-1"><a class="header-anchor" href="#代码分割-code-spliting" aria-hidden="true">#</a> 代码分割 (code spliting)</h1><h2 id="为什么要进行代码分割" tabindex="-1"><a class="header-anchor" href="#为什么要进行代码分割" aria-hidden="true">#</a> 为什么要进行代码分割</h2><p>单页面应用的缺点是什么呢?<br> 因为打包后的js文件过大, 导致首屏加载速度慢, 白屏</p><p>我们就是要分割js代码, 不一下加载所有的js文件, 从而让首屏加载速度变快<br> 除了代码分割, cdn引入也可以让首屏加载速度变快</p><h2 id="什么是代码分割" tabindex="-1"><a class="header-anchor" href="#什么是代码分割" aria-hidden="true">#</a> 什么是代码分割?</h2><p>通过webpack, 就是让打包以后的js文件, 变成一个个的chunk</p><h2 id="webpack的配置-代码分割" tabindex="-1"><a class="header-anchor" href="#webpack的配置-代码分割" aria-hidden="true">#</a> webpack的配置-- 代码分割</h2><h3 id="splitchunks的默认配置" tabindex="-1"><a class="header-anchor" href="#splitchunks的默认配置" aria-hidden="true">#</a> splitChunks的默认配置</h3><blockquote><p>所有的import() 动态导入都会被分成chunk</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
   webpackConfig<span class="token punctuation">.</span>optimization<span class="token punctuation">.</span>splitChunks <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token comment">// chunks:&#39;async&#39; // 对异步模块优化</span>
        <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&#39;initial&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 对同步模块优化</span>
        <span class="token literal-property property">minChunks</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 规定最小引用数量</span>
        <span class="token literal-property property">minSize</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token comment">// byte, 最小多大才分chunk</span>
        <span class="token literal-property property">cacheGroups</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 缓存组</span>
          <span class="token literal-property property">defaultVendors</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;defaultVendors&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\\\/]node_modules[\\\\/]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
            <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment">// 优先级</span>
            <span class="token literal-property property">reuseExistingChunk</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否重复使用,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">minChunks</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
            <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span>
            <span class="token literal-property property">reuseExistingChunk</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>chunks:</p><ol><li><p>async<br> - 只对异步模块进行优化. 即import()的模块再进行分析, 判断是否需要再拆分</p></li><li><p>initial<br> - 只对初始模块进行优化, 入口模块所有的文件都会进行分析</p></li></ol>`,21),o=[t];function l(r,i){return s(),a("div",null,o)}const k=n(e,[["render",l],["__file","spliteChunks.html.vue"]]);export{k as default};

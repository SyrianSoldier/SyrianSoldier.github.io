import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as t,a as p,e as n,f as s,d as o}from"./app-edb3a297.js";const c={},i=n("h1",{id:"自动注册全局组件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#自动注册全局组件","aria-hidden":"true"},"#"),s(" 自动注册全局组件")],-1),l=n("p",null,[n("code",null,"自动注册全局组件"),n("br"),s(" webpack")],-1),u=o(`<h2 id="_1-什么是自动注册全局组件" tabindex="-1"><a class="header-anchor" href="#_1-什么是自动注册全局组件" aria-hidden="true">#</a> 1. 什么是自动注册全局组件</h2><blockquote><p>在大型的vue项目中, 可能我们有很多公共的组件需要通过Vue.component()进行全局注册(比如自定义的button), 这样的好处是可以直接在组件中使用这些base组件, 而不需要一个个的import后去使用, 而这篇文章就是记录实现这样的方法</p></blockquote><h2 id="_2-知识铺垫" tabindex="-1"><a class="header-anchor" href="#_2-知识铺垫" aria-hidden="true">#</a> 2. 知识铺垫</h2><h3 id="_2-1-require-context-方法" tabindex="-1"><a class="header-anchor" href="#_2-1-require-context-方法" aria-hidden="true">#</a> 2-1: require.context() 方法</h3><ol><li>首先这是一个webpack的方法, 也就是说只有在webpack环境下才能使用该方法</li><li>该方法可以获得一个目录中所有的文件信息</li><li>该方法有三个参数require.context(引入目录的路径, 是否引入当前目录子目录的文件, 该目录下的文件正则表达式) <ul><li>示例 require.context(&#39;.&#39;, false, /.*.vue$/) 这行代码的意思是引入当前目录下所有vue文件信息, 不包括当前文件夹的子文件夹的vue文件</li></ul></li><li>require.context() 的返回值是一个函数, 这个函数传入一个文件名(应该是引入目录其中的文件), 可以获得这个文件导出的模块信息</li><li>require.context()的返回值是个函数, 在4已经说过了. 这个返回的函数实例身上也挂载了几个函数, 其中比较有用的是keys方法, 它可以获得所有引入的文件名数组</li></ol><h2 id="_3-自动注册全局组件代码实现" tabindex="-1"><a class="header-anchor" href="#_3-自动注册全局组件代码实现" aria-hidden="true">#</a> 3. 自动注册全局组件代码实现</h2><p>下面代码出自vue.js示例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token comment">// https://webpack.js.org/guides/dependency-management/#require-context</span>
<span class="token keyword">const</span> requireComponent <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span>
  <span class="token comment">// Look for files in the current directory</span>
  <span class="token string">&#39;.&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// Do not look in subdirectories</span>
  <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token comment">// Only include &quot;_base-&quot; prefixed .vue files</span>
  <span class="token operator">/</span>_base<span class="token operator">-</span><span class="token punctuation">[</span>\\w<span class="token operator">-</span><span class="token punctuation">]</span><span class="token operator">+</span>\\<span class="token punctuation">.</span>vue$<span class="token operator">/</span>
<span class="token punctuation">)</span>

<span class="token comment">// For each matching file name...</span>
requireComponent<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">fileName</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Get the component config</span>
  <span class="token keyword">const</span> componentConfig <span class="token operator">=</span> <span class="token function">requireComponent</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span>
  <span class="token comment">// Get the PascalCase version of the component name</span>
  <span class="token keyword">const</span> componentName <span class="token operator">=</span> fileName
    <span class="token comment">// Remove the &quot;./_&quot; from the beginning</span>
    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\.\\/_</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// Remove the file extension from the end</span>
    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.\\w+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// Split up kebabs</span>
    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// Upper case</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">kebab</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> kebab<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> kebab<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// Concatenated</span>
    <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>

  <span class="token comment">// Globally register the component</span>
  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>componentName<span class="token punctuation">,</span> componentConfig<span class="token punctuation">.</span>default <span class="token operator">||</span> componentConfig<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function r(k,d){return e(),t("div",null,[i,l,p(" more "),u])}const b=a(c,[["render",r],["__file","自动注册全局组件.html.vue"]]);export{b as default};

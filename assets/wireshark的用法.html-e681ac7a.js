import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as p,c,e as t,f as e,b as i,d as s}from"./app-a40073bc.js";const h="/assets/a1-009b5c5c.png",n="/assets/a2-41d5bdb9.png",d="/assets/a3-348d39d5.png",l="/assets/b1-e81593d3.png",_="/assets/b2-02e8928e.png",u="/assets/c1-4b079f48.jpg",b="/assets/c2-01a12f22.jpg",m={},k=s('<h1 id="wireshark的用法" tabindex="-1"><a class="header-anchor" href="#wireshark的用法" aria-hidden="true">#</a> WireShark的用法</h1><h2 id="wireshark欢迎页" tabindex="-1"><a class="header-anchor" href="#wireshark欢迎页" aria-hidden="true">#</a> Wireshark欢迎页</h2><img src="'+h+'" width="900"><h2 id="确定抓包的网络" tabindex="-1"><a class="header-anchor" href="#确定抓包的网络" aria-hidden="true">#</a> 确定抓包的网络</h2><blockquote><p>运行 --&gt; cmd --&gt; 输入ipconfig 查看正在活动的网络</p></blockquote><img src="'+n+'" width="900"><h2 id="开启混杂抓包模式" tabindex="-1"><a class="header-anchor" href="#开启混杂抓包模式" aria-hidden="true">#</a> 开启混杂抓包模式</h2><blockquote><p>混杂抓包模式更强大, 建议开启</p></blockquote><blockquote><p>捕获选项卡 --&gt; 选项 --&gt; 开启混杂模式</p></blockquote><h2 id="捕获过滤" tabindex="-1"><a class="header-anchor" href="#捕获过滤" aria-hidden="true">#</a> 捕获过滤</h2><p>通过ip过滤包</p><blockquote><p>ip.addr == xxx 代表抓取请求发送方或者请求接受方为xxx的包</p><p>ip.src_host == 192.0.0.1 代表只抓取请求发送方为192.0.0.1的包</p><p>ip.dst_host == 118.2.1.2 代表只抓取接受方为118.2.1.2的包</p></blockquote><p>通过tcp过滤包</p><blockquote><p>tcp.flags.syn == 1 过滤SYN的包</p><p>tcp.flags.reset == 1 过滤RST包</p><p>tcp.analysis.retransmission 过滤重传包</p><p>tcp.analysis.zero_window 零窗口</p><p>tcp.port == 3000 代表值抓取tcp链接, 端口为3000的包</p></blockquote><p>通过http过滤包</p>',15),g={href:"http://www.baidu.com",target:"_blank",rel:"noopener noreferrer"},f=t("p",null,'http.request.method == "GET" 过滤http get请求',-1),w=t("p",null,"http.response.code == 200 通过状态码过滤http包",-1),q=t("p",null,'http.request.uri.contains "/api" 过滤url中有api路径的http包',-1),x=s('<p>通过时间过滤包</p><blockquote><p>http.time &gt; 0.5 过滤http请求大于0.5ms的包</p><p>tcp.time_delta &gt; 0.3 tcp某链接中两次包的数据间隔, 可以用这个分析TCP时间延迟</p><p>dns.time &gt; 0.5 dns的查询耗时</p></blockquote><img src="'+d+'" width="900"><h2 id="抓取回环数据" tabindex="-1"><a class="header-anchor" href="#抓取回环数据" aria-hidden="true">#</a> 抓取回环数据</h2><blockquote><p>比如本地8080接口前端页面请求3000服务器数据. 想抓取这个数据怎么办</p></blockquote><img src="'+l+'" width="900"><img src="'+_+'" width="900"><h2 id="tcp追踪流" tabindex="-1"><a class="header-anchor" href="#tcp追踪流" aria-hidden="true">#</a> TCP追踪流</h2><blockquote><p>可以对一个包追踪, 查询所属的会话流.</p><p>比如在检测网络时候, 访问了一次百度, 我们想抓取这个这次百度连接的所有包. 那么我们可以在列表中找到百度链接中的某一个包, 右键追踪TCP流, 可以显示这次http请求完整的报文信息, 包括请求报文和响应报文</p></blockquote><p>右键点击要追踪的数据包</p><img src="'+u+'" width="900"><img src="'+b+'" width="900">',12);function T(N,C){const a=r("ExternalLinkIcon");return p(),c("div",null,[k,t("blockquote",null,[t("p",null,[e("http.host == "),t("a",g,[e("www.baidu.com"),i(a)]),e(" 通过域名过滤http")]),f,w,q]),x])}const V=o(m,[["render",T],["__file","wireshark的用法.html.vue"]]);export{V as default};

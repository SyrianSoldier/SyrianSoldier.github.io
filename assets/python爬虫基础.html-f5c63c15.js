import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as p,c as o,e as n,f as i,b as c,d as s}from"./app-37bff081.js";const l={},u=s(`<h1 id="python爬虫基础" tabindex="-1"><a class="header-anchor" href="#python爬虫基础" aria-hidden="true">#</a> python爬虫基础</h1><h2 id="urllib" tabindex="-1"><a class="header-anchor" href="#urllib" aria-hidden="true">#</a> urllib</h2><blockquote><p>urllib是python内置的HTTP请求库, 企业中一般使用Requests库. 前者的好处是内置无需下载, 更接近底层, 能处理更多的细节.<br> 缺点是繁琐, 一些场景需要手动处理. Requests库是基于urllib和其他库集成的二次封装, 功能更强大</p></blockquote><h3 id="打开并读取网站-url-request-urlopen" tabindex="-1"><a class="header-anchor" href="#打开并读取网站-url-request-urlopen" aria-hidden="true">#</a> 打开并读取网站: url.request.urlopen</h3><p><strong>使用url.request访问获取百度html</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">&quot;&quot;</span>&quot;
<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopen

response <span class="token operator">=</span> urlopen<span class="token punctuation">(</span><span class="token string">&quot;http://www.baidu.com&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 访问url, 获取response对象</span>
content <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 读取二进制形式html, 并将其转为string</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>urlopen的一个类型6个方法</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
urlopen 方法返回的是一个类文件对象（file-like object），这个对象允许你像读取文件一样读取 HTTP 响应内容。这个对象具有一些特定的方法和属性，用于获取 HTTP 响应的信息。

以下是一些常用的方法和属性：

read()：读取响应的内容，可以指定读取的字节数。
readline()：逐行读取响应内容。
readlines()：读取所有行并返回一个列表。
getcode()：获取 HTTP 响应状态码。
geturl()：获取实际访问的 URL（可能会跟请求的 URL 不同，如果发生了重定向）。
info ()：获取 HTTP 响应头信息，返回一个类似字典的对象。
&quot;&quot;&quot;</span>

<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopen

response <span class="token operator">=</span> urlopen<span class="token punctuation">(</span><span class="token string">&quot;http://www.baidu.com&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 访问url, 获取response对象</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># HTTPResponse类型</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>getcode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 200</span>

headers <span class="token operator">=</span> response<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># headers为一个响应头对象, 获取并打印所有响应头</span>
<span class="token keyword">for</span> header<span class="token punctuation">,</span> value <span class="token keyword">in</span> headers<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>header<span class="token punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="下载网页资源-urlretrieve的使用" tabindex="-1"><a class="header-anchor" href="#下载网页资源-urlretrieve的使用" aria-hidden="true">#</a> 下载网页资源: urlretrieve的使用</h3><p><strong>urlretrieve类型</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ReportHook</span> <span class="token operator">=</span> <span class="token punctuation">(</span>cout<span class="token comment">/*已下载的块儿数*/</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> blockSize<span class="token comment">/*每块的字节数*/</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> totalSize<span class="token comment">/*总字节数*/</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>

<span class="token keyword">interface</span> <span class="token class-name">URLRetrieveOptions</span> <span class="token punctuation">{</span>
  url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  filename<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token comment">// 下载后的文件名</span>
  reporthook<span class="token operator">?</span><span class="token operator">:</span> ReportHook <span class="token comment">// 下载时的回调函数, 可以用于监控进度</span>
  data<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token comment">// 如果提供，应该是一个字节对象，将作为 POST 数据发送到 URL</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">URLRetrieveResult</span> <span class="token punctuation">{</span>
  filename<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token comment">//保存文件的路径。</span>
  headers<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">string</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">URLRetrieve</span> <span class="token operator">=</span> <span class="token punctuation">(</span>URLRetrieveOptions<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>URLRetrieveResult<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>urlretrieve的使用</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlretrieve


<span class="token keyword">def</span> <span class="token function">result_progress</span><span class="token punctuation">(</span>dowloaded_count<span class="token punctuation">,</span> block_size<span class="token punctuation">,</span> total_size<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># end默认值为/n换行, end=&#39;\\r&#39; 的作用是使用回车符 \\r 作为输出的结尾字符。回车符 \\r 会将光标移动到当前行的开头，而不换行。这意味着后续的输出会覆盖当前行的内容。</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>
        <span class="token string-interpolation"><span class="token string">f&quot;Donloaded: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">int</span><span class="token punctuation">(</span>dowloaded_count <span class="token operator">*</span> block_size <span class="token operator">/</span> total_size <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">%&quot;</span></span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot;\\r&quot;</span>
    <span class="token punctuation">)</span>


url <span class="token operator">=</span> <span class="token string">&quot;https://vdept3.bdstatic.com/mda-mfuf163rfmkn36i7/cae_h264_nowatermark/1624963807373246350/mda-mfuf163rfmkn36i7.mp4?v_from_s=hkapp-haokan-hbf&amp;auth_key=1719986700-0-0-3e228fbf951dc8715b925045260484b0&amp;bcevod_channel=searchbox_feed&amp;pd=1&amp;cr=0&amp;cd=0&amp;pt=3&amp;logid=0300230982&amp;vid=10554454971571011271&amp;klogid=0300230982&amp;abtest=101830_2-102148_1-17451_1-3000225_1&quot;</span>
urlretrieve<span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">&quot;./test.mp4&quot;</span><span class="token punctuation">,</span> result_progress<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reqeust的使用-带参数-data-headers-的请求" tabindex="-1"><a class="header-anchor" href="#reqeust的使用-带参数-data-headers-的请求" aria-hidden="true">#</a> Reqeust的使用-带参数(data,headers..)的请求</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> Request<span class="token punctuation">,</span> urlopen

<span class="token comment"># 1. 生成请求对象</span>
url <span class="token operator">=</span> <span class="token string">&quot;http://www.baidu.com&quot;</span>
headers <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;User-Agent&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36&quot;</span>
<span class="token punctuation">}</span>
request_obj <span class="token operator">=</span> Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>  <span class="token comment"># 这里必须指定关键词, 因为参数顺序不同</span>

<span class="token comment"># 2.发起请求</span>
response <span class="token operator">=</span> urlopen<span class="token punctuation">(</span>
    request_obj
<span class="token punctuation">)</span>  <span class="token comment"># urlopen第一个参数可以传string的url, 也可以传一个Request对象</span>

<span class="token comment"># 3. 读取,解码,并打印请求数据</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="url编码与quote函数" tabindex="-1"><a class="header-anchor" href="#url编码与quote函数" aria-hidden="true">#</a> URL编码与quote函数</h3><blockquote><p>js中发送请求不需要对url进行URL编码,是因为浏览器对每个请求有默认的编码功能. 但是url.<br> request既没有浏览器环境, 也没有对URL进行过多的处理, 所以发送请求时需要对URL特殊处理</p></blockquote><p>url.parse.quote函数是一个进行URL编码的函数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> quote

url <span class="token operator">=</span> quote<span class="token punctuation">(</span><span class="token string">&quot;https://www.baidu.com/s?wd=周杰伦&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="将字典转为query参数" tabindex="-1"><a class="header-anchor" href="#将字典转为query参数" aria-hidden="true">#</a> 将字典转为query参数</h3><blockquote><p>将字典转为query参数的形式, 并且将生成的query参数进行url编码</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlencode

<span class="token comment"># 输出: name=zhangsan&amp;age=18</span>
params <span class="token operator">=</span> urlencode<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="post请求获取百度翻译的结果" tabindex="-1"><a class="header-anchor" href="#post请求获取百度翻译的结果" aria-hidden="true">#</a> post请求获取百度翻译的结果</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlencode<span class="token punctuation">,</span> quote
<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> Request<span class="token punctuation">,</span> urlopen
<span class="token keyword">import</span> json

<span class="token comment"># 1.生成请求对象</span>
params <span class="token operator">=</span> Request<span class="token punctuation">(</span>
    method<span class="token operator">=</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span>  <span class="token comment"># 区分大小写</span>
    url<span class="token operator">=</span><span class="token string">&quot;https://fanyi.baidu.com/sug&quot;</span><span class="token punctuation">,</span>
    headers<span class="token operator">=</span><span class="token punctuation">{</span>
        <span class="token string">&quot;User-Agent&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment"># 在network可知该请求的编码格式application/x-www-form-urlencoded, 即将key-value的键值对放在请求体传输</span>
    <span class="token comment"># 故要先要将字典转为键值对字符串, 然后又因为data参数被要求时字节字符串格式, 还需要进行编码(注:python中编码就是将字符串转为字节字符串)</span>
    data<span class="token operator">=</span>urlencode<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;kw&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;英雄&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>

<span class="token comment"># 2. 发送请求</span>
response <span class="token operator">=</span> urlopen<span class="token punctuation">(</span>params<span class="token punctuation">)</span>

<span class="token comment"># 3. 解析响应结果(读取结果--&gt;解码--&gt;反序列化)</span>
content <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cookie与反爬" tabindex="-1"><a class="header-anchor" href="#cookie与反爬" aria-hidden="true">#</a> Cookie与反爬</h3>`,25),r={href:"https://www.bilibili.com/video/BV1SL4y1i7ZL/?spm_id_from=333.337.search-card.all.click&vd_source=20bf77d62633a13b190b5fb3785b2e34",target:"_blank",rel:"noopener noreferrer"},d=s(`<p>可以这样观察set-cookie的过程</p><ol><li>在chrome浏览器设置里手动清除cookie</li><li>重启浏览器, 打开百度</li><li>摁下f12,打开控制台</li><li>打开B站后, 可以在network中观察html中响应头有set-cookie, 在后续的请求的请求头中中有Cookie</li></ol><p><strong>注: 访问一个html, 可能涉及到其他请求(请求其他css,js,图片), 假如在html返回的响应头里有set-cookie,<br> 那么在该页面的所有后续请求头中都有cookie字段. 并且若set-cookie字段设置的是持久性cookie,<br> 直到过期时间到达或用户手动删除它们前, 重启浏览器并再次访问该网页时，这些 Cookie依然会被携带</strong></p><p>cookie中多存储身份信息(账号密码等)</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 具体代码和post请求百度没什么区别, 就是要注意, 有些API需要在请求头里携带Cookie访问, 不带访问不通</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="抓取豆瓣电影数据与with-as-json-dump函数的使用" tabindex="-1"><a class="header-anchor" href="#抓取豆瓣电影数据与with-as-json-dump函数的使用" aria-hidden="true">#</a> 抓取豆瓣电影数据与with..as, json.dump函数的使用</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> Request<span class="token punctuation">,</span> urlopen
<span class="token keyword">import</span> json

<span class="token comment"># 请求豆瓣排行榜json数据</span>
request <span class="token operator">=</span> Request<span class="token punctuation">(</span>
    method<span class="token operator">=</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span>
    url<span class="token operator">=</span><span class="token string">&quot;https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;start=0&amp;limit=20&quot;</span><span class="token punctuation">,</span>
    headers<span class="token operator">=</span><span class="token punctuation">{</span>
        <span class="token string">&quot;Cookie&quot;</span><span class="token punctuation">:</span> <span class="token string">&#39;ll=&quot;108199&quot;; bid=joYJqLtAFmc; _pk_ref.100001.4cf6=%5B%22%22%2C%22%22%2C1720010142%2C%22https%3A%2F%2Fwww.baidu.com%2Flink%3Furl%3DgeqoiqwgS4ibGjiAr8nYk3cLx8Q1HWuOlIQBnplGe7JI_elYLMCibOSJKSztGGOL%26wd%3D%26eqid%3D8a8432090076b0c50000000666854591%22%5D; _pk_id.100001.4cf6=bdafaa71f9526788.1720010142.; _pk_ses.100001.4cf6=1; __utma=30149280.1925336388.1720010142.1720010142.1720010142.1; __utmb=30149280.0.10.1720010142; __utmc=30149280; __utmz=30149280.1720010142.1.1.utmcsr=baidu|utmccn=(organic)|utmcmd=organic; __utma=223695111.953958908.1720010142.1720010142.1720010142.1; __utmb=223695111.0.10.1720010142; __utmc=223695111; __utmz=223695111.1720010142.1.1.utmcsr=baidu|utmccn=(organic)|utmcmd=organic; __yadk_uid=BxVw4c21gdefs9ixMeeF35TouPBfNMPp; ap_v=0,6.0; __gads=ID=bc3fcc74dca25807:T=1720010144:RT=1720010144:S=ALNI_MYALClZEvttEHotijTk5ybe2ylgyA; __gpi=UID=00000e711c3b870f:T=1720010144:RT=1720010144:S=ALNI_MajElrbN12fwkIO-TZmDpNq1RrNoA; __eoi=ID=5385e667ebffc925:T=1720010144:RT=1720010144:S=AA-AfjZKj-nXxGfGuqpcgM4vO36O; FCNEC=%5B%5B%22AKsRol9DOu7T43N5oXMqg1XKMyizjh143xpfZ-jVf-6Qsu8nZad2Tvvdk4n4JO80kVWakMtZhZkqoIYS1sOheX7OMubsC3Ov6ejvQccjWlgwo0j0JlUdrCGdCDJ7WskCSuc_26msUt1zV34cdKghyBFjYxz2vgArGw%3D%3D%22%5D%5D; _cc_id=c172068aa4674a2ecae791f749719777; panoramaId_expiry=1720096551300&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;User-Agent&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>

<span class="token comment"># 2. 提取json对象</span>
content <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 写入本地文件</span>
<span class="token comment"># with...as... 可以打开文件流, 并且自动捕获可能出现的异常, 自动在代码块结束后关闭文件流</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;./movies.json&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fs<span class="token punctuation">:</span>

    <span class="token comment"># json.dump函数可以向文件写入json数据的同时, 将json数据格式化</span>
    <span class="token comment"># json.dump(jsonObject:json对象, fileObject:可写入的文件对象, indent: 缩进, ensure_ascii:设置成false可以正确显示汉字 )</span>
    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>content<span class="token punctuation">,</span> fs<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="爬取指定开始到结束页的豆瓣电影数据" tabindex="-1"><a class="header-anchor" href="#爬取指定开始到结束页的豆瓣电影数据" aria-hidden="true">#</a> 爬取指定开始到结束页的豆瓣电影数据</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> Request<span class="token punctuation">,</span> urlopen
<span class="token keyword">import</span> json


<span class="token comment"># 封装支持分页的请求函数</span>
<span class="token keyword">def</span> <span class="token function">douban_request</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> limit<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> Request<span class="token punctuation">(</span>
        method<span class="token operator">=</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span>
        url<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f&quot;https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;start=</span><span class="token interpolation"><span class="token punctuation">{</span>start<span class="token punctuation">}</span></span><span class="token string">&amp;limit=</span><span class="token interpolation"><span class="token punctuation">{</span>limit<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span>
        headers<span class="token operator">=</span><span class="token punctuation">{</span>
            <span class="token string">&quot;Cookie&quot;</span><span class="token punctuation">:</span> <span class="token string">&#39;ll=&quot;108199&quot;; bid=joYJqLtAFmc; _pk_ref.100001.4cf6=%5B%22%22%2C%22%22%2C1720010142%2C%22https%3A%2F%2Fwww.baidu.com%2Flink%3Furl%3DgeqoiqwgS4ibGjiAr8nYk3cLx8Q1HWuOlIQBnplGe7JI_elYLMCibOSJKSztGGOL%26wd%3D%26eqid%3D8a8432090076b0c50000000666854591%22%5D; _pk_id.100001.4cf6=bdafaa71f9526788.1720010142.; _pk_ses.100001.4cf6=1; __utma=30149280.1925336388.1720010142.1720010142.1720010142.1; __utmb=30149280.0.10.1720010142; __utmc=30149280; __utmz=30149280.1720010142.1.1.utmcsr=baidu|utmccn=(organic)|utmcmd=organic; __utma=223695111.953958908.1720010142.1720010142.1720010142.1; __utmb=223695111.0.10.1720010142; __utmc=223695111; __utmz=223695111.1720010142.1.1.utmcsr=baidu|utmccn=(organic)|utmcmd=organic; __yadk_uid=BxVw4c21gdefs9ixMeeF35TouPBfNMPp; ap_v=0,6.0; __gads=ID=bc3fcc74dca25807:T=1720010144:RT=1720010144:S=ALNI_MYALClZEvttEHotijTk5ybe2ylgyA; __gpi=UID=00000e711c3b870f:T=1720010144:RT=1720010144:S=ALNI_MajElrbN12fwkIO-TZmDpNq1RrNoA; __eoi=ID=5385e667ebffc925:T=1720010144:RT=1720010144:S=AA-AfjZKj-nXxGfGuqpcgM4vO36O; FCNEC=%5B%5B%22AKsRol9DOu7T43N5oXMqg1XKMyizjh143xpfZ-jVf-6Qsu8nZad2Tvvdk4n4JO80kVWakMtZhZkqoIYS1sOheX7OMubsC3Ov6ejvQccjWlgwo0j0JlUdrCGdCDJ7WskCSuc_26msUt1zV34cdKghyBFjYxz2vgArGw%3D%3D%22%5D%5D; _cc_id=c172068aa4674a2ecae791f749719777; panoramaId_expiry=1720096551300&#39;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;User-Agent&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>


<span class="token comment"># 将json数据写入本地</span>
<span class="token keyword">def</span> <span class="token function">write_to_local</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 获取json数据</span>
    obj <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># 写入本地</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;./douban_movie_</span><span class="token interpolation"><span class="token punctuation">{</span>page<span class="token punctuation">}</span></span><span class="token string">.json&quot;</span></span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fs<span class="token punctuation">:</span>
        json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> fs<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    <span class="token comment"># 1. 获取爬取的开始和结束页码</span>
    start <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入开始页码: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    end <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入结束页码: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment"># 循环请求每一页数据</span>
    <span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 生成请求</span>
        request_obj <span class="token operator">=</span> douban_request<span class="token punctuation">(</span><span class="token punctuation">(</span>page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
        <span class="token comment"># 发起响应</span>
        response <span class="token operator">=</span> urlopen<span class="token punctuation">(</span>request_obj<span class="token punctuation">)</span>
        <span class="token comment"># 写入到本地</span>
        write_to_local<span class="token punctuation">(</span>response<span class="token punctuation">,</span> page<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="urlerror和httperror" tabindex="-1"><a class="header-anchor" href="#urlerror和httperror" aria-hidden="true">#</a> URLError和HTTPError</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> Request<span class="token punctuation">,</span> urlopen

<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>error <span class="token keyword">import</span> URLError<span class="token punctuation">,</span> HTTPError


<span class="token keyword">try</span><span class="token punctuation">:</span>
    response <span class="token operator">=</span> urlopen<span class="token punctuation">(</span>
        Request<span class="token punctuation">(</span>
            url<span class="token operator">=</span><span class="token string">&quot;http://ww25.asdasdasd.com/asd/asd?subid1=20240704-0056-3809-a1e6-ba15b98ac1f8&quot;</span><span class="token punctuation">,</span>
            method<span class="token operator">=</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span>
            headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
    content <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>
<span class="token keyword">except</span> HTTPError <span class="token keyword">as</span> e<span class="token punctuation">:</span>  <span class="token comment"># 注: URLError是HTTPError的子类, 要放在下面, 否则捕获不到</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;HTTP错误, 返回非200的错误状态码, 如4xx,5xx错误\\n</span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">.</span>code<span class="token punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">.</span>reason<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">except</span> URLError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;URL错误, 比如写错url了以及相关异常\\n</span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">.</span>reason<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function k(m,v){const a=t("ExternalLinkIcon");return p(),o("div",null,[u,n("p",null,[n("a",r,[i("Cookie的知识"),c(a)])]),d])}const h=e(l,[["render",k],["__file","python爬虫基础.html.vue"]]);export{h as default};

import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o,c as i,d as n}from"./app-e9ec3034.js";const p={},r=n('<h1 id="基于《小米创业思考》的职场思考" tabindex="-1"><a class="header-anchor" href="#基于《小米创业思考》的职场思考" aria-hidden="true">#</a> 基于《小米创业思考》的职场思考</h1><h2 id="专注" tabindex="-1"><a class="header-anchor" href="#专注" aria-hidden="true">#</a> 专注</h2><h3 id="_1-使命与愿景" tabindex="-1"><a class="header-anchor" href="#_1-使命与愿景" aria-hidden="true">#</a> 1. 使命与愿景</h3><div class="hint-container tip"><p class="hint-container-title">雷布斯语录</p><p>使命是存在的目的, 是为社会提供的价值, 而愿景是基于使命最终希望成为的样子.</p></div><div class="hint-container tip"><p class="hint-container-title">雷布斯语录</p><p>小米的使命: 做感动人心,价格厚道的产品, 愿景: 和用户交朋友,做用户心中最酷的公司</p></div><p>除了小米拥有使命和愿景以外, 其他的公司甚至我党也有自己的使命和愿景:</p><ul><li>党的使命: 全心全意为人民服务, 党的愿景: 建设社会主义现代化强国</li><li>百度使命: 用科技让复杂的世界变简单, 百度的愿景: 成为最懂用户, 并能帮助人们成长的全球顶级高科技公司</li></ul><p>可以发现, 使命这一概念强调了个体的&quot;社会价值&quot;, 是一个二元的, 抽象的, 并且十分感动的概念.</p><p>但做计划, 定目标如果用使命和愿景, 就太不合适了. 使命应该是&quot;生命存在的意义&quot;, 而目标只是生命里的一些节点, 是努力实现使命的手段.</p><p>我不知道自己的使命是什么, 我觉得自己还没有能力去改变世界, 去为这个社会做些贡献. 不过我可以尝试先定个目标, 给自己的生活找找方向.</p><div class="hint-container tip"><p class="hint-container-title">雷布斯语录</p><p>能能够脱颖而出的创业公司一开始都足够锐利, 因为做的事少, 反而非常专注. 但随着奔跑到一定规模后, 就容易迷失方向.这时就要有意识<br> 的进行收敛性的思考, 把当初&quot;为什么出发&quot;这个在内心鲜明存在, 但在团队中未曾说明的初心, 用简练,精准的语言提炼出来, 它将告诉你<br> &quot;公司从哪里来, 又将往何处去&quot;</p></div><p>我曾经努力学习前端技术, 用半年的时间做出了优秀的成绩. 学成以后在我面前有两条路, 一是做老师,工资高且稳定, 二是做开发<br> 工资稍低, 但加班严重</p><p>我用脚投票, 选择当老师. 然后折磨就开始了, 想辞职和不想辞职两种想法总是在我脑子里打架</p><p>想辞职的原因是, 觉得自己做老师学不到新技术, 技术停滞不前, 看不到未来的方向, 工作压力又大. 但! 就因为工资高迟迟不肯辞职.</p><p>现在想想, 雷布斯说的: &quot;奔跑到一定规模后, 就容易迷失方向&quot;真对吧, 社会上压力和诱惑那么多, 没有目标太容易迷失了.</p><p>而且尤其是在取得成功的时候, 因为已经实现一个阶段目标, 就更容易忽略接下来的决策是不是正确的.</p><p>&quot;我从何处来, 又将往何处去&quot;</p><h3 id="_2-专注与收敛" tabindex="-1"><a class="header-anchor" href="#_2-专注与收敛" aria-hidden="true">#</a> 2. 专注与收敛</h3><div class="hint-container tip"><p class="hint-container-title">雷布斯语录</p><p>一次解决一个最迫切的需求, 能最大化满足一项迫切需求, 就是巨大的成功</p></div><div class="hint-container tip"><p class="hint-container-title">雷布斯语录</p><p>克制贪婪, 少就是多</p></div><div class="hint-container tip"><p class="hint-container-title">雷布斯语录</p><p>单点突破, 逐步放大</p></div><div class="hint-container danger"><p class="hint-container-title">思考</p><p>问: 业务扩张与专注矛盾吗?<br> 答:</p><ol><li>是否符合公司使命, 愿景.</li><li>是否和公司业务形成强协同并形成闭环</li><li>能否为用户提供一致性体验</li><li>公司资源是否支持</li></ol><p>只有贯穿长期目标,始终围绕用户真实需求出发, 与核心业务构成强协同的业务拓展, 才能真正驱动企业发展的飞轮.<br> 而且每一项新业务的拓展都要以之前业务坚实的发展模型为基础, 这样才能保证每一个发展阶段都能集中精力, 专注的开拓一项业务</p></div><p>小米生态链公司即使满足了上述前三点, 也没有自己做(因为自己没有资源支撑100多个行业). 而自己专注手机, 生态链则是在小米的投资, 帮助下让别人做<br> (相当于节省了一笔资源)</p><div class="hint-container danger"><p class="hint-container-title">思考</p><p>不专注的后果:</p><p>在具体执行中，过去几年，小米的确在专注方面出现了问题。<br> 在一些业务中缺乏克制、业务失焦，<strong>既浪费了公司资源</strong>，也无端消耗了公司品牌资产，拖累了公司战略的聚焦推进，同时也对用<br> 户体验形成了伤害。</p><p>解决这个问题的关键就是“对表”，从上到下统一思路，既要有统一的专注目标，还要进行“校验”，时时检查保证不走偏。</p></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>容易实现的增长未必是高质量的增长，可能是资源的不合理消耗；<strong>成交金额增加未必是公司体质增强了，也可能是虚胖</strong>。在公<br> 司内，对于每一项业务，我们要反复问自己三个问题：</p><ol><li>我的业务增长为公司核心战路贡献了什么样的价值？</li><li>我的业务增长是否带动了公司包括核心业务在内的其他业务持续连带增长？</li><li>我的业务消耗了公司哪些资源？</li></ol></div><p>三个问题中的第一点和第二点主要还是强调了&quot;强协同&quot;, 第三点则强调了&quot;资源消耗&quot;, 也就是&quot;成本控制&quot;.</p><p>小米的生态链工程是外包给其他公司去做的, 自己提供帮助和扶持, 一方面&quot;生态链工程&quot;协同了核心的手机业务,<br> 另一方面, 外包的做法也降低了成本.</p><p>另外, 根据雷布斯的说法, 小米生态链和手机业务的协同是靠以下两点实现的</p><ol><li>吸引消费者注意力与引流:</li></ol><ul><li>手机的消费频度并不高,到2020年用户每25个月才换一次手机. 但生态链涉及100多个行业, 覆盖多种消费场景.<br> 让小米这个品牌总是活跃在更多用户的消费视野里, 那么当更新换代手机的时候就会产生引流.</li></ul><ol start="2"><li>品牌</li></ol><ul><li>通过在多行业存在的生态链, 向用户传递了小米品牌的&quot;高品质&quot;, &quot;高性价比&quot;, &quot;高颜值&quot;的品牌特点传递给用户, 从而产生下面的现象</li><li>今天我用了个小米吹风机, 挺不错的. 明天用了个小米充电宝, 挺不错的. 等到后天我想换手机了, 小米好像一直都挺不错的,要不看看吧?</li></ul><p>制定目标时候, 要从&quot;协同&quot;和&quot;成本&quot;两个角度去考虑. 不仅要协同, 且要&quot;强协同&quot;, 即A能帮助B, B也能帮助A.</p><p>对于&quot;容易实现的增长未必是高质量的增长，可能是资源的不合理消耗；成交金额增加未必是公司体质增强了，也可能是虚胖&quot; , 这句话简直是金玉良言.</p><p>还记得刚学前端的时候, 除了常规HTML+CSS+JS和Vue技术栈. 自己还额外去学了&quot;Vue源码&quot;, &quot;React及源码&quot;, &quot;Webpack源码&quot;,<br> &quot;typescript&quot;, &quot;设计模式&quot;, &quot;数据结构与算法&quot;</p><p>现在看来, 如果我以&quot;面试拿到更高的工资&quot;为目标, 这样的学习路线是没问题的, 面试官就喜欢问这些, 并且一般的公司也不会问多深.</p><p>但如果以&quot;成为一名同行翘大拇指的前端工程师&quot;为目标, 就完全是丧失专注. 到现在为止, 各种源码的精髓都没学到, 只学了大概, 水平也就是能跟<br> 面试官扯几句专业名词: 什么&quot;虚拟DOM&quot;, &quot;fiber&quot;, 完全没有内化成自己的编程素养.</p><p>这就是&quot;虚胖&quot;啊, 觉得的自己该很强了, 其实就是一坨而不自知, 白白消耗了自己时间资源.</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>OKR: 合理设定一系列“<strong>关键进展目标</strong>”，一步一步地向前，是不断获得正反馈、<br> 保证始终专注不偏航的非常好的方法：<strong>分解的颗粒度合适</strong>，就能极大减小跑偏的风险，也是对专注能力和方法的一次又一次训练。</p><p>第一，工具再好，用不好也是白费。专注意识真正成为集体共识<br> 并被认真践行，才能真正聚焦。<br> 第二，反对一切教条主义，专注边缘要有灰度。专注是目标一致，而不是教条地钉死有限目标。在核心方向一致的情况下，要<br> 留有适当的灰度和空间，这样才能释放创新潜能，在业务边缘始终留有创新的空间和活力。这一条的实现，需要靠价值观和组织<br> 文化，在本书后续“工程师文化”相关章节中再述。</p></div><p>分解的颗粒度合适, 这个真的很难做到.</p><p>一个任务, 做之前是不知道具体难度的, 我说用30分钟解决, 结果用了2个小时是很常见的.</p><p>能想到的办法是&quot;时刻看表&quot;, 比如我规定30分钟完成这个任务, 在20分钟左右的时候就该进入&quot;减速&quot;的状态,<br> 进入&quot;减速&quot;状态后, 剩下的10分钟里, 如果出现&quot;难理解的&quot;, 就该放到下个任务中处理, 先保证自己专注在当前任务<br> 整体性的理解</p><p>这也是&quot;克制贪婪&quot;的一种表现, 即不要想着&quot;一次性&quot;把问题搞的极为透彻, 不理解的别死磕, 先当答案背下来.</p><p>&quot;反对一切教条主义，专注边缘要有灰度。&quot;这句话说的也极到位.</p><p>不能太苛求自己, 比如自己的目标是&quot;成为一名同行翘大拇指的前端工程师&quot;, 但是有一天看见想去看看摄影, 可以嘛?<br> 也是可以的. 但一定要极为克制, 最少要明白自己要付出多少时间, 经历去做这件事, 会不会影响自己的核心目标.</p><h3 id="_3-对专注的总结与思考" tabindex="-1"><a class="header-anchor" href="#_3-对专注的总结与思考" aria-hidden="true">#</a> 3. 对专注的总结与思考</h3><div class="hint-container info"><p class="hint-container-title">一: 起足够&quot;激动人心&quot;的目标</p><p>做一名卓越的软件工程师&quot; <code>&lt;&lt;&lt;</code> &quot;做同行竖大拇指的前端工程师&quot; <code>&lt;&lt;&lt;</code> &quot;做同行都说吊的前端工程师&quot;</p></div><div class="hint-container info"><p class="hint-container-title">二: 把目标分解成合适的颗粒度</p><ol><li>OKR法拆解目标.</li><li>实现目标(无论日常目标,还是中期, 长期目标)时, 要时刻看表, 在进入后1/3时间时候, 要进入&quot;减速&quot;状态,<br> 适时放弃一些复杂问题, 把这些问题放到下一时间段解决. 不要等到deadline时任务完成的效果不好, 在心理上给自己加压.</li></ol></div><div class="hint-container info"><p class="hint-container-title">三: 添加新任务时, 要保持200%的谨慎</p><p>每新增一项任务一定要问自己以下几个问题</p><ol><li>是否与&quot;其他目标&quot;<strong>强协同</strong>? <ul><li><strong>水平对齐</strong>: 新增的任务如果是&quot;长期任务&quot;就应该跟&quot;其他长期任务&quot;强协同, 同理&quot;日任务&quot;要跟&quot;其他日任务&quot;强协同, 月任务也是同理.</li><li><strong>考虑全面</strong>: 这个月本来在学高等数学(为了考研), 就不应该新增&quot;了解python爬虫的任务&quot;, 不强协调.<br> 可以新增&quot;同时看其他老师的高等数学课&quot;, &quot;做一本练习册&quot;这样的任务. 但还要考虑下面的2,3点.</li></ul></li><li>预计<strong>花费多少资源</strong>(主要指时间资源), <strong>是否会挤占</strong>&quot;核心目标&quot;的时间<strong>资源</strong>?</li><li>不要教条主义, 留出一定的&quot;灰度&quot;, 允许自己&quot;玩乐&quot;, &quot;做感兴趣的事情&quot;.</li></ol></div><h2 id="快" tabindex="-1"><a class="header-anchor" href="#快" aria-hidden="true">#</a> 快</h2><div class="hint-container tip"><p class="hint-container-title">雷布斯语录</p><p>我们期待非常多的快，比如研发进展快、库存周转快、资金回笼快等等。但在这里，<br> 我们集中讨论的是公司在业务发展和面对用户反馈时，洞察、反应、决策、改善的速率问<br> 题。我相信，这是一家公司的底层核心素养和能力。有了这些“快的素养”和“快的能力”，<br> 研发进展、库存周转、资金回笼等各种“快的结果”自然纷至沓来。</p></div><p>这里的指的是&quot;解决问题&quot;的快.</p><div class="hint-container info"><p class="hint-container-title">雷布斯语录</p><p>小米在国内率先启动基于智能手机的即时消息项目“米聊”，一度获得显著的先发优势。</p><p>当时我有个判断，如果腾讯在一年之内没有反应，米聊将有50%的胜算；如果半年之内有反应，米聊基本没机会。</p><p>但结果，腾讯在一个月内就做出了反应，腾讯广研院迅速推出了微信，并获得了腾讯集团力量的大力支持。</p><p>在竞争背后，<strong>“快”更重要的意义在于企业/业务本身的成长效率</strong>，以及用户价值的提升预期和速率。</p></div><p>&quot;快一点&quot;<strong>不仅仅是要盯着别人</strong>, 比别人更快点, 赢得先机, 更重要的意义是<strong>盯着自己</strong>,&quot;让今天的效率比昨天更高些&quot;.</p><div class="hint-container danger"><p class="hint-container-title">思考</p><p>“快”作为一种素养，它的实现本身更是一种突出的系统能力。我们可以把快的四种能力总结为：洞察快、响应快、决策快、改善快。</p></div><p>之前对快的理解是完全错误的.</p><p>考研时候, 我老想着快点学完数学, 学完408. 于是我做了些什么事情呢?</p><p>我&quot;提高学习时间, 从一天6小时到一天12小时&quot;, &quot;提高专注力: 把手机放在一边, 打足精神看书&quot;, &quot;制作密密麻麻的计划, 把大计划计分解压在每一天&quot;</p><p>这些都是战术上的快, 诚然, 使用了这些策略后, 肯定比之前做的任务多些. 但这些策略并没有坚持多久, 就被新的问题打败了</p><ol><li>由于缺乏合理的休息机制等, 一天12小时的学习让我疲惫不堪.</li><li>每日计划制定的不合理, 导致从来完不成计划, 从而导致无比的焦虑.</li></ol><p>雷布斯的话是金玉良言. &quot;“快”作为一种素养，它的实现本身更是一种突出的系统能力&quot;</p><p>非常需要注意的是: <strong>这是一种系统能力!</strong></p><p>它不需要过度紧绷自己的精神, 让手脚格外的快, 而是让&quot;思维&quot;格外的快, 让&quot;反应&quot;格外的快, 让&quot;决策&quot;格外的快, 让&quot;改善&quot;格外的快.</p><p>摒弃&quot;遇到复杂问题时的焦虑&quot;, 快速思考出解决方案, 快速决策, 快速实施.</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>2012年时，我们应政府主管部门的要求立项红米手机，目标就是优选国内产业链，做<br> 国民手机。当时的国内产业链还不成熟，我们做的第一代产品内部测试体验并不理想，我<br> 非常不满意。到这时，我们在这款产品上的研发费用已经投入了4000多万元，开发团队经<br> 过讨论，一致同意，之前的4000多万元研发费用就当交学费了，整个项目推倒重来。</p><p>所以行业内看到的红米手机第一代，其实是我们研发的第二代，代号是H2。2013年7<br> 月31日，红米手机正式发布，震动整个业界，第一代单款产品卖出了4460万台。从那一天起，中国山寨手机业态迅速消亡</p></div><p>做出来的产品是一坨时, 我有推倒重来的勇气吗?</p><div class="hint-container danger"><p class="hint-container-title">警告</p><p>磨刀不误砍柴工，快与耐心并不冲突，在重大节点方面，还需要有更长远的眼光，宁<br> 可慢一些，想明白了再做决策，在战术执行上快的同时，战略上要走得更稳。不稳、不扎<br> 实，一定会造成不必要、不理智的急躁，迟早会出问题。</p><p>所以我认为，<strong>“战略积累快不得，战术演进慢不得”</strong>，为了更底层的坚定原则和更长远的发展，有时候，有局部的、阶段性的慢，才有全局的快。</p></div><p>战略积累快不得，战术演进慢不得</p><h2 id="极致" tabindex="-1"><a class="header-anchor" href="#极致" aria-hidden="true">#</a> 极致</h2><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>事实上，产品的发布不是终点，产品的发售也不是终点。互联网方法论告诉我们，产<br> 品卖出去时，才是跟用户关系的开始。产品也需要持续更新，一代一代迭代改善，改改改改再改改，是一条没有止境的路。</p></div><p>提出一个问题的解决方案不是结束, 而恰恰是开始. 对问题的不断迭代是一条没有止境的路</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>也许有人会怀疑，真的是每个品类、每个需求都存在最优解吗？在很多产品形态几年甚至十几年、几十年没有变化的领域，也是如此吗？</p></div><p>MIUI的小米计算器, 除了支持简单的四则运算外, 还可以定位计算的每个步骤, 另外还支持亲戚称谓换算, 带宽利率计算等等.</p><p>就连计算器也能做到行业的&quot;最优解&quot;, 要有一种信仰&quot;只要是还没有出现被公认最优解的地方，就有巨大的机会和空间。&quot;</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>极致是一枚尖锐的钉子，我们铆足了劲儿敲钉子时，要小心钉错了地方。<br> 追求极致切忌“盲目自我感动”，需要基于对行业、用户需求的深刻洞察，以&quot;专注&quot;的方向为指导，时时校验，防止跑错方向。</p><p>如果追求极致的努力不在用户需要的正确方向上，或者不在公司专注的方向上，那么<br> 花的力气越大，离题越远，此时的投入和努力只能沦为一种“秀情怀”的噱头，或者是一种<br> 无用的“炫技”，抑或是一种盲目的“自我感动”。</p><p>我们不仅反对“自嗨”和“自我感动”，更要反对把“极致”做成华而不实的噱头。比如10<br> 年前的消费电子行业，有人在手机机身镶嵌宝石作为核心卖点，有人把数码相机机身采用<br> 所谓“哥窑瓷”等作为核心卖点，这些不过是为了炫耀所谓的“极致奢华”来谋求溢价，但产品本身却稀松平常。缺乏诚意的产品显然只会迎来失败</p></div><p>以&quot;专注&quot;的方向为指导, 极致要在&quot;专注&quot;的框架内去追求. 否则就是本末倒置.</p><p>木匠将柜子的背板修整的好看是极致的表现, 但一个只有背板好看, 其他地方都做不好的柜子, 就不是极致.</p>',77),u=[r];function a(l,s){return o(),i("div",null,u)}const c=t(p,[["render",a],["__file","基于《小米创业思考》的职场思考.html.vue"]]);export{c as default};

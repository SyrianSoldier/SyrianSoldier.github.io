import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o,c as l,e as n,f as s,b as e,d as t}from"./app-af135bce.js";const c="/assets/1-75b1f176.png",u="/assets/5-df22d019.png",r="/assets/3-10df78f8.jpg",d="/assets/4-a6bf73a8.jpg",k="/assets/2-d9c6ad9b.jpg",v={},m=t(`<h1 id="spring-boot" tabindex="-1"><a class="header-anchor" href="#spring-boot" aria-hidden="true">#</a> spring boot</h1><div class="hint-container info"><p class="hint-container-title">Spring Boot</p><p>用Spring boot 编写一个CMS系统的节本接口</p></div><h2 id="maven基础知识" tabindex="-1"><a class="header-anchor" href="#maven基础知识" aria-hidden="true">#</a> Maven基础知识</h2><p>Maven 是一个开源的, 用于 Java 项目的包管理工具等。</p><h3 id="maven与npm的区别和联系" tabindex="-1"><a class="header-anchor" href="#maven与npm的区别和联系" aria-hidden="true">#</a> Maven与npm的区别和联系:</h3><blockquote><p>区别</p></blockquote><table><thead><tr><th>特性</th><th>Maven (Java)</th><th>npm (JavaScript)</th></tr></thead><tbody><tr><td><strong>语言/平台</strong></td><td>Maven 是 Java 项目管理工具。</td><td>npm 是 Node.js 和 JavaScript 项目的包管理工具。</td></tr><tr><td><strong>构建目标</strong></td><td>构建 JAR、WAR 文件。</td><td>构建 JavaScript 文件</td></tr><tr><td><strong>依赖仓库</strong></td><td>Maven 将所有包下载到本地全局仓库, 使用依赖坐标引用。</td><td>npm 有局部仓库和全局仓库, 引用时先引用局部仓库, 未找到再从全局仓库查找</td></tr><tr><td><strong>项目配置</strong></td><td>Maven 配置通过 <code>pom.xml</code> 文件进行。</td><td>npm 配置通过 <code>package.json</code> 文件进行。</td></tr><tr><td><strong>打包(构建)工具</strong></td><td>Maven 使用内置的插件和生命周期来自动化构建(打包)。</td><td>npm 使用脚本和外部工具（如 Webpack）来处理构建(打包)。</td></tr><tr><td><strong>包的下载方式</strong></td><td>Maven是先声明后下载, 下载自动化. 即在pop.xml中声明引用的包, maven自动将包下载本地仓库中</td><td>npm是先下载后声明, 声明自动化. 即开发者通过npm i 下载指定的包, npm自动在package.json中补全依赖包的版本信息</td></tr></tbody></table><blockquote><p>联系</p></blockquote><ul><li><p><strong>依赖管理</strong>：<br> Maven 和 npm 都是依赖管理工具，通过配置文件（<code>pom.xml</code> 或 <code>package.json</code>）管理项目所依赖的第三方库，简化了手动下载和管理依赖的过程。</p></li><li><p><strong>自动化构建</strong>：<br> 两者都支持自动化构建过程，开发者只需定义所需的构建步骤，工具会根据配置自动执行。Maven 通过生命周期和插件实现自动化，而 npm 则通过 <code>scripts</code> 和包管理工具（如 Webpack）来实现。</p></li></ul><h3 id="maven的配置" tabindex="-1"><a class="header-anchor" href="#maven的配置" aria-hidden="true">#</a> Maven的配置</h3><p>Maven将所有的包下载到本地全局, 并允许开发者指定下载的镜像源, 包的存储目录. 如果不设置下载的镜像源可能会导致下载速度慢, 不设置包的存储目录, 可能会导致C盘磁盘爆满</p><p>在 <code>Maven安装目录/conf/settings.xml</code>打开Maven配置文件settings.xml, 做如下配置</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 修改依赖安装位置 --&gt;</span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">&gt;</span></span>D:\\maven\\repo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 新增镜像源 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://maven.aliyun.com/nexus/content/groups/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="依赖坐标" tabindex="-1"><a class="header-anchor" href="#依赖坐标" aria-hidden="true">#</a> 依赖坐标</h3><p>Maven使用组织名(groupId) + 项目名(artifactId) + 版本号(version)来唯一标识一个包</p><p>比如</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该依赖声明, 组织为&quot;junit&quot;, 项目名也为&quot;junit&quot;, 版本号为&quot;3.8.1&quot;, 作用域为&quot;test&quot;, 表示该依赖只在测试时使用</p><p>注: junit是一个用于java的单元测试库</p><h2 id="用vscode创建maven项目" tabindex="-1"><a class="header-anchor" href="#用vscode创建maven项目" aria-hidden="true">#</a> 用vscode创建MAVEN项目</h2><h3 id="安装java插件" tabindex="-1"><a class="header-anchor" href="#安装java插件" aria-hidden="true">#</a> 安装java插件</h3><figure><img src="`+c+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>该插件提供了以下支持</p><p>📦 Java™ 语言支持</p><ul><li><p>📦 <strong>Java 语言支持</strong></p><ul><li>代码导航</li><li>自动补全</li><li>代码片段</li></ul></li><li><p>📦 <strong>Java 调试器</strong></p><ul><li>调试功能</li></ul></li><li><p>📦 <strong>Java 测试运行器</strong></p><ul><li>运行与调试测试用例</li></ul></li><li><p>📦 <strong>Maven for Java</strong></p><ul><li>创建Maven项目</li></ul></li><li><p>📦 <strong>Java 项目管理器</strong></p><ul><li>管理 Java 项目、引用的库、资源文件、包、类和类成员</li></ul></li><li><p>📦 <strong>Visual Studio IntelliCode</strong></p><ul><li>AI 辅助开发</li><li>基于 AI 排序的自动补全列表</li></ul></li></ul><figure><img src="'+u+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>该插件提供了对XML文件的格式话的能力</p><h3 id="创建maven项目" tabindex="-1"><a class="header-anchor" href="#创建maven项目" aria-hidden="true">#</a> 创建Maven项目</h3><ol><li><p>在vscode中打开命令面板(ctrl + shift + p), 输入 create java project</p><ul><li><img src="'+r+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></li></ul></li><li><p>选择通过maven创建项目</p><ul><li><img src="'+d+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></li></ul></li><li><p>填写Maven相关信息</p><ul><li><img src="'+k+`" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></li></ul></li></ol><p>注:<br> Maven 的 archetype 是一种项目模板(相当于vue,react的脚手架模板)，它定义了项目的基本结构和内容，提供了一个骨架，帮助开发者在短时间内生成一个标准化的 Maven 项目。</p><p>常见的 Archetype 类型<br> maven-archetype-quickstart：创建一个简单的 Java 项目，适用于大多数基础应用。<br> maven-archetype-webapp：创建一个基本的 Web 应用程序，适用于 Java Web 开发。<br> maven-archetype-site：用于生成一个包含网站结构的项目。<br> maven-archetype-j2ee：用于创建 J2EE 项目，适合构建企业级应用。<br> maven-archetype-plugin：用于创建一个 Maven 插件项目。</p><h2 id="编写hello-world接口" tabindex="-1"><a class="header-anchor" href="#编写hello-world接口" aria-hidden="true">#</a> 编写Hello, world接口</h2><div class="hint-container info"><p class="hint-container-title">接口说明</p><p>当在浏览器访问 <code>/hello</code> 时(get请求), 可以得到后端响应的hello, world字符串</p></div><h3 id="编写pop-xml文件-引入spring-boot依赖" tabindex="-1"><a class="header-anchor" href="#编写pop-xml文件-引入spring-boot依赖" aria-hidden="true">#</a> 编写pop.xml文件, 引入spring-boot依赖</h3><p>SpringBoot提供了非常多的功能, 可以按需引入对应的包依赖, 以下</p><table><thead><tr><th>起步依赖 (Starter)</th><th>描述</th></tr></thead><tbody><tr><td><code>spring-boot-starter-web</code></td><td>用于开发 Web 应用，包括 RESTful 应用。包含了 Spring MVC、Tomcat 等常用库。</td></tr><tr><td><code>spring-boot-starter-data-jpa</code></td><td>集成 Spring Data JPA，用于简化数据库操作，支持 JPA 和 Hibernate。</td></tr><tr><td><code>spring-boot-starter-data-mongodb</code></td><td>集成 Spring Data MongoDB，支持 MongoDB 数据库的操作。</td></tr><tr><td><code>spring-boot-starter-thymeleaf</code></td><td>集成 Thymeleaf 模板引擎，用于创建动态 HTML 页面。</td></tr><tr><td><code>spring-boot-starter-security</code></td><td>提供 Spring Security 支持，用于构建安全的 Web 应用程序，包括身份验证和授权。</td></tr><tr><td><code>spring-boot-starter-mail</code></td><td>用于发送邮件，集成 JavaMail 和 Spring Email API。</td></tr><tr><td><code>spring-boot-starter-actuator</code></td><td>提供用于监控和管理应用程序的功能，如健康检查、度量指标等。</td></tr><tr><td><code>spring-boot-starter-logging</code></td><td>默认集成了 SLF4J 和 Logback，用于日志记录。</td></tr><tr><td><code>spring-boot-starter-cache</code></td><td>用于缓存功能的支持，集成了多种缓存实现（如 EhCache、Redis）。</td></tr><tr><td><code>spring-boot-starter-logging</code></td><td>集成日志记录功能，默认使用 Logback 作为日志框架。</td></tr><tr><td><code>spring-boot-starter-validation</code></td><td>集成 JSR-303 和 JSR-380（Bean Validation 2.0）标准，用于参数和对象验证。</td></tr><tr><td><code>spring-boot-starter-batch</code></td><td>用于构建批处理应用程序，支持 Spring Batch。</td></tr><tr><td><code>spring-boot-starter-freemarker</code></td><td>集成 Freemarker 模板引擎，用于创建动态 HTML 页面。</td></tr><tr><td><code>spring-boot-starter-redis</code></td><td>集成 Spring Data Redis，支持 Redis 数据库操作。</td></tr><tr><td><code>spring-boot-starter-activemq</code></td><td>集成 ActiveMQ，用于消息队列的支持。</td></tr><tr><td><code>spring-boot-starter-rabbitmq</code></td><td>集成 RabbitMQ，用于消息队列的支持。</td></tr><tr><td><code>spring-boot-starter-webflux</code></td><td>用于开发响应式 Web 应用程序，支持 WebFlux 框架。</td></tr><tr><td><code>spring-boot-starter-jdbc</code></td><td>用于集成 JDBC，简化数据库操作。</td></tr><tr><td><code>spring-boot-starter-quartz</code></td><td>用于集成 Quartz 定时任务框架。</td></tr><tr><td><code>spring-boot-starter-jetty</code></td><td>集成 Jetty 作为 Web 服务器，替代默认的 Tomcat。</td></tr><tr><td><code>spring-boot-starter-tomcat</code></td><td>集成 Tomcat 作为 Web 服务器（默认）。</td></tr><tr><td><code>spring-boot-starter-log4j2</code></td><td>集成 Log4j2 用作日志框架。</td></tr><tr><td><code>spring-boot-starter-sql</code></td><td>提供对 SQL 数据库的支持，通常与 JDBC 或 JPA 一起使用。</td></tr><tr><td><code>spring-boot-starter-hateoas</code></td><td>用于构建 HATEOAS 风格的 REST API。</td></tr><tr><td><code>spring-boot-starter-oauth2-client</code></td><td>支持 OAuth2 客户端功能，集成 Spring Security OAuth2。</td></tr><tr><td><code>spring-boot-starter-oauth2-resource-server</code></td><td>支持 OAuth2 资源服务器功能，集成 Spring Security OAuth2 作为资源服务器。</td></tr><tr><td><code>spring-boot-starter-logging</code></td><td>集成了 SLF4J 和 Logback，提供日志记录的默认实现。</td></tr></tbody></table><h3 id="spring-boot-starter-parent依赖" tabindex="-1"><a class="header-anchor" href="#spring-boot-starter-parent依赖" aria-hidden="true">#</a> spring-boot-starter-parent依赖</h3><p>spring-boot-starter-parent 是主要作用是为 Spring Boot 项目提供默认配置和依赖管理。他可以为所有spring-boot的提供版本管理, 从而不用显式的声明spring其他依赖的版本号(versionId), 简化依赖管理。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="spring-boot-starter-web依赖" tabindex="-1"><a class="header-anchor" href="#spring-boot-starter-web依赖" aria-hidden="true">#</a> spring-boot-starter-web依赖</h3><p>spring-boot-starter-web 是spring-boot提供的用于编写RestFUL接口的依赖, 写接口必装</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编写启动类" tabindex="-1"><a class="header-anchor" href="#编写启动类" aria-hidden="true">#</a> 编写启动类</h3><p>将App.java改成以下格式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>

<span class="token comment">// 1. 添加SpringBootApplication注解</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 2. 启动Spring Boot应用程序固定代码</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">App</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="添加spring-boot配置文件" tabindex="-1"><a class="header-anchor" href="#添加spring-boot配置文件" aria-hidden="true">#</a> 添加spring-boot配置文件</h3><ol><li>在src/main下新建resources目录</li><li>在resources下新建application.yml文件</li></ol><p>注意:</p><ol><li>resources的目录路径, 名字和application.yml不能拼错</li><li>yml文件值的前面必须有空格, 变量之间通过缩进表示层级关系</li></ol><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token comment"># 设置app的端口号, 默认是8080</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3000</span>
  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>
    <span class="token comment"># 设置接口的根目录, 默认是/</span>
    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /api

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编写controler" tabindex="-1"><a class="header-anchor" href="#编写controler" aria-hidden="true">#</a> 编写controler</h3><p>新建如下目录与文件: src/main/java/com/example/controller/HelloController.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="spring-boot项目目录" tabindex="-1"><a class="header-anchor" href="#spring-boot项目目录" aria-hidden="true">#</a> Spring-boot项目目录</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>src<span class="token operator">/</span>main<span class="token operator">/</span>java<span class="token operator">/</span>com<span class="token operator">/</span>example<span class="token operator">/</span>project
├── controller        # <span class="token function">控制层</span><span class="token punctuation">(</span>存放接口的定义<span class="token punctuation">)</span>
├── service           # <span class="token function">服务层</span><span class="token punctuation">(</span>存放业务逻辑接口的定义以及类实现<span class="token punctuation">)</span>
│   ├── impl          # 存放业务实现类
├── <span class="token function">pojo</span><span class="token punctuation">(</span>或者modal<span class="token punctuation">)</span>   # <span class="token function">数据模型</span><span class="token punctuation">(</span>用于定义数据结构类<span class="token punctuation">,</span> 封装数据库查出来的数据<span class="token punctuation">)</span>
├── config            # 配置类
├── exception         # 异常处理
├── security          # 安全配置
├── utils             # 工具类
├── resources         # 存放所有非 Java 源代码的资源文件，如静态文件、模板文件等。
│    └── application<span class="token punctuation">.</span>yml    # spring<span class="token operator">-</span>boot项目配置
└── test              # 测试类
    ├── controller    # 控制器测试
    └── service       # 服务测试
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="读取spring-boot项目自定义配置信息" tabindex="-1"><a class="header-anchor" href="#读取spring-boot项目自定义配置信息" aria-hidden="true">#</a> 读取spring-boot项目自定义配置信息</h2><p>完成以下需求</p><ol><li><strong>数据层</strong>: 在applicaiton.yml中封装一些自定义信息</li><li><strong>modal层</strong>: 将信息封装到实体类当中</li><li><strong>service层:</strong> 在service层中读取实体类当中的信息, 并返回出去, 提供给上层调用</li><li><strong>controller层</strong> :定义接口, 调用service层, 并将信息返回给前端</li></ol><p>applicaiton.yml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># yml中表现对象的写法</span>
<span class="token key atrule">custom-config</span><span class="token punctuation">:</span>
  <span class="token comment"># yml中表现数组的写法</span>
  <span class="token key atrule">languages</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> en
    <span class="token punctuation">-</span> fr
    <span class="token punctuation">-</span> es
  <span class="token key atrule">cur-lang</span><span class="token punctuation">:</span> zh

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新建modal/LanguageConfig.java</p>`,61),b={href:"https://www.cnblogs.com/rivers-all/p/17376322.html",target:"_blank",rel:"noopener noreferrer"},g=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>modal</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token comment">// 1. 使用@Component注解，自动将该类注册到Spring容器中，作为一个Bean进行管理</span>
<span class="token annotation punctuation">@Component</span>
<span class="token comment">// 2. 使用@ConfigurationProperties注解，指定从yml配置文件中加载&quot;custom-config&quot;前缀的属性</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;custom-config&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LanguageConfigModal</span> <span class="token punctuation">{</span>

  <span class="token comment">// 3. 定义属性，以封装yml中配置的值</span>
  <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> languages<span class="token punctuation">;</span> <span class="token comment">// 用于存储语言列表</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> curLang<span class="token punctuation">;</span> <span class="token comment">// 用于存储当前语言</span>

  <span class="token comment">// 4. 提供getter和setter方法，供外部访问和修改属性值</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCurLang</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> curLang<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCurrentLang</span><span class="token punctuation">(</span><span class="token class-name">String</span> currentLang<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>curLang <span class="token operator">=</span> currentLang<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getLanguages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> languages<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLanguages</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> languages<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>languages <span class="token operator">=</span> languages<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新建service/LanguageService.java, 用来存放service层的接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>modal<span class="token punctuation">.</span></span><span class="token class-name">LanguageConfigModal</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LanguageService</span> <span class="token punctuation">{</span>

  <span class="token class-name">LanguageConfigModal</span> <span class="token function">getLanguages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新建service/impl/LanguageServiceImpl.java, 用来存放service层的实现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>modal<span class="token punctuation">.</span></span><span class="token class-name">LanguageConfigModal</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">LanguageService</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LanguageServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">LanguageService</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1. 添加@Autowired注解. @Autowired注解的作用是会自动将IOC容器中的Bean对象, 和当前属性声明的对象做对比, 然后自动注入</span>
  <span class="token annotation punctuation">@Autowired</span>
  <span class="token keyword">private</span> <span class="token class-name">LanguageConfigModal</span> langs<span class="token punctuation">;</span>

  <span class="token comment">// 2. 定义服务层返回数据的方法</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">LanguageConfigModal</span> <span class="token function">getLanguages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> langs<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mybatis" tabindex="-1"><a class="header-anchor" href="#mybatis" aria-hidden="true">#</a> Mybatis</h2><p><strong>MyBatis</strong> 是一个ORM(即操作数据库)框架，主要用于在 Java 应用中执行 SQL 语句。它通过 XML 或注解的方式将 SQL 映射到 Java 方法，实现数据库操作。与完全的 ORM 框架不同，MyBatis 需要开发者手写 SQL 语句，并且更加灵活，适用于复杂查询。</p><h3 id="对比-mybatis、typeorm-和-sequelize" tabindex="-1"><a class="header-anchor" href="#对比-mybatis、typeorm-和-sequelize" aria-hidden="true">#</a> 对比：MyBatis、TypeORM 和 Sequelize</h3><table><thead><tr><th>方面</th><th><strong>MyBatis</strong></th><th><strong>TypeORM</strong></th><th><strong>Sequelize</strong></th></tr></thead><tbody><tr><td><strong>支持的语言</strong></td><td>Java</td><td>TypeScript/JavaScript</td><td>JavaScript</td></tr><tr><td><strong>支持的数据库</strong></td><td>支持 MySQL、PostgreSQL、Oracle、SQLServer 等</td><td>支持 MySQL、PostgreSQL、MariaDB 等</td><td>支持 MySQL、PostgreSQL、SQLite 等</td></tr><tr><td><strong>建立和数据库连接的方式</strong></td><td>既可通过API手动创建连接(<code>new SqlSessionFactory()</code>), 也可通过配置文件自动创建连接</td><td>既可通过API手动创建连接(<code>createConnection()</code>), 也可通过配置文件自动创建连接</td><td>通过API (<code>new Sequelize()</code>) 创建连接</td></tr><tr><td><strong>CRUD 的方式</strong></td><td>通过 Mapper 文件手写 SQL 语句</td><td>使用实体类方法（如 <code>.save()</code>、<code>.find()</code>)</td><td>使用模型方法（如 <code>.create()</code>、<code>.findAll()</code>)</td></tr><tr><td><strong>是否需要写 SQL 语句</strong></td><td>需要手写 SQL 语句</td><td>一般不需要手写 SQL，但也提供了执行手写SQL的API</td><td>不需要手写 SQL，但也提供了执行手写SQL的API</td></tr><tr><td><strong>创建数据库表的方式</strong></td><td>不提供自动生成表功能，需要手动创建表</td><td>通过定义Modal(数据模型)对象自动生成表结构</td><td>通过定义Modal(数据模型)对象自动生成表结构</td></tr></tbody></table><h3 id="详细对比" tabindex="-1"><a class="header-anchor" href="#详细对比" aria-hidden="true">#</a> 详细对比</h3><h4 id="_1-建立和数据库连接的方式" tabindex="-1"><a class="header-anchor" href="#_1-建立和数据库连接的方式" aria-hidden="true">#</a> 1.建立和数据库连接的方式</h4><ul><li><strong>MyBatis</strong>： 通过 配置文件创建和数据库连接</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mydb
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> password
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
  <span class="token key atrule">mybatis</span><span class="token punctuation">:</span>
    <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/<span class="token important">**/*.xml</span>
    <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.example.domain
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>TypeORM</strong>： 通过 API建立连接</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createConnection <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>

<span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&quot;mysql&quot;</span><span class="token punctuation">,</span>
  host<span class="token operator">:</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span>
  port<span class="token operator">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>
  username<span class="token operator">:</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span>
  password<span class="token operator">:</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span>
  database<span class="token operator">:</span> <span class="token string">&quot;mydb&quot;</span><span class="token punctuation">,</span>
  entities<span class="token operator">:</span> <span class="token punctuation">[</span>User<span class="token punctuation">]</span><span class="token punctuation">,</span>
  synchronize<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Sequelize：</strong> 使用 new Sequelize() 创建数据库连接：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> Sequelize <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;sequelize&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> sequelize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sequelize</span><span class="token punctuation">(</span><span class="token string">&#39;mysql://root:password@localhost:3306/mydb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-建立和数据库连接的方式" tabindex="-1"><a class="header-anchor" href="#_2-建立和数据库连接的方式" aria-hidden="true">#</a> 2.建立和数据库连接的方式</h4><ul><li><strong>MyBatis：</strong> 通过XML手写 SQL 语句</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectUserById<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>User<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  SELECT * FROM users WHERE id = #{id}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 调用 --&gt;</span>
User user = sqlSession.selectOne(&quot;selectUserById&quot;, 1);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>TypeORM：</strong> 不需要手写SQL, 通过API进行CRUD</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> userRepository <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getRepository</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Sequelize：</strong> 不需要手写SQL, 通过API进行CRUD</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> User <span class="token operator">=</span> sequelize<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&#39;User&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> DataTypes<span class="token punctuation">.</span><span class="token constant">STRING</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编写一个mybatis的案例" tabindex="-1"><a class="header-anchor" href="#编写一个mybatis的案例" aria-hidden="true">#</a> 编写一个Mybatis的案例</h3><h4 id="创建数据库-表" tabindex="-1"><a class="header-anchor" href="#创建数据库-表" aria-hidden="true">#</a> 创建数据库, 表</h4><ul><li>建表语句语法</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> table_name <span class="token punctuation">(</span>
    column1 datatype <span class="token punctuation">[</span>constraints<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">-- datatype为数据类型</span>
    column2 datatype <span class="token punctuation">[</span>constraints<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">-- [constraints] 是可选的字段级别约束，可以限制数据的格式、唯一性、是否允许为空等。</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">[</span>table_constraints<span class="token punctuation">]</span>  <span class="token comment">-- 这是表级别的约束，可以用来定义表的主键、外键、唯一性约束等。</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>插入语法</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 单行插入</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name<span class="token punctuation">(</span>fileds1<span class="token punctuation">,</span> fileds2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> 
<span class="token keyword">VALUES</span> 
  <span class="token punctuation">(</span>values1<span class="token punctuation">,</span> values2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>

<span class="token comment">-- 插入多行</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name<span class="token punctuation">(</span>fileds1<span class="token punctuation">,</span> fileds2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> 
<span class="token keyword">VALUES</span> 
  <span class="token punctuation">(</span>values1<span class="token punctuation">,</span> values2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span>values1<span class="token punctuation">,</span> values2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span>values1<span class="token punctuation">,</span> values2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>其他细节</li></ul><ol><li>在 SQL 中，反引号 \` 是用来引用数据库、表名或列名的符号</li><li>COMMENT 关键字用于为数据库对象（如数据库、表、列）添加注释，以帮助描述字段或表的用途和含义。添加注释有助于代码可读性，让开发者或数据库管理员更容易理解数据结构。</li></ol><ul><li>常见的数据类型</li></ul><table><thead><tr><th><strong>数据类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><code>INT</code></td><td>整数类型，用于存储整数数据。</td></tr><tr><td><code>VARCHAR(n)</code></td><td>可变长度字符串，<code>n</code> 为最大字符数。</td></tr><tr><td><code>CHAR(n)</code></td><td>固定长度字符串，<code>n</code> 为字符数。</td></tr><tr><td><code>DATE</code></td><td>日期类型，存储日期信息（年-月-日）。</td></tr><tr><td><code>TIMESTAMP</code></td><td>时间戳类型，存储日期和时间信息。</td></tr><tr><td><code>DECIMAL(p, s)</code></td><td>定点数类型，<code>p</code> 为总位数，<code>s</code> 为小数位数。</td></tr></tbody></table><ul><li>常见的约束条件</li></ul><table><thead><tr><th><strong>约束条件</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><code>PRIMARY KEY</code></td><td>主键约束，保证该列的值唯一且不能为 <code>NULL</code>。</td></tr><tr><td><code>NOT NULL</code></td><td>该列不能为 <code>NULL</code>，必须提供值。</td></tr><tr><td><code>UNIQUE</code></td><td>该列的值必须唯一。</td></tr><tr><td><code>DEFAULT</code></td><td>为该列指定默认值，如果插入时未提供值则使用默认值。</td></tr><tr><td><code>AUTO_INCREMENT</code></td><td>自动递增（MySQL特有），通常用于主键字段，自增长时自动生成唯一值。</td></tr><tr><td><code>CHECK</code></td><td>为该列指定一个条件，值必须符合该条件（并非所有数据库都支持）。</td></tr><tr><td><code>FOREIGN KEY</code></td><td>外键约束，指定该列为外键，引用另一个表的主键或唯一键。</td></tr></tbody></table><ol><li>建一个用户表</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建数据库</span>
<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">\`</span>spring-boot-demo<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>

<span class="token comment">-- 使用数据库</span>
<span class="token keyword">USE</span> <span class="token identifier"><span class="token punctuation">\`</span>spring-boot-demo<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>

<span class="token comment">-- 创建表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>users<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token comment">-- id 字段，作为主键，自动递增</span>
  <span class="token identifier"><span class="token punctuation">\`</span>username<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户名&#39;</span><span class="token punctuation">,</span> <span class="token comment">-- 用户名，最大长度为 50 个字符，不能为空</span>
  <span class="token identifier"><span class="token punctuation">\`</span>password<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;密码&#39;</span><span class="token punctuation">,</span> <span class="token comment">-- 密码，最大长度为 100 个字符，不能为空</span>
  <span class="token identifier"><span class="token punctuation">\`</span>email<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;邮箱&#39;</span> <span class="token comment">-- 邮箱，最大长度为 100 个字符，可以为空</span>
<span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token operator">=</span> <span class="token string">&#39;用户表&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 插入数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>users<span class="token punctuation">\`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>username<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>password<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>email<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token keyword">VALUES</span>
  <span class="token punctuation">(</span><span class="token string">&#39;ZhangSan&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ZhangSan@126.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token string">&#39;LiSi&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;LiSi@126.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token string">&#39;WangWu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;WangWu@126.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>编写application.yml</li></ol><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token comment"># java与数据库连接需要遵循jdbc规范, 其中一条即是数据库连接字符串</span>
    <span class="token comment"># 要求格式为 jdbc:[数据库软件名称]://[数据库软件域名]/数据库名</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>demo
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root        <span class="token comment"># 数据库用户名</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span> password    <span class="token comment"># 数据库密码</span>
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>添加mysql和mybatis依赖</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- Spring Boot Starter MyBatis --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

  <span class="token comment">&lt;!-- MySQL Driver --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>编写实体类(Modal层)</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>modal</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserModal</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> id<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> username<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token class-name">String</span> email<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> email<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> password<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>编写Mapper接口</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Mapper</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Select</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>modal<span class="token punctuation">.</span></span><span class="token class-name">UserModal</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;select * from users where id = #{id}&quot;</span><span class="token punctuation">)</span>
  <span class="token class-name">UserModal</span> <span class="token function">findUserById</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>编写Service层</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">UserMapper</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>modal<span class="token punctuation">.</span></span><span class="token class-name">UserModal</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">UserService</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Autowired</span>
  <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">UserModal</span> <span class="token function">findUserById</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">findUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li>编写Controller层</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>modal<span class="token punctuation">.</span></span><span class="token class-name">UserModal</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">UserServiceImpl</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestParam</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Autowired</span>
  <span class="token keyword">private</span> <span class="token class-name">UserServiceImpl</span> userService<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token class-name">UserModal</span> <span class="token function">findUserById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">findUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bean" tabindex="-1"><a class="header-anchor" href="#bean" aria-hidden="true">#</a> Bean</h3><h4 id="javabean与springbean" tabindex="-1"><a class="header-anchor" href="#javabean与springbean" aria-hidden="true">#</a> JavaBean与SpringBean</h4><blockquote><p>JavaBean 是一种遵循特定规范(实际是约定)的 Java 类，通常用于封装数据。它具有以下特点：</p></blockquote><ol><li>所有属性为private</li><li>提供默认构造方法</li><li>提供getter和setter</li><li>实现serializable接口</li></ol>`,54),y={href:"https://www.zhihu.com/question/19773379/answer/3249237003",target:"_blank",rel:"noopener noreferrer"},h=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>

    <span class="token comment">// 公共无参构造函数</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Getter 和 Setter 方法</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> username<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> password<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>SpringBean 在 Spring 框架中，&quot;Bean&quot; 是一种受 Spring IOC 容器管理的对象, 需要满足以下条件</p></blockquote><ol><li>类应该是一个<strong>有效的 Java 类</strong></li><li>类必须具有可访问的构造方法(<strong>默认使用无参构造创建, 若没有提供无参构造则Spring会尝试用有参构造创建Bean</strong>)</li><li>该类需要进行注册(通过注解或xml的方式)</li><li>符合组件扫描(Component Scanning)的条件. <ul><li>Spring会自动扫描某些目录, 将该目录下注册过的类实例化并注入到IOC容器中, 成为Bean对象.</li><li>Bean类需要放在扫描的范围内</li><li>Spring支持修改扫描的范围</li></ul></li></ol><p>它和JavaBean的区别在于:</p><ol><li>Spring Bean 由 Spring IOC 管理，Java Bean 不是。</li><li>Java Bean 始终是可序列化的，Spring Bean 不需要(不需要实现Serializable接口)。</li><li>Java Bean 必须有一个默认的无参构造函数，Spring Bean 不需要。</li></ol>`,5),w={href:"https://mossgreen.github.io/Java-Bean-VS-Spring-Bean/",target:"_blank",rel:"noopener noreferrer"},S=n("h4",{id:"ioc容器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ioc容器","aria-hidden":"true"},"#"),s(" IOC容器")],-1),f=n("p",null,"通俗理解:",-1),x=n("br",null,null,-1),q={href:"https://www.zhihu.com/question/47220912",target:"_blank",rel:"noopener noreferrer"},B=t(`<p>自己的理解:</p><ol><li>IOC意思为控制反转, 是一种软件开发模式. 是指将对象的创建, 销毁, 依赖关系的管理等操作从程序内部转移到外部容器中, 由容器来管理对象的生命周期.</li><li>IOC容器即实现了控制反转的容器. 它负责创建和管理对象, 并将对象注入到需要的地方.</li></ol><h4 id="bean注册" tabindex="-1"><a class="header-anchor" href="#bean注册" aria-hidden="true">#</a> Bean注册</h4><ol><li>通过注解注册</li></ol><p>常见的可以注册的注解有</p><table><thead><tr><th>注解</th><th>何时使用</th><th>说明</th></tr></thead><tbody><tr><td><code>@Component</code></td><td>用于标记通用的 Spring Bean, 适用于<strong>不明确</strong>属于业务层、控制层或数据访问层的类。</td><td>是 Spring 管理 Bean 的通用注解。<code>@Service</code>、<code>@Controller</code> 和 <code>@Repository</code> 都是基于它的语义化注解。</td></tr><tr><td><code>@Service</code></td><td>用于标识业务层组件，表示业务逻辑层的 Bean，通常包含应用的核心业务逻辑。</td><td>提高代码的可读性，帮助开发人员识别业务逻辑相关的组件。</td></tr><tr><td><code>@Controller</code></td><td>用于标识控制层组件，通常用于 MVC 应用中的控制器类。</td><td>该注解注册的 Bean 会被 Spring MVC 识别并用于处理 HTTP 请求。</td></tr><tr><td><code>@Mapper</code></td><td>用于标识数据访问层组件，适合 MyBatis 的 Mapper 接口，负责与数据库交互。</td><td>MyBatis 特有注解，当一个接口被标记为 @Mapper 时,MyBatis 会在运行时为该接口生成实现类，并将其自动注册到 Spring 容器中，从而实现数据库操作方法的调用。</td></tr></tbody></table><p>另外还有一组注解可以更灵活的注册Bean: 通过 @Configuration 和 @Bean 注解注册 Bean</p><ol><li>@Configuration：标识一个类为 Spring 配置类，Spring 会扫描配置类<strong>将配置类本身注入到IOC中</strong>, 并同时将@Bean注解的方法返回的对象也注入到IOC容器中.</li><li>@Bean：用于方法级别的注解，表示该方法会返回一个 Bean，并将其注册到 Spring 容器中。@Bean 是 Java 配置的一部分，可以在方法中进行条件判断、依赖注入等操作。</li></ol><p>通过 @Configuration 和 @Bean 注解注册 Bean 的优势：</p><ol><li>灵活性和动态创建 Bean：通过 @Bean 注解的方法，你可以在运行时决定如何创建和配置 Bean。例如，你可以在方法中执行条件逻辑或依赖外部配置进行创建。</li><li>避免不必要的实例化：与 @Component 等注解通过类路径扫描自动注册 Bean 不同，使用 @Bean 方法，你可以精确控制 Bean 的注册，避免不必要的对象实例化，提高性能。<br> 复杂的依赖注入：通过 @Bean，你可以在 Bean 创建时注入其他 Bean 或进行条件化创建，这种能力在 @Component 注解的注册方式中无法实现。</li></ol><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>@Configuration
public class ServiceConfig {

    @Bean
    public MyService myService() {
      // 1. @Bean声明的方法必须返回一个对象
      // 2. 方法名就是Bean的名称
        String serviceEnv = System.getProperty(&quot;SERVICE_ENV&quot;);
        // 根据环境区分生成的Bean, 这是其他注解不能做到的
        if (&quot;PROD&quot;.equals(serviceEnv)) {
            return new MyServiceImpl(&quot;prodConfig&quot;);
        } else {
            return new MyServiceImpl(&quot;devConfig&quot;);
        }
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>通过xml方式注册</li></ol><blockquote><p>通过xml方式声明与注册Bean, 不需要创建类</p></blockquote><p>首先声明一个Spring Bean</p><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>// MyBean.java
package com.example.demo;

public class MyBean {

    private String propertyName;

    // setter 方法
    public void setPropertyName(String propertyName) {
        this.propertyName = propertyName;
    }

    // getter 方法
    public String getPropertyName() {
        return propertyName;
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，在 resources 目录下创建一个 XML 配置文件，例如 beans.xml。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 
      id：Bean 的唯一标识符，用于在容器中引用，例如 id=&quot;myBean&quot;。
      class：Bean 所对应的 Java 类的全限定名(即包括包名 + 类名)。
      &lt;property&gt;：用于设置 Bean 的属性。
      name：对应 Bean 类的属性名称。
      value：设置属性的具体值，例如 value=&quot;propertyValue&quot;。
     --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.example.demo.MyBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>propertyName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>propertyValue<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加载 XML 配置文件</p><p>在 Spring Boot 的启动类或一个配置类中，使用 @ImportResource 注解来加载 XML 配置文件。这个注解会将 XML 文件中的 Bean 注册到 Spring 应用上下文中。</p><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.ImportResource;

@SpringBootApplication
// 1. classpath是Spring提供的资源路径前缀, 指向src/main/resources目录
// 2. 具体语法为 classpath:资源路径. 如classpath:config/beanconfig/beans.xml. 指向rc/main/resources/config/beanconfig/beans.xml
// 3. Spring 提供的注解中，凡是涉及到资源路径的地方，通常都可以使用 classpath: 前缀来指定类路径中的资源文件。
@ImportResource(&quot;classpath:beans.xml&quot;)  // 加载 XML 配置文件
public class DemoApplication {

    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在, XML 配置文件中的 Bean 已经加载到 Spring 容器中。可以在项目中通过 @Autowired 注入该 Bean</p><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class SomeComponent {
    @Autowired
    private final MyBean myBean;


    public void useMyBean() {
        System.out.println(&quot;Using MyBean with property: &quot; + myBean.getPropertyName());
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="bean扫描" tabindex="-1"><a class="header-anchor" href="#bean扫描" aria-hidden="true">#</a> Bean扫描</h4><ol><li>在java中通常目录结构与包结构一一对应. 例 com.example.demo 包对应目录 com/example/demo</li><li>在Java中也可以目录结构与包名不对应, 以下为例</li></ol><p>假如有个java文件的目录为 com/example/demo/MyBean.java</p><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>package com.example.other; // 此时包结构为 com.example.oherpackage, 与目录不一一对应 

public class MyBean {
    // 类内容
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),M=n("br",null,null,-1),j=n("br",null,null,-1),C={href:"http://com.example.demo.xxxx.xxx",target:"_blank",rel:"noopener noreferrer"},I=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 假设目录与包结构一一对应</span>
com
 └── example
     └── demo
         ├── DemoApplication<span class="token punctuation">.</span>java  # 主应用程序类，@SpringBootApplication
         ├── Controller<span class="token punctuation">.</span>java       # 能扫描到
         ├── Service<span class="token punctuation">.</span>java          # 能扫描到
         └── subpackage1           # 子包，会被扫描到
             ├── SubController<span class="token punctuation">.</span>java  # 子包，会被扫描到
             └── SubService<span class="token punctuation">.</span>java     # 子包，会被扫描到
 └── otherpackage
     └── notscannedpackage       # 无法被扫描到的包
         └── NotScannedClass<span class="token punctuation">.</span>java  # 普通类，不会被扫描到
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>指定扫描目录</li></ol><p>在以下场景, 可能会手动指定扫描目录</p><p>优化扫描性能：如果你希望减少 Spring 扫描的范围，手动指定路径可以提高启动性能，尤其是在大型项目中，通过精确指定包路径来避免扫描不必要的类。</p><ul><li>方式一: @ComponentScan</li></ul><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>@SpringBootApplication
// Spring 只会扫描 com.example.project.user 和 com.example.project.order 这两个包中的组件
@ComponentScan(basePackages = {&quot;com.example.project.user&quot;, &quot;com.example.project.order&quot;})
public class MyApplication {
    public static void main(String[] args) {
        SpringApplication.run(MyApplication.class, args);
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>方式二: @Import</li></ul><p>假设AppConfig.java为配置类, 注册了一些Bean, 且该配置类能被Bean扫描到, 而MyCustomConfig.java也为配置类, 但无法被Bean扫描到<br> 无法完成Bean的注册. 可以通过@Import将而MyCustomConfig导入到假设AppConfig中, 此时MyCustomConfig声明的Bean也能被注册</p><p>例: 假设AppConfig.java</p><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>@Configuration
@Import(MyCustomConfig.class)
public class AppConfig {
    // 引入其他手动配置的Bean
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>动态导入配置类@Import() 不仅可以导入配置类, 也可以导入实现了ImportSelector接口的类, 该接口可以动态导入配置类</p><ol><li>在resources下新建config.properties</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>classes<span class="token operator">=</span>com<span class="token punctuation">.</span>example2<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Config1<span class="token punctuation">,</span>com<span class="token punctuation">.</span>example2<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Config2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>实现动态导入的类</li></ol><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>package com.example.config;

import java.io.InputStream;
import java.util.Properties;

import org.springframework.context.annotation.ImportSelector;
import org.springframework.core.type.AnnotationMetadata;

public class DynamicImportSelector implements ImportSelector {
  @Override
  public String[] selectImports(AnnotationMetadata importingClassMetadata) {
    // 1. 使用类加载器读取配置文件
    InputStream ips = DynamicImportSelector.class.getClassLoader().getResourceAsStream(&quot;config.properties&quot;);

    if (ips == null) {
      return new String[] {};
    }

    // 2.使用Properties读取输入流中的内容
    Properties properties = new Properties();

    try {
      properties.load(ips);
      // 3. 获取 配置文件并生成字符串数组返回
      String configStr = properties.getProperty(&quot;config&quot;);
      return configStr.split(&quot;,&quot;);
    } catch (Exception e) {
      e.printStackTrace();
    }

    return new String[] {};
  }

}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>动态导入所有配置类</li></ol><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>@Configuration
@Import(DynamicImportSelector.class)
public class AppConfig {
    // 引入其他手动配置的Bean
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="bean注入" tabindex="-1"><a class="header-anchor" href="#bean注入" aria-hidden="true">#</a> Bean注入</h4><ol><li>构造器注入（Constructor Injection）<br> 通过构造方法来注入依赖。这是最常见的方式，Spring 会自动解析依赖的 Bean 并通过构造器进行注入。</li></ol><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>@Component
public class Car {
    private Engine engine;

    @Autowired
    public Car(Engine engine) { // 构造函数的参数列表中会被自动注入Bean
        this.engine = engine;
    }

    public void start() {
        engine.start();
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Setter 注入（Setter Injection）<br> 通过 Java Bean 的 setter 方法来注入依赖。Spring 会调用相应的 setter 方法来注入 Bean。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Engine</span> engine<span class="token punctuation">;</span>

    <span class="token comment">// Spring会自动调用这个方法来注入Bean</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEngine</span><span class="token punctuation">(</span><span class="token class-name">Engine</span> engine<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>engine <span class="token operator">=</span> engine<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        engine<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>字段注入（Field Injection）<br> 直接将依赖注入到类的字段中，这种方式不需要通过构造方法或 setter 方法，但不推荐，因为它会导致代码难以测试和维护。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Engine</span> engine<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        engine<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一些特性</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//@Autowired 的 required 属性可以设置为 false，这表示如果没有找到对应的 Bean，Spring 会允许该依赖为 null。</span>
<span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Engine</span> engine<span class="token punctuation">;</span>

<span class="token comment">//@Qualifier 注解的作用是: 如果容器中有多个符合注入类型的 Bean，@Qualifier 注解可以指定注入哪个 Bean。</span>
<span class="token annotation punctuation">@Autowired</span>
<span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;v8Engine&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Engine</span> engine<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="bean的作用域" tabindex="-1"><a class="header-anchor" href="#bean的作用域" aria-hidden="true">#</a> Bean的作用域</h4><p>Spring 中的 <strong>Bean 作用域</strong>决定了 Bean 的生命周期及其在容器中的管理方式。常见的作用域有以下几种：</p><ol><li>Singleton（单例）</li></ol><ul><li><strong>说明</strong>：容器中只会有一个 Bean 实例，整个应用中共享。</li><li><strong>生命周期</strong>：在容器启动时创建，容器关闭时销毁。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">&quot;singleton&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 默认作用域，无需显式声明</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Serving in Singleton scope&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Prototype（原型）</li></ol><ul><li><strong>说明</strong>：每次请求都会创建一个新的 Bean 实例。</li><li><strong>生命周期</strong>：每次注入时创建新实例，容器不会管理销毁。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">&quot;prototype&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPrototypeBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Serving in Prototype scope&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>Request（请求）</li></ol><ul><li><strong>说明</strong>：每个 HTTP 请求创建一个新的 Bean 实例。</li><li><strong>生命周期</strong>：在 HTTP 请求期间有效，完成请求后销毁。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">&quot;request&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Serving in Request scope&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>Session（会话）</li></ol><ul><li><strong>说明</strong>：每个 HTTP 会话创建一个新的 Bean 实例。</li><li><strong>生命周期</strong>：在会话期间有效，会话结束后销毁。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">&quot;session&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Serving in Session scope&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>Application（应用）</li></ol><ul><li><strong>说明</strong>：整个应用中只会有一个 Bean 实例，类似于 Singleton，但在 Web 环境下适用。</li><li><strong>生命周期</strong>：在整个 Web 应用生命周期内共享。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">&quot;application&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Serving in Application scope&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>Websocket（WebSocket）</li></ol><ul><li><strong>说明</strong>：每个 WebSocket 会话创建一个新的 Bean 实例。</li><li><strong>生命周期</strong>：与 WebSocket 会话生命周期一致。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">&quot;websocket&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Serving in WebSocket scope&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="未理解知识点集合" tabindex="-1"><a class="header-anchor" href="#未理解知识点集合" aria-hidden="true">#</a> 未理解知识点集合</h2><blockquote><p>模仿gitmessage规范, 记录下未理解的知识点, 方便后续查阅<br> 格式为:</p><p>bug(知识点的路径): 知识点描述</p><p>body: 涉及到的其他知识点</p></blockquote><p>bug(Bean扫描/@Import): @Import动态导入配置类</p><ul><li>Properties的使用</li><li>类加载器读取资源文件</li><li>JavaIO的API</li></ul><p>bug: 自定义starter</p>`,51);function A(L,J){const a=i("ExternalLinkIcon");return o(),l("div",null,[m,n("blockquote",null,[n("p",null,[s("注: @Value和@ConfigureProperties都可以注入配置项, 两者有些"),n("a",b,[s("区别"),e(a)])])]),g,n("p",null,[n("a",y,[s("引用参考链接"),e(a)])]),h,n("p",null,[n("a",w,[s("参考链接"),e(a)])]),S,f,n("p",null,[s("IOC容器是一个全局变量, 是一个大map，bean就是里面的value。你提前把对象new好了放进去，然后用的时候取出来。"),x,n("a",q,[s("参考链接"),e(a)])]),B,n("ol",null,[n("li",null,[s("默认扫描目录"),M,s(" Spring Boot 会默认扫描 主应用程序类（即包含 @SpringBootApplication 注解的类）所在的包及其子包。例如，"),j,s(" 如果你的主应用程序类位于 com.example.demo 包下，那么 Spring Boot 会自动扫描 com.example.demo 包及其所有子包("),n("a",C,[s("com.example.demo.xxxx.xxx"),e(a)]),s("...)中的组件。")])]),I])}const R=p(v,[["render",A],["__file","springboot.html.vue"]]);export{R as default};

import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,e as n,f as s,b as t,d as p}from"./app-029021e3.js";const i={},r=p('<h1 id="面试八股文" tabindex="-1"><a class="header-anchor" href="#面试八股文" aria-hidden="true">#</a> 面试八股文</h1><h2 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript" aria-hidden="true">#</a> JavaScript</h2><h3 id="_1-js继承" tabindex="-1"><a class="header-anchor" href="#_1-js继承" aria-hidden="true">#</a> 1. js继承</h3>',3),u={href:"http://liufusong.top/interview/javascript/%E7%BB%A7%E6%89%BF.html#%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF",target:"_blank",rel:"noopener noreferrer"},k=p('<p>原生的js实现继承主要纠结两件事</p><ol><li>每个对象拥有独立内存空间(原型链继承来的复杂数据类型, 每个子类对象共享)</li><li>可以子类对象可以访问父类对象所有属性和方法(包括父类原型链上的) (纯借用构造函数不能实现)</li></ol><p>方法1: 原型链继承, 子类构造函数的prototype指向父类的实例. 子类实例共享父类的引用数据类型</p><p>方法2: 借用构造函数, 用过call指定父构造函数的this指向子类实例, 缺点: 无妨访问父类原型上的方法和属性</p><p>方法3: 组合继承. 以上两种操作都做. 缺点是浪费, 构造函数已经为子类对象赋值了一遍, 子类原型指向父类实例时候又要new 一遍</p><p>方法4: 寄生式组合继承, 还是借用构造函数, 但是不再new 父类对象挂载到父类实例身上. 而是通过Object.create()</p><p>方法5: ES6 class的extends</p><h3 id="_2-js事件循环-宏任务-微任务" tabindex="-1"><a class="header-anchor" href="#_2-js事件循环-宏任务-微任务" aria-hidden="true">#</a> 2. js事件循环, 宏任务, 微任务</h3>',8),d={href:"https://baijiahao.baidu.com/s?id=1737690006260755882&wfr=spider&for=pc",target:"_blank",rel:"noopener noreferrer"},v=p(`<p>这个知识点可以提一下vue的nextTick的机制, 就是利用事件循环与微任务完成了nextTick的功能</p><h3 id="_3-深拷贝与循环引用" tabindex="-1"><a class="header-anchor" href="#_3-深拷贝与循环引用" aria-hidden="true">#</a> 3. 深拷贝与循环引用</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 只考虑克隆数组和对象, 并且解决循环引用</span>
<span class="token keyword">const</span> <span class="token function-variable function">isArray</span> <span class="token operator">=</span> <span class="token parameter">data</span><span class="token operator">=&gt;</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;[object Array]&#39;</span>
<span class="token keyword">const</span> <span class="token function-variable function">isObj</span> <span class="token operator">=</span> <span class="token parameter">data</span><span class="token operator">=&gt;</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;[object Object]&#39;</span>

<span class="token keyword">const</span> deepClone <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span>visted <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> ret<span class="token punctuation">,</span> value
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObj</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ret <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> data
    <span class="token punctuation">}</span>

    visted<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment">// 默认data被观测过</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> old <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        value <span class="token operator">=</span> data<span class="token punctuation">[</span>old<span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>visted<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 解决循环引用, 当某个对象被观测过后, 缓存一下 如果被观测过直接赋值</span>
            ret<span class="token punctuation">[</span>old<span class="token punctuation">]</span> <span class="token operator">=</span> value 
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isObj</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ret<span class="token punctuation">[</span>old<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>visted<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            ret<span class="token punctuation">[</span>old<span class="token punctuation">]</span> <span class="token operator">=</span> value
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> ret

<span class="token punctuation">}</span>
<span class="token keyword">const</span> a1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;zs&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">person</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">p1</span><span class="token operator">:</span> <span class="token string">&#39;ls&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">p2</span><span class="token operator">:</span> <span class="token string">&#39;hmm&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">hobbys</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;zs2&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;抽烟&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

a1<span class="token punctuation">.</span>a <span class="token operator">=</span> a1
<span class="token comment">// 模拟循环引用</span>
<span class="token keyword">const</span> a2 <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-esm和cjs联系区别" tabindex="-1"><a class="header-anchor" href="#_4-esm和cjs联系区别" aria-hidden="true">#</a> 4. esm和cjs联系区别</h3>`,4),m={href:"https://es6.ruanyifeng.com/#docs/module-loader#ES6-%E6%A8%A1%E5%9D%97%E4%B8%8E-CommonJS-%E6%A8%A1%E5%9D%97%E7%9A%84%E5%B7%AE%E5%BC%82",target:"_blank",rel:"noopener noreferrer"},b=n("p",null,"总结",-1),h=n("ol",null,[n("li",null,"在nodejs中 cjs模块的文件后缀为 .cjs, esm模块的文件后缀为.mjs. 如果文件后缀为.js文件, 则看package.json中的type字段, 如果type : moudle 则视为esm模块, type不指定或type:commonjs, 则为cjs模块"),n("li",null,"cjs输出的为值拷贝, 外部模块修改本模块的变量, 对本模块不影响. esm模块输出的值引用. 可以从外部模块修改本模块"),n("li",null,"esm的import在解析时候会提升到本模块的顶层解析")],-1),g=n("h3",{id:"_5-强缓存与协商缓存",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-强缓存与协商缓存","aria-hidden":"true"},"#"),s(" 5. 强缓存与协商缓存")],-1),f={href:"https://github.com/amandakelake/blog/issues/41",target:"_blank",rel:"noopener noreferrer"},y=p(`<p>总结:</p><p>从设置缓存的目的开始回答这道题: 优化再一次打开页面的速度</p><h3 id="_6-类型判断-比如js如何判断一个实例是数组" tabindex="-1"><a class="header-anchor" href="#_6-类型判断-比如js如何判断一个实例是数组" aria-hidden="true">#</a> 6. 类型判断(比如JS如何判断一个实例是数组)</h3><ol><li><p>typeof 判断类型字符串, 缺点是无法判断null, 无法判断数组</p></li><li><p>Object.prototype.toString.call(data) 可以输出固定的[object stringTagName]字符串. 其中基本数据类型的string tag是内置. 可以通过给对象赋值 Symbol.toStringTag修改string tag的名字</p><ul><li><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;我的对象&#39;</span> <span class="token punctuation">}</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
 <span class="token comment">// 输出 &#39;[object 我的的对象]&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>instanceof 判断右边构造函数的原型对象是否在左对象的原型链上(左对象的原型链上放着所有自己的父亲/爷爷, 看看自己的爷爷有没有右边的)</p></li></ol><h3 id="_7-数组元素去重" tabindex="-1"><a class="header-anchor" href="#_7-数组元素去重" aria-hidden="true">#</a> 7. 数组元素去重</h3><ol><li>new Set去重</li><li>新建数组, 遍历时候向数组添加元素, 有重复的则不添加</li></ol><h3 id="_8-遍历数据-对象或者数组的方法-for-in和-for-of的区别" tabindex="-1"><a class="header-anchor" href="#_8-遍历数据-对象或者数组的方法-for-in和-for-of的区别" aria-hidden="true">#</a> 8. 遍历数据(对象或者数组的方法), for..in和 for..of的区别</h3><p>for..in:</p><p>用于遍历对象上<strong>包括其原型链上</strong>的<strong>可枚举的</strong>, <strong>非Symbol</strong>的属性</p><p>可枚举的意思是, 通过Object.defineProperties() 定义属性时候, enumable不为false的属性.</p><p>由于js的数组实现比较魔幻, 可以看做另类的对象, 所以for..in也可以遍历数组, 但不建议</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;s-key&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token string">&#39;你好&#39;</span> <span class="token comment">// 测试能否遍历symbol</span>
<span class="token punctuation">}</span>
obj<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span> <span class="token comment">// 测试能否遍历原型的属性</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">&#39;notForIn&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token comment">// 测试能否迭代不能枚举的属性</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span><span class="token string">&#39;不能枚举&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">enumable</span><span class="token operator">:</span><span class="token boolean">false</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 开始测试</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">key: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> value:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 输出</span>
<span class="token comment">// key: name value:张三</span>
<span class="token comment">// key: age value:18</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>for...of..</p><p>迭代实现了Symbol.iterator的结构数据结构. js语言已经内置实现了 数组, map,set等数据结构的可迭代接口, 要注意plain object是没有实现该接口. 如果想让for..of迭代对象, 需要手动实现该接口</p><p>以下是一个实现迭代器接口对象的例子</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> iterableObj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>
    <span class="token literal-property property">hobbys</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;抽烟&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;喝酒&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;烫头&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment">// 迭代接口函数的this指向原对象</span>
iterableObj<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> done <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token keyword">let</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> idx <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> _self <span class="token operator">=</span> <span class="token keyword">this</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">let</span> key <span class="token operator">=</span> keys<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>
        value <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">key: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, value:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>_self<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
        idx<span class="token operator">++</span>
      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
        value <span class="token operator">=</span> <span class="token keyword">null</span>
        done <span class="token operator">=</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span>done <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> iterableObj<span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>generator函数实现</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span>
<span class="token punctuation">}</span>

map<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">yield</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">key为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">; value为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">[</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>	 
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> map <span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-promise-实现原理-各个方法的特点-如race-all等" tabindex="-1"><a class="header-anchor" href="#_9-promise-实现原理-各个方法的特点-如race-all等" aria-hidden="true">#</a> 9. Promise(实现原理, 各个方法的特点, 如race,all等)</h3>`,19),w={href:"https://syriansoldier.github.io/js/Promise%E6%BA%90%E7%A0%81.html",target:"_blank",rel:"noopener noreferrer"},_=n("h3",{id:"_10-大文件上传与断点续传",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_10-大文件上传与断点续传","aria-hidden":"true"},"#"),s(" 10. 大文件上传与断点续传")],-1),x={href:"https://juejin.cn/post/6844903968338870285#heading-0",target:"_blank",rel:"noopener noreferrer"},j=n("p",null,"总结:",-1),q=n("li",null,"获取File. 可以通过drag&dropAPI 或者 input:file获取文件对象",-1),S=n("li",null,"文件分片: 通过Blob.slice(start,end)Api将文件分成若干片",-1),C=n("li",null,"缓存已上传ContentHash. 通过sparkMD5包, 对每一个上传过文件片段缓存其hash值",-1),A=n("li",null,"开始上传: 判断上传的片段是否缓存过hash值, 如果已经上传过就跳过该片段",-1),E={href:"https://www.npmjs.com/package/p-limit",target:"_blank",rel:"noopener noreferrer"},T=n("li",null,"合并请求: 当上传完所有分片后, 给后端传一个合并分片的请求, 后端接到合并的请求后将所有片段合并",-1),B=p(`<h3 id="_11-防抖节流函数的具体实现" tabindex="-1"><a class="header-anchor" href="#_11-防抖节流函数的具体实现" aria-hidden="true">#</a> 11. 防抖节流函数的具体实现</h3><p>复杂的看lodash或者underscore.js的debounce和throttle实现</p><p>简易版:</p><p><strong>防抖</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//只考虑处理原函数this问题, 参数问题, 和返回值问题</span>
<span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span>wait</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> timer
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> self <span class="token operator">=</span> <span class="token keyword">this</span>
    <span class="token keyword">const</span> args <span class="token operator">=</span> arguments  
    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>wait<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span> 

document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mousemove&#39;</span><span class="token punctuation">,</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>节流</strong></p><p>节流阀实现</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> timer
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>timer<span class="token punctuation">)</span><span class="token punctuation">{</span>
    	<span class="token keyword">let</span> args <span class="token operator">=</span> arguments
        <span class="token keyword">let</span> self <span class="token operator">=</span> <span class="token keyword">this</span>
        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          timer <span class="token operator">=</span> <span class="token keyword">null</span>
          <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span>
       <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>   
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>计算时间差实现</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> previous <span class="token operator">=</span> <span class="token number">0</span> 
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  	<span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>current <span class="token operator">-</span> previous<span class="token punctuation">)</span> <span class="token operator">&lt;</span> wait<span class="token punctuation">)</span> <span class="token keyword">return</span>
    
    previous <span class="token operator">=</span> current
    <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">...</span>arguments<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-localstorage-sessionstorage-cookie的区别和联系-以及应用场景" tabindex="-1"><a class="header-anchor" href="#_12-localstorage-sessionstorage-cookie的区别和联系-以及应用场景" aria-hidden="true">#</a> 12. localStorage, sessionStorage, cookie的区别和联系, 以及应用场景</h3>`,11),O={href:"https://www.bilibili.com/video/BV1SL4y1i7ZL/?spm_id_from=333.337.search-card.all.click&vd_source=20bf77d62633a13b190b5fb3785b2e34",target:"_blank",rel:"noopener noreferrer"},P=p(`<p>客户端设置cookie</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">&quot;en&quot;</span><span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">&quot;UTF-8&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">&quot;X-UA-Compatible&quot;</span> content<span class="token operator">=</span><span class="token string">&quot;IE=edge&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">&quot;viewport&quot;</span> content<span class="token operator">=</span><span class="token string">&quot;width=device-width, initial-scale=1.0&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">&quot;/&quot;</span> id<span class="token operator">=</span><span class="token string">&quot;form&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;username&quot;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>用户名<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> id<span class="token operator">=</span><span class="token string">&quot;username&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span>

    <span class="token operator">&lt;</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;password&quot;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>密码<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> id<span class="token operator">=</span><span class="token string">&quot;password&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span>

    <span class="token operator">&lt;</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;remember&quot;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>记住我<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;checkbox&quot;</span> id<span class="token operator">=</span><span class="token string">&quot;remember&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span>

    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;submit&quot;</span> id<span class="token operator">=</span><span class="token string">&quot;login&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
    <span class="token comment">// 需求, 当点击记住我时候, 记住账号和密码</span>

    <span class="token keyword">const</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#form&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> remember <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#remember&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> password <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#password&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> username <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#username&#39;</span><span class="token punctuation">)</span>

    <span class="token comment">// 尝试加载cookie</span>
    <span class="token keyword">const</span> cookie <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cookie<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> arr <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">str</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;=&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;username&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          username<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;password&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          password<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    form<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;submit&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>remember<span class="token punctuation">.</span>checked<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 将用户名和密码存到cookie中</span>

        <span class="token comment">// 通过document.cookie设置cookie.以;分割键值对.</span>
        <span class="token comment">// 如果不设置留存时间, 默认cookie在关闭页面后自动消失</span>
        <span class="token comment">// 可以通过max-age设置cookie的有效期, 单位是秒</span>
        <span class="token comment">// 一般对value进行url编码</span>
        <span class="token keyword">const</span> psd <span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>password<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
        <span class="token keyword">const</span> uname <span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>username<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
        <span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token comment">// 2天</span>

        document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">username=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>uname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;max-age=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>time<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;</span><span class="token template-punctuation string">\`</span></span>
        document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">password=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>psd<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;max-age=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>time<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务端在响应头中 set-cookie响应头中设置cookie</p><p>区别:</p><p>大小: web存储: 5mb-10mb左右, cookie:4kb</p><p>能否设置过期: localStorage不能设置, sessionStorage关闭页签即消失, cookie可以手动设置过期时间</p><p>存储位置: cookie存在于服务端和客户端, web存储存在客户端</p><p>使用场景:</p><p>localStorage: 主要存放一些大数据, 不需要通知服务端知道的数据. 比如用户搜索历史记录, 还有vuex,redux这种第三方库需要持久化的数据</p><p>sessionStorage: 做敏感信息处理的时候, 比如敏感账号的一次登录</p><p>cookie: 账号密码等存储, 不希望一直记住, 希望有时间限制存储的, 容量比较小的数据</p><h3 id="_13-cookie怎么防止被篡改" tabindex="-1"><a class="header-anchor" href="#_13-cookie怎么防止被篡改" aria-hidden="true">#</a> 13. cookie怎么防止被篡改</h3>`,12),I={href:"https://www.kancloud.cn/kancloud/http-cookies-explained/48323",target:"_blank",rel:"noopener noreferrer"},D=p('<ol><li>服务端设置http-only, 服务端设置的http-only 前端不能通过js脚本的document.cookie获取cookie</li><li>加密, 比如3DES对称加密算法, 服务端发cookie之前先加密, 获取的时候解密先验证</li></ol><h3 id="_14-原型链的理解" tabindex="-1"><a class="header-anchor" href="#_14-原型链的理解" aria-hidden="true">#</a> 14. 原型链的理解</h3><p>对象的__proto__ 指向该对象的原型对象</p><p>构造函数的prototype指向原型对象</p><p>原型对象的contructor指向构造函数</p><p>原型链的尽头是null</p><h3 id="_15-v8垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#_15-v8垃圾回收机制" aria-hidden="true">#</a> 15. V8垃圾回收机制</h3>',7),F={href:"https://zhuanlan.zhihu.com/p/259579683",target:"_blank",rel:"noopener noreferrer"},R=p('<p>总结:</p><ol><li>堆被分为新生代区和老生代区. 新创建的对象会被放在新生代区, 在新生代区经历两次垃圾回收的对象会晋升到老生代区</li><li>新生代区又分为from区和to区, 这里的对象采用的垃圾回收算法为scavenage算法, 算法核心思路是 1. 标记, 从根节点遍历所有可达节点标记为活动节点, 遍历不到的为非活跃节点 2.复制. 将from区的活动节点cv到to区 3. 整理. 复制到to区的对象可能不连续, 整理成连续的结构 4. 删除与复制. 将from区所有节点 包括活跃与非活跃的都删除.并将to区整理好的活跃节点复制会from区</li><li>老生代区采用标记清除和标记清理. 原理是从根节点标记可达对象, 将未标记到的非活跃对象删除. 然后再整理成连续内存. 老生代区的空间比较大</li><li>全停顿现象: 当整理对象时候, 对象的内存地址在变化, 此时会将js逻辑停下, 整理对象. 此称为全停顿. 另外标记的过程也占用主线程资源, 可能会导致js运行不流畅</li><li>优化手段: 增量标记与惰性清除. 增量标记: 分片思想, 将标记的过程分为若干片段, 穿插在js逻辑代码的间隙中执行, 每次只执行一点标记. 惰性清除: 原本执行清除时候先判断现在内存空间是否够用, 如果够用可以延缓gc的过程, 即推迟gc的流程到合适的时间点执行</li></ol><h3 id="_16-观察者模式是什么-怎么实现" tabindex="-1"><a class="header-anchor" href="#_16-观察者模式是什么-怎么实现" aria-hidden="true">#</a> 16. 观察者模式是什么? 怎么实现?</h3><h3 id="_17-reduce的理解-最好手写reduce" tabindex="-1"><a class="header-anchor" href="#_17-reduce的理解-最好手写reduce" aria-hidden="true">#</a> 17. reduce的理解, 最好手写reduce</h3><blockquote><p>reduce的核心是用变量缓存上一次计算的结果和对initialValue不同情况的处理</p><p>当不传入initialValue时候, 会用第一项的值作为初始值, 会从第二项开始遍历执行函数</p><p>当传入initialValue时候, 会用initialValue作为初始值, 从第一项开始遍历执行函数</p></blockquote>',5),V={href:"https://www.bilibili.com/video/BV1Q5411E7bb/?spm_id_from=333.337.search-card.all.click&vd_source=20bf77d62633a13b190b5fb3785b2e34",target:"_blank",rel:"noopener noreferrer"},M=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>
<span class="token comment">// arr.reduce((prev,curr) =&gt; prev + curr) //输出 21</span>
arr<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span><span class="token function-variable function">_reduce</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span>initialValue</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// 边界判断</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">&#39;[object Function]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;请传入正确的参数&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 不能简单的判断initialValue不存在, 因为当initialValue手动传入undefined时候也会计算</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">this</span>
  <span class="token keyword">const</span> <span class="token function-variable function">notInitialValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> 
  <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token function">notInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> initialValue <span class="token comment">// 如果只传了函数, 初始值为第一项. 否则初始值为指定的initialValue</span>
  <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token function">notInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span> <span class="token comment">// 传了initialValue从第0项开始计算, 不传因为第一项已经设置为默认值, 从第二项开始计算</span>
  
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> start <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> start<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    temp <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">,</span>start<span class="token punctuation">,</span>arr<span class="token punctuation">)</span> <span class="token comment">// 计算本次的值, 并赋值给temp</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">return</span> temp <span class="token comment">// 将最终计算的值返回</span>
<span class="token punctuation">}</span>
arr<span class="token punctuation">.</span><span class="token function">_reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span>curr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> prev <span class="token operator">+</span> curr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_18-为什么身份认证用cookie不用其他俩-本地和会话存储" tabindex="-1"><a class="header-anchor" href="#_18-为什么身份认证用cookie不用其他俩-本地和会话存储" aria-hidden="true">#</a> 18. 为什么身份认证用cookie不用其他俩(本地和会话存储)</h3><p>因为cookie可以弥补http的无状态, 每次请求时, 在cookie请求头上加上身份认证信息, 可以让服务端知道请求的是人是否是同一位. 而另外两个最主要还是做客户端的存储的, 发请求还要拿出来放在ajax里发出去, 也比较麻烦</p><h3 id="_20-讲讲异步编程-async-await-具体实现" tabindex="-1"><a class="header-anchor" href="#_20-讲讲异步编程-async-await-具体实现" aria-hidden="true">#</a> 20. 讲讲异步编程，async await 具体实现</h3><blockquote><p>异步编程的主要应用场景是与后端交互</p><p>整个交互过程主要依赖在new 一个 promise, 并发送ajax请求, 并监听请求被响应, 当响应时候resolve数据, promise会在resolve后将then中回调执行. 一般回调都是业务上关于处理数据的代码. 其实总结一下就是依赖两点: 1. promise的发布订阅机制(将then中的回调缓存, 在resolve的时候调用) 2. ajax提供的监听响应状态(当响应时候resolve数据)</p><p>而现在流行的async和await, async利用了generator函数给函数提供了暂停的功能, await将后面修饰的promise直接拿到结果, 从而减少了回调</p></blockquote><p><strong>先模拟一个常见的业务: 发送请求获取后端数据</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 模拟ajax请求, 获取后端爱好数据</span>
<span class="token keyword">const</span> <span class="token function-variable function">fetchHobby</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;吃饭&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;喝酒&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;烫头&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token punctuation">)</span>
 <span class="token comment">// 模拟业务中获取数据</span>
 <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetchHobby</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

<span class="token function">getArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>上面的代码会被编译成类似的代码</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 模拟ajax请求, 获取后端爱好数据</span>
<span class="token keyword">const</span> <span class="token function-variable function">fetchHobby</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;吃饭&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;喝酒&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;烫头&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token comment">// 上面的代码, 会被编译成类似代码</span>
<span class="token comment">// async 变成了 *, await 变成了yield</span>
<span class="token comment">// 另外引用了co包裹了getArr的调用</span>
<span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">getArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">fetchHobby</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">co</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//... 代码略}</span>
<span class="token function">co</span><span class="token punctuation">(</span><span class="token function">getArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>来看下 * 函数和co库分别是干什么的</strong></p><p><code>*</code> 函数又名generator函数, 该函数yield可以暂停语句的执行, 另外函数可以向函数外传递参数, 函数外也可以向函数内传递参数</p><p><strong>案例一: 向函数外传递参数</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span>
<span class="token punctuation">}</span>

map<span class="token punctuation">[</span>Symbole<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">yield</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">key为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">; value为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">[</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>	 
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> map <span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>案例二: 向函数内传递参数</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> a1 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token number">1</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span>
    <span class="token keyword">const</span> a2 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token number">2</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> it <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 获得迭代器</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span> v1<span class="token punctuation">}</span> <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// next方法可以为yield赋右值, 可以接受yiled左值</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span> v2<span class="token punctuation">}</span> <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;a1的值&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span>
it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;a2的值&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 输出顺序</span>
<span class="token comment">// 1 a1的值    2 a2的值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>co库的实现</strong></p><blockquote><p>co库实现的就是, 等待yeild后面的promise出结果, 然后把结果赋值给左边变量. 并将过程循环到函数执行完毕</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">co</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">it<span class="token punctuation">,</span>prev</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>value<span class="token punctuation">,</span>done<span class="token punctuation">}</span> <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>prev<span class="token punctuation">)</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token keyword">return</span> 
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    value <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token function">co</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span>res<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_21-url输入到页面渲染的整个过程" tabindex="-1"><a class="header-anchor" href="#_21-url输入到页面渲染的整个过程" aria-hidden="true">#</a> 21. url输入到页面渲染的整个过程</h3><ol><li>判断是否是url. 非url会被视为搜索关键词, 没有协议会自动补齐协议, 调用默认搜索引擎搜索</li><li>判断浏览器是否需要卸载原页面(如果有的话)</li><li>判断请求的html是否曾经请求过, 是否301. 如果是301永久重定向, 则取出location中的url作为代替url发起请求</li><li>判断请求的html是否命中缓存, 如果命中缓存, 则判断是命中强缓存还是协商缓存</li><li>DNS解析. 将域名解析成ip. 这里面有个递归找DNS服务器的过程, 具体不太了解, 想要了解自行百度</li><li>建立TCP链接(三次握手)</li><li>判断是否https, 否则还要经历SSL协商的过程</li><li>建立TCP管道后, 服务端返回html</li><li>对于http1.1 需要看是否connection:keep-alive.还是connection:close判断是否需要断开tcp链接(四次挥手). 对于http2, 直接复用</li><li>浏览器解析html, 请求相关依赖, 其他的css,js等</li><li>做渲染: DOM --&gt; DOM树. CSS --&gt; CSSOM树. --&gt; 合成render树,---&gt; 再layout计算 --&gt; 绘制 --&gt; 图层复合 --&gt; 显示到页面上</li></ol><h3 id="_22-new一个对象的过程" tabindex="-1"><a class="header-anchor" href="#_22-new一个对象的过程" aria-hidden="true">#</a> 22. new一个对象的过程</h3><p>四步:</p><ol><li>创建一个新对象</li><li>指定该对象的原型(对象的原型对象应该和构造函数的原型一样)</li><li>指定this为这个对象</li><li>判断是否返回引用数据类型, 如果返回引用数据类型, 则直接返回引用数据类型, 原来的对象不要了</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">_new</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">Func<span class="token punctuation">,</span><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> 
  obj<span class="token punctuation">.</span>_proto__ <span class="token operator">=</span> <span class="token class-name">Func</span><span class="token punctuation">.</span>prototype
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">Func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>args<span class="token punctuation">)</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> result <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> result <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> result
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> obj
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;zhangsan&#39;</span>
<span class="token punctuation">}</span>

<span class="token function">_new</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span>args<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_23-闭包" tabindex="-1"><a class="header-anchor" href="#_23-闭包" aria-hidden="true">#</a> 23. 闭包</h3>`,26),z={href:"https://www.zhihu.com/question/34210214?sort=created",target:"_blank",rel:"noopener noreferrer"},L=n("p",null,"总结:",-1),U={href:"https://www.cnblogs.com/lwl0812/p/9792162.html",target:"_blank",rel:"noopener noreferrer"},N=n("li",null,"由于子函数被返回, 依然是子函数, 所以访问了父函数里的变量. 就造成了闭包",-1),$=n("li",null,"谈一谈闭包的看法: 有意识的闭包不属于内存泄露, 无意识的闭包属于内存泄露, 比如IE6回收DOM对象采用引用计数, 如果循环引用了就会造成GC异常, 导致内存泄露",-1),H=n("li",null,"谈谈排查内存泄漏, chrome的performace选项卡和memory选项卡",-1),W=p('<h2 id="css" tabindex="-1"><a class="header-anchor" href="#css" aria-hidden="true">#</a> CSS</h2><h3 id="_1-盒子居中的方案" tabindex="-1"><a class="header-anchor" href="#_1-盒子居中的方案" aria-hidden="true">#</a> 1. 盒子居中的方案</h3><ol><li>定位 + margin. 子绝父相, left和top都是50% 再用margin调整</li><li>定位 + transform. 子绝父相. left和top都是50% 再用transform调整</li><li>margin:auto;子绝父相, left,top,right,bottom都为0, margin为auto</li><li>flex布局. 父亲justify-content:center, align-items:center</li></ol><h3 id="_2-css3有哪些新特性-渐变怎么用" tabindex="-1"><a class="header-anchor" href="#_2-css3有哪些新特性-渐变怎么用" aria-hidden="true">#</a> 2. css3有哪些新特性，渐变怎么用</h3>',4),K=n("ol",null,[n("li",null,[n("p",null,"动画 @keyframe 关键帧")]),n("li",null,[n("p",null,"过渡 transition")]),n("li",{"CSS-Code":""},[n("p",null,"媒体查询 @media media-type and/not/only (media feature)")]),n("li",null,[n("p",null,"transform 2d/3D几何变换, 平移/旋转/缩放")]),n("li",null,[n("p",null,"flex布局")]),n("li",null,[n("p",null,"背景渐变.. background-image: linear-gradient(direction, color-stop1, color-stop2, ...);"),n("p",null,"..."),n("p",null,"​"),n("p",null,"这种面试题没必要答完, 枚举个几个就行")])],-1),J=n("h3",{id:"_3-bfc",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-bfc","aria-hidden":"true"},"#"),s(" 3. BFC")],-1),G={href:"https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context",target:"_blank",rel:"noopener noreferrer"},X=p(`<p>BFC(Blocking-formatter-context)又叫块级格式化上下文.</p><p>它是指定盒子的类型的, 被指定为BFC容器的盒子, 拥有自己的独特的特性(好几条)</p><p><strong>BFC盒子的特性</strong></p><ol><li>浮动相关. BFC盒子如果是浮动的, 则会压着标准流的盒子, 如果父子盒子都是BFC容器且浮动, 子盒子不会浮出父盒子</li><li>同一个BFC盒子相邻的子盒子会外边距合并. 不同BFC盒子中子盒子即使相邻也不会合并</li></ol><p><strong>怎么指定BFC</strong></p><ol><li>有副作用的触发 : float浮动, overflow不为hidden, flex布局</li><li>无副作用的触发: html根节点默认为BFC盒子, display:flow-root</li></ol><p><strong>测试代码</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">&quot;en&quot;</span><span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">&quot;UTF-8&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">&quot;X-UA-Compatible&quot;</span> content<span class="token operator">=</span><span class="token string">&quot;IE=edge&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">&quot;viewport&quot;</span> content<span class="token operator">=</span><span class="token string">&quot;width=device-width, initial-scale=1.0&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>
    <span class="token comment">/* 不加这个会外边距塌陷 */</span>
    <span class="token punctuation">.</span>c <span class="token punctuation">{</span>
      <span class="token literal-property property">display</span><span class="token operator">:</span> flow<span class="token operator">-</span>root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">.</span>d1<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>d2 <span class="token punctuation">{</span>
      <span class="token literal-property property">width</span><span class="token operator">:</span> 200px<span class="token punctuation">;</span>
      <span class="token literal-property property">height</span><span class="token operator">:</span> 200px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">.</span>d1 <span class="token punctuation">{</span>
      background<span class="token operator">-</span>color<span class="token operator">:</span> red<span class="token punctuation">;</span>
      margin<span class="token operator">-</span>bottom<span class="token operator">:</span> 200px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">.</span>d2 <span class="token punctuation">{</span>
      background<span class="token operator">-</span>color<span class="token operator">:</span> orange<span class="token punctuation">;</span>
      margin<span class="token operator">-</span>top<span class="token operator">:</span> 300px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;c&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;d1&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>

  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;d2&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="react" tabindex="-1"><a class="header-anchor" href="#react" aria-hidden="true">#</a> React</h2><h3 id="_1-react的有哪些常用hook" tabindex="-1"><a class="header-anchor" href="#_1-react的有哪些常用hook" aria-hidden="true">#</a> 1. react的有哪些常用hook</h3><p><strong>useState</strong></p>`,11),Y={href:"https://cloud.tencent.com/developer/article/2138383",target:"_blank",rel:"noopener noreferrer"},Z=p(`<p><strong>基本用法: 计数器案例</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&quot;./styles.css&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">incremetCount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;App&quot;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Count<span class="token operator">:</span> <span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>incremetCount<span class="token punctuation">}</span><span class="token operator">&gt;</span>增加数字<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>useState的异步更新</strong></p><blockquote><p>useState更新数据是异步的, 更新后不能立即在本函数内获取数据</p><p>并且这是由于闭包陷阱导致的, 闭包陷阱在后面会详细说, 我们先看看异步更新例子</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&quot;./styles.css&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> flushSync <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-dom&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  不能更新拿到count</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;App&quot;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>数字<span class="token operator">:</span> <span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>increment<span class="token punctuation">}</span><span class="token operator">&gt;</span>增加<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>ReactHooks的闭包陷阱</strong></p><blockquote><p>下面这个例子展示了一个计数器的案例, 当点击+1时, 数字+1. 并且在第一次的初始化的开启间隔定时器, 一直向控制台输出count的值</p><p>但是会发现, 无论数字增加到几, 打印输出的永远是零.</p><p>这种现象被称为 react hooks的闭包陷阱</p></blockquote><blockquote><p>原因是, 当写下函数的时候, 词法上下文就确定了, count访问一直是第一个函数App里的count, 他的值为0</p><p>之后每一次setCount 都会再执行一遍函数App, count虽然变化了, 但是是别的App函数里的count发生变化, 而非第一个App函数中count</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&quot;./styles.css&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>


<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span>setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

   <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">/* 不管怎么点击增加1, 打印的都是0 */</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

 <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;App&quot;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>数字<span class="token operator">:</span> <span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
      <span class="token punctuation">{</span><span class="token comment">/* 不管怎么点击增加1, 打印的都是0 */</span><span class="token punctuation">}</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token parameter">count</span> <span class="token operator">=&gt;</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>增加<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用useRef规避上述案例的闭包陷阱</strong></p><blockquote><p>useRef用起来相当于一个全局变量.</p><p>我们可以不访问闭包中的count, 而是把每次更新的count放到useRef营造的全局变量中.</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&quot;./styles.css&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect<span class="token punctuation">,</span> useState<span class="token punctuation">,</span> useRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> countRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用ref缓存count</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>countRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印缓存中count</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;App&quot;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>数字<span class="token operator">:</span> <span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button
        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
          <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">count</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 每次变化的时候, 更新ref的值</span>
            countRef<span class="token punctuation">.</span>current <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> countRef<span class="token punctuation">.</span>current<span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token operator">&gt;</span>
        增加<span class="token number">1</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在开发中, 使用useState时候避免闭包陷阱的策略</strong></p><blockquote><p>下面依然是一个计数器的案例</p><p>有两个函数 : increment函数为立即加一的操作. incrementLater函数为三秒后加1的操作</p><p>现在, 先点一下&quot;一会增加1&quot;按钮, 然后快速, 连续的点击&quot;增加1&quot;按钮. 你会发现, 数字增加到一个值后, 突然变成1了</p></blockquote><blockquote><p>原因: 这还是一个闭包陷阱的例子. 当一开始点击&quot;一会增加1&quot;按钮后, 当时的count的为0, 此后再频繁点击连续, count虽然增加了, 但是不是第一个App函数中count变了, 而是后面的App函数中的count变了</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&quot;./styles.css&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">incrementLater</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>increment<span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;App&quot;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>数字<span class="token operator">:</span> <span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>increment<span class="token punctuation">}</span><span class="token operator">&gt;</span>增加<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>incrementLater<span class="token punctuation">}</span><span class="token operator">&gt;</span>一会增加<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用函数式setState避免上述问题</strong></p><blockquote><p>建议setState使用函数式</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&quot;./styles.css&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 只需要改这一行, 避免直接修改state, 用函数式</span>
  <span class="token keyword">const</span> <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token parameter">preCount</span> <span class="token operator">=&gt;</span> preCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">incrementLater</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>increment<span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;App&quot;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>数字<span class="token operator">:</span> <span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>increment<span class="token punctuation">}</span><span class="token operator">&gt;</span>增加<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>incrementLater<span class="token punctuation">}</span><span class="token operator">&gt;</span>一会增加<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**为什么useState被设计成异步的? **</p>`,21),Q={href:"https://zhuanlan.zhihu.com/p/106691292",target:"_blank",rel:"noopener noreferrer"},nn=n("ol",null,[n("li",null,"做批处理. 在同一个时刻, 可以能有多个更改视图的函数触发, 将这些操作合并成一个, 一次更新DOM"),n("li",null,"保持内部数据的一致性.")],-1),sn=n("h3",{id:"_2-fiber",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-fiber","aria-hidden":"true"},"#"),s(" 2. fiber")],-1),an={href:"https://www.cnblogs.com/echolun/p/16414562.html",target:"_blank",rel:"noopener noreferrer"},tn=p(`<ol><li><p>16.8之前的问题, 当组件更新的时候, 如果组件树的层级很深, 组件树很庞大, 可能会产生卡顿.</p><ol start="2"><li>卡顿的原因是<br> - 视觉上帧率小于60FPS的动画会卡, 也就是一帧渲染速度小于16.6ms的时候会肉眼觉得卡顿</li></ol><pre><code>- react16.8之前更新视图可能花费的时间大于16.6ms, 就会感觉到卡顿. 
- 根本原因是, react之前的DOM-DIFF算法是递归的调用函数, 深度优先遍历新老虚拟DOM树, 差异化更新
  其流程是函数调用栈里执行的, 没有办法终止. 

解决: fiber是为了解决卡帧问题出现的, react团队设计的链表(树)数据结构. 原先DOM-DIFF是新老虚拟DOM对比
16.8以后是老的虚拟DOM生成fiber树, 然后在更新时候用新虚拟DOM和老fiber树进行对比, 将差异的信息更新
到fiber树上. 

​

这个过程(Reconciliation协调阶段)是可以暂停的, react用requestAnimationFrame模拟requestIdleCallback在浏览器主线程空闲时候进行差异化更新.   提交阶段：将协调阶段计算出来的变更一次性提交，此阶段同步进行且不可中断（优先保证渲染）。

  fiber对比的规则大概有三个层面
1. 深度优先遍历 + 同级比较. 只比较同级
2. 最先比较key, key不一样直接用新的. 在react当中没有指定key, 则默认使用在父节点的相对索引作为key
3. 再比较tag
4. 最后比较内容
5. react有一些字段定义了更新行为: 4--Update 
</code></pre></li></ol><h3 id="_3-react组件通信" tabindex="-1"><a class="header-anchor" href="#_3-react组件通信" aria-hidden="true">#</a> 3. react组件通信</h3><h3 id="_4-hook和高阶组件各解决了什么问题-区别和联系" tabindex="-1"><a class="header-anchor" href="#_4-hook和高阶组件各解决了什么问题-区别和联系" aria-hidden="true">#</a> 4. hook和高阶组件各解决了什么问题, 区别和联系</h3><h3 id="_5-react-底层原理-了解越多越好" tabindex="-1"><a class="header-anchor" href="#_5-react-底层原理-了解越多越好" aria-hidden="true">#</a> 5. React 底层原理(了解越多越好)</h3><h3 id="_6-react生命周期" tabindex="-1"><a class="header-anchor" href="#_6-react生命周期" aria-hidden="true">#</a> 6. react生命周期</h3><h3 id="_7-react-的-setstate是同步还是异步" tabindex="-1"><a class="header-anchor" href="#_7-react-的-setstate是同步还是异步" aria-hidden="true">#</a> 7. react 的 setState是同步还是异步</h3><h3 id="_8-vue和react的区别" tabindex="-1"><a class="header-anchor" href="#_8-vue和react的区别" aria-hidden="true">#</a> 8. Vue和React的区别</h3><h3 id="_10-react优化相关" tabindex="-1"><a class="header-anchor" href="#_10-react优化相关" aria-hidden="true">#</a> 10. React优化相关</h3><p>React uesMemo和uesCallback，<br> 如何用uesMome模拟uesCallback<br> 如何用uesEffect模拟生命周期中的didMount</p><h3 id="_11-usestate合并了哪些生命周期" tabindex="-1"><a class="header-anchor" href="#_11-usestate合并了哪些生命周期" aria-hidden="true">#</a> 11. useState合并了哪些生命周期</h3><h3 id="_12-redux和rtk的基本用法" tabindex="-1"><a class="header-anchor" href="#_12-redux和rtk的基本用法" aria-hidden="true">#</a> 12.redux和RTK的基本用法</h3><h3 id="_13-react中的高级api" tabindex="-1"><a class="header-anchor" href="#_13-react中的高级api" aria-hidden="true">#</a> 13. react中的高级API</h3><h2 id="vue" tabindex="-1"><a class="header-anchor" href="#vue" aria-hidden="true">#</a> Vue</h2><h3 id="_1-vue组件间怎么通信的" tabindex="-1"><a class="header-anchor" href="#_1-vue组件间怎么通信的" aria-hidden="true">#</a> 1. vue组件间怎么通信的</h3><h3 id="_2-v-for和v-if哪个优先级高" tabindex="-1"><a class="header-anchor" href="#_2-v-for和v-if哪个优先级高" aria-hidden="true">#</a> 2. v-for和v-if哪个优先级高</h3><p>###3. Vue的插件与混入</p><h3 id="_4-你了解的vue底层源码实现" tabindex="-1"><a class="header-anchor" href="#_4-你了解的vue底层源码实现" aria-hidden="true">#</a> 4.你了解的vue底层源码实现</h3><h3 id="_5-watch和computed什么区别" tabindex="-1"><a class="header-anchor" href="#_5-watch和computed什么区别" aria-hidden="true">#</a> 5. watch和computed什么区别</h3><h3 id="_6-vue-router中路由模式和区别" tabindex="-1"><a class="header-anchor" href="#_6-vue-router中路由模式和区别" aria-hidden="true">#</a> 6.vue-router中路由模式和区别</h3><h3 id="_7-nexttick原理" tabindex="-1"><a class="header-anchor" href="#_7-nexttick原理" aria-hidden="true">#</a> 7. nextTick原理</h3><h3 id="_8-如何实现图片懒加载" tabindex="-1"><a class="header-anchor" href="#_8-如何实现图片懒加载" aria-hidden="true">#</a> 8. 如何实现图片懒加载</h3><h2 id="打包工具" tabindex="-1"><a class="header-anchor" href="#打包工具" aria-hidden="true">#</a> 打包工具</h2><p>###1. vite的原理和webpack的区别</p><h3 id="_2-webpack用过的plugin-loader和其他配置" tabindex="-1"><a class="header-anchor" href="#_2-webpack用过的plugin-loader和其他配置" aria-hidden="true">#</a> 2. webpack用过的plugin,loader和其他配置</h3><h3 id="_3-什么是前端工程化" tabindex="-1"><a class="header-anchor" href="#_3-什么是前端工程化" aria-hidden="true">#</a> 3. 什么是前端工程化</h3><h2 id="计算机网络" tabindex="-1"><a class="header-anchor" href="#计算机网络" aria-hidden="true">#</a> 计算机网络</h2><h3 id="_1-get与post区别" tabindex="-1"><a class="header-anchor" href="#_1-get与post区别" aria-hidden="true">#</a> 1. get与post区别</h3>`,27),pn={href:"https://www.zhihu.com/question/28586791",target:"_blank",rel:"noopener noreferrer"},en={href:"https://blog.51cto.com/u_15274085/2919200",target:"_blank",rel:"noopener noreferrer"},on=n("p",null,"结论: 从http语义上来说没区别, 从开发的角度有些区别和误解",-1),cn=n("ol",null,[n("li",null,"根据建议. 幂等的数据用get, 非幂等的用post"),n("li",null,"根据约定一般get用url传参, post用body传参. 当然get也可以用body, post也可以用url"),n("li",null,"根据约定, get既然用url传参, 其编码采用percent-encoding. 该编码对ASCII字符不编码, 对非ASCII编码采用百分符编码. 根据约定post用body传参, 请求体的编码方式要看请求头中的Content-type, 该字段约束了请求体的格式和编码方式如 Content-Type: application/x-www-form-urlencoded;charset=utf-8; 规定了数据格式为键值对的表单数据, 编码为utf-8;"),n("li",null,"安全性. 都是HTTP明文传输, 安全性都很差. 但是get直接将参数放在url上, 可以被保存, 被外行直接识别出来. 而post起码要会开发者工工具才能看到. 相对而言get好于post"),n("li",null,"根据业务. 大文件的请求如果用post传输, 可以结合Expect: 100-continue发一个请求头数据, 服务端如果返回Continue则继续发请求体数据. 这样的话是发了两次请求, 一般这种业务需求用post, 所以看起来post比get多一次请求. 但是get也能做"),n("li",null,"对于不同浏览器来说 url有长度限制, 太长了也不利于爬虫. 一般超过2kb的数据, 放在post的body里, 小了可以考虑放在get的url里")],-1),ln=n("h3",{id:"_2-正向代理和反向代理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-正向代理和反向代理","aria-hidden":"true"},"#"),s(" 2. 正向代理和反向代理")],-1),rn={href:"https://cloud.tencent.com/developer/article/1996633",target:"_blank",rel:"noopener noreferrer"},un=n("p",null,"主要的区别就是客户端知不知道服务端是谁, 知道则是正向代理, 不知道则是反向代理",-1),kn=n("h3",{id:"_3-什么是跨域-怎么解决",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-什么是跨域-怎么解决","aria-hidden":"true"},"#"),s(" 3. "),n("strong",null,"什么是跨域，怎么解决")],-1),dn={href:"https://www.cnblogs.com/yingzi1028/archive/2022/09/07/16665766.html",target:"_blank",rel:"noopener noreferrer"},vn=n("h3",{id:"_4-jsonp是什么原理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-jsonp是什么原理","aria-hidden":"true"},"#"),s(" 4. "),n("strong",null,"JSONP是什么原理")],-1),mn={href:"https://www.shuzhiduo.com/A/l1dyr4R0ze/",target:"_blank",rel:"noopener noreferrer"},bn=n("p",null,"利用了script标签可以加载js脚本但是不受浏览器同源策略的影响的特性",-1),hn=n("p",null,"动态创建script去加载脚本, 在url上携带参数, 但是后端并不知道如何处理这些参数, 所以需要前端预先声明好处理这些参数的函数, 然后在url上写明回调的函数名, 后端拿到函数名和参数后, 筛选出数据并返回该函数携带参数的调用, 前端拿到调用的脚本后直接调用.",-1),gn=n("h3",{id:"_5-什么是预检请求",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-什么是预检请求","aria-hidden":"true"},"#"),s(" 5. "),n("strong",null,"什么是预检请求")],-1),fn=n("h3",{id:"_6-http1-和-http2-和-http3的区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-http1-和-http2-和-http3的区别","aria-hidden":"true"},"#"),s(" 6. http1 和 http2 和 http3的区别")],-1),yn={href:"https://www.cnblogs.com/ExMan/p/11815540.html",target:"_blank",rel:"noopener noreferrer"},wn=p("<p>http1.0的问题是每个请求都需要经过TCP链接和断开的过程, 比较消耗时间</p><p>​</p><p>http1.1对1.0的问题进行了修复. 主要是默认开启了connection:keep-alive 对于同一域名下的请求可以走一条TCP链接, 从而减少了链接和断开的时间.</p><p>​</p><p>http1.1也有自己的缺点: 即使做了优化, 还是很慢.</p><ul><li>主要体现在队头头堵塞的现象和浏览器限制TCP链接的数量.</li><li>队头堵塞指的是一个TCP链接里的不同请求, 只能等到上一个请求响应了, 才能开启下一个请求. 如果上一个请求失败了, 会影响到下一个请求的发送和接受.</li><li>限制TCP链接指的是, 不同浏览器对同一域名下并发的TCP链接数有限制, 以Chrome为例, 只能最多建立6个TCP链接, 如果有十个TCP链接, 就会有4个TCP链接被挂起</li></ul><p>​</p><p>http1.1时代为了解决高延迟, 主要在开发层面上做优化, 比如域名分片, 将资源分散到不同服务器上. 比如雪碧图和webpack打包时候合并更多的文件, 合并http请求数量</p><p>​</p><p>http2.0 优化了高延迟的问题.</p><ul><li>同一域名下只建立一个TCP链接, 所有文件并发请求和响应, 充分利用了用户的带宽.</li><li>它的实现:</li><li><ol><li>抛弃了纯文本的报文形式, 将报文分层header帧和data帧, 并且以二进制的形式表示报文</li><li>header压缩, 之前http中, 每次请求所带的请求头都携带着重复信息, http2采用hpack算法压缩头部信息,</li><li>hpack算法的主要特点有: 1. 索引表, 客户端和服务端都维护这一张索引表, 对常见的头的keyvalue进行枚举, 那么发送的时候, 不需要发送key-value只需要发送对应的索引值即可 2. 差异化发送, 只发送某个请求与之前不同的部分, 相同的部分不发送.</li><li>多路复用: 请求不必等到上一个请求响应再发送.</li></ol></li></ul>",11),_n=n("h3",{id:"_7-websocket",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-websocket","aria-hidden":"true"},"#"),s(" 7. websocket")],-1),xn={href:"https://caniuse.com/?search=webSocket",target:"_blank",rel:"noopener noreferrer"},jn=p(`<p>根据Can I Use的结果. websocket现在浏览器支持良好</p><p>应用场景: websocket经典应用场景是聊天室, 比如最近爆火的CharGPT聊天室应用, 其也应用了websokcet技术. 还有动态可视化, 比如天气网站, 天气, 温度等信息可以实时由服务端推送, 而非刷新重新获取.</p><p>使用websocket流程:</p><ol><li>js直接有WebsocketApi, 按照文档即可和服务端建立websocket链接.</li><li>和对应的URL建立链接时, 先是发起HTTP请求, 并且携带 Connection: Upgrade; Upgrade:websocket两个请求头, 表示要升级到ws, 服务端响应Upgrade:websocket, 并且返回101 Switching protocol 状态码. 此时ws连接建立</li><li>ws链接建立后. 即可利用全双工的特性, 客户端和服务端相互推送数据.</li></ol><p><strong>demo: 聊天功能</strong></p><p>前端代码(index.html):</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">&quot;en&quot;</span><span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">&quot;UTF-8&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">&quot;X-UA-Compatible&quot;</span> content<span class="token operator">=</span><span class="token string">&quot;IE=edge&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">&quot;viewport&quot;</span> content<span class="token operator">=</span><span class="token string">&quot;width=device-width, initial-scale=1.0&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> id<span class="token operator">=</span><span class="token string">&quot;input-message&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">&quot;btn&quot;</span><span class="token operator">&gt;</span>发送<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>

  <span class="token operator">&lt;</span>textarea id<span class="token operator">=</span><span class="token string">&quot;textarea&quot;</span> cols<span class="token operator">=</span><span class="token string">&quot;30&quot;</span> rows<span class="token operator">=</span><span class="token string">&quot;10&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>textarea<span class="token operator">&gt;</span>

  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
    <span class="token comment">// 新建websocket链接</span>
    <span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&quot;ws://localhost:3000&quot;</span><span class="token punctuation">)</span>

    <span class="token comment">// 当点击发送按钮时候, 发送消息</span>
    <span class="token keyword">const</span> <span class="token function-variable function">sendMessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> sendBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> inp <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;input-message&#39;</span><span class="token punctuation">)</span>
      sendBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>inp<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 当收到服务端的信息的时候, 存储信息</span>
    <span class="token keyword">const</span> <span class="token function-variable function">saveMessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;textarea&#39;</span><span class="token punctuation">)</span>
      text<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\n</span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 连接成功的事件</span>
    ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;ws链接成功&#39;</span><span class="token punctuation">)</span>
      <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 连接失败的事件</span>
    ws<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;ws链接失败, 请检查&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 接收到服务端消息的事件</span>
    ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">服务端: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>e<span class="token punctuation">.</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
      <span class="token function">saveMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>后端代码(node.js编写). 需要下载ws库</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> WebSocketServer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ws&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> wss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocketServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">3000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>
wss<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">connection</span><span class="token punctuation">(</span><span class="token parameter">ws</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>

  ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">message</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">这是第</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token operator">++</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">条回复~, 祝你有美好的一天</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>扩展阅读:</p>`,10),qn={href:"https://cloud.tencent.com/developer/article/1561528?from=15425&areaSource=102001.1&traceId=3wOOu9cZKLAIu3Tu3RkHP",target:"_blank",rel:"noopener noreferrer"},Sn={href:"https://cloud.tencent.com/developer/article/1445895?from=15425&areaSource=102001.2&traceId=3wOOu9cZKLAIu3Tu3RkHP",target:"_blank",rel:"noopener noreferrer"},Cn=n("h3",{id:"_8-http和https区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_8-http和https区别","aria-hidden":"true"},"#"),s(" 8. http和https区别")],-1),An={href:"https://www.bilibili.com/video/BV1KY411x7Jp/?spm_id_from=333.337.search-card.all.click&vd_source=20bf77d62633a13b190b5fb3785b2e34",target:"_blank",rel:"noopener noreferrer"},En=p('<p>关于视频中随机数的作用, 是为了解决重放攻击, 至于什么是重放攻击, 属于网络安全的范畴, 不再详细了解了</p><p>总结:</p><p>https的加密使用了对称加密算法, 在传输过程中使用了非对称加密保证了私钥在传输过程中安全性</p><ol><li>服务商会去CA(Certificate Authority)证书代理商那申请网站证书, 用于证明服务器的真实性. (我是谁不能由我说了算, 要有一个权威人士说我是谁才行)</li><li>TLS开始: 由客户端发起 Client Hello 请求, 携带客户端支持的TLS版本, 支持的加密套装, 一个随机数给服务端</li><li>服务端接受. 并发送 Server Hello请求, 携带服务端支持和选择的TLS版本, 选择的加密套装, 还有服务端生成的第二随机数</li><li>服务端又发送CA证书给客户端</li><li>客户端验证CA证书</li><li>服务端发送 Server Key Exchange 将非对称的公钥发给客户端</li><li>服务端又发送 Server Hello Done 表示服务端say hello结束</li><li>客户端发送Client Key Exchange根据公钥, 将自己的私钥加密生成 pre-master key 预主密钥发送给服务端</li><li>客户端和服务端各根据自己手上的 第一随机数, 第二随机数和预主密钥生成会话密钥. 以后所有的数据都由会话密钥加密/解密</li></ol><h3 id="_9-tcp-ip五层介绍一下" tabindex="-1"><a class="header-anchor" href="#_9-tcp-ip五层介绍一下" aria-hidden="true">#</a> 9.tcp/ip五层介绍一下</h3><h3 id="_10-tcp-和-udp-区别" tabindex="-1"><a class="header-anchor" href="#_10-tcp-和-udp-区别" aria-hidden="true">#</a> 10.TCP 和 UDP 区别</h3><h3 id="_11-http状态码" tabindex="-1"><a class="header-anchor" href="#_11-http状态码" aria-hidden="true">#</a> 11. http状态码</h3><h3 id="_12-怎么防止xss攻击" tabindex="-1"><a class="header-anchor" href="#_12-怎么防止xss攻击" aria-hidden="true">#</a> 12. 怎么防止XSS攻击</h3><h2 id="封装技巧" tabindex="-1"><a class="header-anchor" href="#封装技巧" aria-hidden="true">#</a> 封装技巧</h2><h3 id="_1-如何封装一个表格-表单" tabindex="-1"><a class="header-anchor" href="#_1-如何封装一个表格-表单" aria-hidden="true">#</a> 1. 如何封装一个表格, 表单</h3><h2 id="git" tabindex="-1"><a class="header-anchor" href="#git" aria-hidden="true">#</a> git</h2><h3 id="_1-代码遇到冲突怎么办" tabindex="-1"><a class="header-anchor" href="#_1-代码遇到冲突怎么办" aria-hidden="true">#</a> 1. 代码遇到冲突怎么办</h3><h3 id="_2-分支上代码没写完怎么缓存" tabindex="-1"><a class="header-anchor" href="#_2-分支上代码没写完怎么缓存" aria-hidden="true">#</a> 2. 分支上代码没写完怎么缓存</h3><h3 id="_3-git-stash" tabindex="-1"><a class="header-anchor" href="#_3-git-stash" aria-hidden="true">#</a> 3. git stash</h3><h3 id="_4-git怎么回退版本-版本id怎么查看" tabindex="-1"><a class="header-anchor" href="#_4-git怎么回退版本-版本id怎么查看" aria-hidden="true">#</a> 4. git怎么回退版本，版本id怎么查看</h3><h2 id="业务" tabindex="-1"><a class="header-anchor" href="#业务" aria-hidden="true">#</a> 业务</h2><h3 id="_1-说下对rbac的理解-怎么实现" tabindex="-1"><a class="header-anchor" href="#_1-说下对rbac的理解-怎么实现" aria-hidden="true">#</a> 1. 说下对RBAC的理解，怎么实现</h3><h3 id="_2-项目部署的流程-怎么解决跨域的" tabindex="-1"><a class="header-anchor" href="#_2-项目部署的流程-怎么解决跨域的" aria-hidden="true">#</a> 2 . 项目部署的流程 怎么解决跨域的</h3><h3 id="_3-单点登录" tabindex="-1"><a class="header-anchor" href="#_3-单点登录" aria-hidden="true">#</a> 3. 单点登录</h3><h3 id="_4-你讲讲前端工程化在项目发布和部署这块有哪些要做的" tabindex="-1"><a class="header-anchor" href="#_4-你讲讲前端工程化在项目发布和部署这块有哪些要做的" aria-hidden="true">#</a> 4. 你讲讲前端工程化在项目发布和部署这块有哪些要做的</h3><h3 id="_5-项目上线后-开发者如何提前自动获取到项目的-js-运行报错" tabindex="-1"><a class="header-anchor" href="#_5-项目上线后-开发者如何提前自动获取到项目的-js-运行报错" aria-hidden="true">#</a> 5. 项目上线后, 开发者如何提前自动获取到项目的 js 运行报错</h3><h3 id="_6-设计一个前端监控平台-项目中怎么接入监控平台的" tabindex="-1"><a class="header-anchor" href="#_6-设计一个前端监控平台-项目中怎么接入监控平台的" aria-hidden="true">#</a> 6. 设计一个前端监控平台，项目中怎么接入监控平台的</h3><h3 id="_7-jwt" tabindex="-1"><a class="header-anchor" href="#_7-jwt" aria-hidden="true">#</a> 7. jwt</h3><h3 id="_8-后端返回大量条数据-前端如何进行优化-怎么处理暂不需要的数据" tabindex="-1"><a class="header-anchor" href="#_8-后端返回大量条数据-前端如何进行优化-怎么处理暂不需要的数据" aria-hidden="true">#</a> 8. 后端返回大量条数据，前端如何进行优化(怎么处理暂不需要的数据)</h3><h4 id="_9-git-flow" tabindex="-1"><a class="header-anchor" href="#_9-git-flow" aria-hidden="true">#</a> 9. Git flow</h4><p>git flow是git的工作流, 不属于新技术, 是一种git 流程管理规范</p><p>Master/Main 主分支存放的代码和线上发布的代码一致.</p><ul><li>来源: release分支, hotfix分支</li><li>去向: dev分支, hotfix分支</li></ul><p>Dev: 开发分支. 任何时候都是最新的开发代码</p><ul><li>来源: 第一次基于master的. feature分支. hotfix分支. release分支. 总而言之: 保存的是最新的开发代码</li><li>去向: feature分支</li></ul><p>feature: 功能分支. 一个需求对应一个功能分支</p><ul><li>来源: dev分支</li><li>去向: dev分支</li></ul><p>release: 提测分支</p><ul><li>来源: dev分支</li><li>去向: master分支 dev分支</li></ul><p>hotfix: 线上bug修复分支</p><ul><li>来源: master分支</li><li>去向: master分支 dev分支</li></ul>',36);function Tn(Bn,On){const a=o("ExternalLinkIcon");return c(),l("div",null,[r,n("p",null,[n("a",u,[s("继承"),t(a)])]),k,n("p",null,[n("a",d,[s("js事件循环, 宏任务, 微任务"),t(a)])]),v,n("p",null,[n("a",m,[s("阮一峰之esm和cjs联系区别"),t(a)])]),b,h,g,n("p",null,[n("a",f,[s("强缓存与协商缓存"),t(a)])]),y,n("p",null,[n("a",w,[s("手写一个promise"),t(a)])]),_,n("p",null,[n("a",x,[s("大文件上传与断点续传 "),t(a)])]),j,n("ol",null,[q,S,C,A,n("li",null,[s("并发控制: 需要考虑http1.1高tcp链接时候的队头阻塞现象, 对并发tcp数进行限制, 可以限制到4个. 利用"),n("a",E,[s("p-limit"),t(a)]),s(" 库限制并发的tcp数")]),T]),B,n("p",null,[n("a",O,[s("cookie和web存储的区别 "),t(a)])]),P,n("blockquote",null,[n("p",null,[n("a",I,[s("https://www.kancloud.cn/kancloud/http-cookies-explained/48323"),t(a)])])]),D,n("p",null,[n("a",F,[s("深入V8垃圾回收机制"),t(a)])]),R,n("p",null,[n("a",V,[s("手写reduce"),t(a)])]),M,n("p",null,[n("a",z,[s("什么是闭包"),t(a)])]),L,n("ol",null,[n("li",null,[s("面试装13关键词: 词法作用域. "),n("a",U,[s("词法作用域详解"),t(a)]),s(" 决定了子函数能访问父函数")]),N,$,H]),W,K,J,n("p",null,[n("a",G,[s("什么是BFC--mdn文档 "),t(a)])]),X,n("p",null,[n("a",Y,[s("新手使用useState容易犯的错误"),t(a)])]),Z,n("p",null,[n("a",Q,[s("为什么useState被设计成异步的?"),t(a)])]),nn,sn,n("p",null,[s("参考文档 "),n("a",an,[s("fiber"),t(a)])]),tn,n("p",null,[n("a",pn,[s("get与post区别"),t(a)])]),n("p",null,[n("a",en,[s("100-continue "),t(a)])]),on,cn,ln,n("p",null,[n("a",rn,[s("正向代理和反向代理"),t(a)])]),un,kn,n("p",null,[n("a",dn,[s("https://www.cnblogs.com/yingzi1028/archive/2022/09/07/16665766.html"),t(a)])]),vn,n("p",null,[n("a",mn,[s("https://www.shuzhiduo.com/A/l1dyr4R0ze/"),t(a)])]),bn,hn,gn,fn,n("ol",null,[n("li",null,[n("p",null,[n("a",yn,[s("如何查看当前文件遵循的是http几的协议"),t(a)])]),wn])]),_n,n("p",null,[s("先看看兼容性"),n("a",xn,[s("Websocket的兼容性 "),t(a)])]),jn,n("p",null,[n("a",qn,[s("深入探索WebSocket和HTTP/2"),t(a)])]),n("p",null,[n("a",Sn,[s("为什么http2代替不了websocket "),t(a)])]),Cn,n("p",null,[n("a",An,[s("详解https"),t(a)])]),En])}const Dn=e(i,[["render",Tn],["__file","面试八股文.html.vue"]]);export{Dn as default};

const e=JSON.parse('{"key":"v-3ce9e382","path":"/BestPractice/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html","title":"设计模式","lang":"zh-CN","frontmatter":{"description":"设计模式的分类 设计模式可以分为三类：创建型模式、结构型模式和行为型模式。 1. 创建型模式（Creational Pattern）创建型模式关注的是对象的创建过程，目标是尽可能地将对象的创建和使用分离，从而达到解耦的目的。其中比较常见的有工厂模式、单例模式、建造者模式等。 2. 结构型模式（Structural Pattern）结构型模式关注的是对象...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/BestPractice/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"设计模式"}],["meta",{"property":"og:description","content":"设计模式的分类 设计模式可以分为三类：创建型模式、结构型模式和行为型模式。 1. 创建型模式（Creational Pattern）创建型模式关注的是对象的创建过程，目标是尽可能地将对象的创建和使用分离，从而达到解耦的目的。其中比较常见的有工厂模式、单例模式、建造者模式等。 2. 结构型模式（Structural Pattern）结构型模式关注的是对象..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-09T02:23:18.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2023-10-09T02:23:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-10-09T02:23:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mrhope.site\\"}]}"]]},"headers":[{"level":2,"title":"设计模式的分类","slug":"设计模式的分类","link":"#设计模式的分类","children":[]},{"level":2,"title":"单例模式","slug":"单例模式","link":"#单例模式","children":[{"level":3,"title":"单例模式示意","slug":"单例模式示意","link":"#单例模式示意","children":[]},{"level":3,"title":"透明单例 : 创建DIV单例","slug":"透明单例-创建div单例","link":"#透明单例-创建div单例","children":[]},{"level":3,"title":"代理模式实现CreateDiv","slug":"代理模式实现creatediv","link":"#代理模式实现creatediv","children":[]},{"level":3,"title":"js中的单例模式","slug":"js中的单例模式","link":"#js中的单例模式","children":[]},{"level":3,"title":"命名空间解决全局污染","slug":"命名空间解决全局污染","link":"#命名空间解决全局污染","children":[]},{"level":3,"title":"动态命名空间","slug":"动态命名空间","link":"#动态命名空间","children":[]}]},{"level":2,"title":"策略模式","slug":"策略模式","link":"#策略模式","children":[{"level":3,"title":"Typescript实现策略模式","slug":"typescript实现策略模式","link":"#typescript实现策略模式","children":[]},{"level":3,"title":"JS实现策略模式","slug":"js实现策略模式","link":"#js实现策略模式","children":[]}]},{"level":2,"title":"代理模式","slug":"代理模式","link":"#代理模式","children":[{"level":3,"title":"保护代理","slug":"保护代理","link":"#保护代理","children":[]},{"level":3,"title":"虚拟代理","slug":"虚拟代理","link":"#虚拟代理","children":[]},{"level":3,"title":"缓存代理","slug":"缓存代理","link":"#缓存代理","children":[]},{"level":3,"title":"工厂代理","slug":"工厂代理","link":"#工厂代理","children":[]}]},{"level":2,"title":"迭代器模式","slug":"迭代器模式","link":"#迭代器模式","children":[]},{"level":2,"title":"观察者模式","slug":"观察者模式","link":"#观察者模式","children":[{"level":3,"title":"使用React重构购物车案例","slug":"使用react重构购物车案例","link":"#使用react重构购物车案例","children":[]}]},{"level":2,"title":"命令模式","slug":"命令模式","link":"#命令模式","children":[{"level":3,"title":"命令模式实现文本编辑器","slug":"命令模式实现文本编辑器","link":"#命令模式实现文本编辑器","children":[]}]},{"level":2,"title":"组合模式","slug":"组合模式","link":"#组合模式","children":[{"level":3,"title":"React重构菜单导航栏","slug":"react重构菜单导航栏","link":"#react重构菜单导航栏","children":[]}]},{"level":2,"title":"模板方法模式","slug":"模板方法模式","link":"#模板方法模式","children":[{"level":3,"title":"模板方法模式实现TodoList","slug":"模板方法模式实现todolist","link":"#模板方法模式实现todolist","children":[]},{"level":3,"title":"使用React和模板方法模式重构","slug":"使用react和模板方法模式重构","link":"#使用react和模板方法模式重构","children":[]}]},{"level":2,"title":"享元模式","slug":"享元模式","link":"#享元模式","children":[{"level":3,"title":"享元模式实现文件上传","slug":"享元模式实现文件上传","link":"#享元模式实现文件上传","children":[]}]},{"level":2,"title":"职责链模式","slug":"职责链模式","link":"#职责链模式","children":[{"level":3,"title":"职责链模式实现ajax请求中间件","slug":"职责链模式实现ajax请求中间件","link":"#职责链模式实现ajax请求中间件","children":[]}]},{"level":2,"title":"中介者模式","slug":"中介者模式","link":"#中介者模式","children":[]},{"level":2,"title":"装饰者模式","slug":"装饰者模式","link":"#装饰者模式","children":[{"level":3,"title":"使用装饰者模式实现前端性能监控","slug":"使用装饰者模式实现前端性能监控","link":"#使用装饰者模式实现前端性能监控","children":[]}]},{"level":2,"title":"工厂模式","slug":"工厂模式","link":"#工厂模式","children":[{"level":3,"title":"简单工厂模式","slug":"简单工厂模式","link":"#简单工厂模式","children":[]},{"level":3,"title":"工厂方法模式","slug":"工厂方法模式","link":"#工厂方法模式","children":[]},{"level":3,"title":"抽象工厂模式","slug":"抽象工厂模式","link":"#抽象工厂模式","children":[]}]},{"level":2,"title":"状态模式","slug":"状态模式","link":"#状态模式","children":[{"level":3,"title":"状态模式与订单系统","slug":"状态模式与订单系统","link":"#状态模式与订单系统","children":[]}]},{"level":2,"title":"适配器模式","slug":"适配器模式","link":"#适配器模式","children":[{"level":3,"title":"适配器模式的前端应用","slug":"适配器模式的前端应用","link":"#适配器模式的前端应用","children":[]}]}],"git":{"createdTime":1696818198000,"updatedTime":1696818198000,"contributors":[{"name":"Summer","email":"summer@tradev-group.com","commits":1}]},"readingTime":{"minutes":44.49,"words":13347},"filePathRelative":"BestPractice/design-pattern/设计模式.md","localizedDate":"2023年10月9日","autoDesc":true}');export{e as data};

import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as p,c as o,e as n,f as a,b as r,d as i}from"./app-af135bce.js";const l="/assets/env-575a7989.png",c="/assets/activate-f60ca33d.png",d="/assets/env_test-007f83af.png",h="/assets/env-pycharm-22524bfe.png",u={},y=n("h1",{id:"python高级",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#python高级","aria-hidden":"true"},"#"),a(" python高级")],-1),v=n("h2",{id:"python虚拟环境",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#python虚拟环境","aria-hidden":"true"},"#"),a(" python虚拟环境")],-1),b={href:"https://www.bilibili.com/video/BV1V7411n7CM?p=1&vd_source=f0597bff9d28f459976cfa5b23ec3128",target:"_blank",rel:"noopener noreferrer"},m=i('<h3 id="python环境" tabindex="-1"><a class="header-anchor" href="#python环境" aria-hidden="true">#</a> python环境</h3><p>一个python环境大概由以下文件组成:</p><img src="'+l+`"><ol><li><p>其中Lib目录为安装的依赖包, Lib下的site-packages目录中为手动安装的依赖包, 标准库中是python自带的依赖包如urllib</p></li><li><p>虚拟环境即标准环境的副本, 其中如标准库这种不会复制一份新的到虚拟环境中, 而是以链接的方式在副本中存在.</p></li></ol><h3 id="python的虚拟环境的作用" tabindex="-1"><a class="header-anchor" href="#python的虚拟环境的作用" aria-hidden="true">#</a> python的虚拟环境的作用</h3><p>先回忆一下JavaScript中npm的包管理工具.</p><p>npm将包分为&quot;全局包&quot;和&quot;局部包&quot;. 其中全局包被放置在npm的安装目录下, 局部包被放置在js项目根目录下.</p><p>当一个项目中引用某个包时, 会从最近目录下的node_modules开始遍历寻找该包, 如果找到就停止并使用, 找不到就一直向上查找, 一直到全局包<br> 的目录中也没有才停止.</p><p>简单来说就是: &quot;我的项目中有就用我的项目的包, 我的项目没有就用全局的包&quot;. 这保证了&quot;每个js项目中引用的局部包都是独立的,<br> 包与包之间的依赖关系是清澈的, 独立的&quot;.</p><p>混乱的包依赖关系必然会导致版本冲突, 所以python中也需要有这样的包办理办法, 但是python中的做法稍有不同.</p><p>python中所有的包都是全局包, 每一个包都被安装在Lib目录. 这就导致了可能出现的包冲突.</p><p>python允许用户创建一份虚拟环境, 每个虚拟环境是一个文件目录, 同时也是原python环境的副本.如果我们为每个python环境创建一个<br> 虚拟环境, 那么就可以将该项目中的包安装到该虚拟环境中. 这样每一个项目都对应了一个虚拟环境, 每个项目的包之间相互独立, 不会发生<br> 冲突.</p><h3 id="python虚拟环境历史" tabindex="-1"><a class="header-anchor" href="#python虚拟环境历史" aria-hidden="true">#</a> python虚拟环境历史</h3><p>python2中没有生成虚拟环境的语法, 大家一般使用如virtualenv, virtualenvwrapper,<br> virtualenvwrapper-env等第三方库来生成python虚拟环境</p><p>Python从3.3版本开始，自带了一个虚拟环境venv,在PEP-405中可以看到它的详细介绍。它的很多操作都和virtualenv类似。<br> 因为是从3.3版本开始自带的，这个工具也仅仅支持python3.3和以后版本。所以，要在python2上使用虚拟环境，依然要利用virtualenv。</p><h3 id="python项的版本切换" tabindex="-1"><a class="header-anchor" href="#python项的版本切换" aria-hidden="true">#</a> python项的版本切换</h3><p>无论是使用virtualenv等第三方库, 还是venv生成的虚拟环境. 其虚拟环境和标准环境中的python版本是一致的.(因为虚拟环境并不是完全的副本<br> 对于标准库中如python解释器的部分, 使用的是同一份)</p><p>若电脑中有多个python项目, 且python版本跨度过大, 虚拟环境的这套方案就不适用了, 针对这个问题有以下库可以解决</p><p><strong>pyenv</strong><br> pynv可以安装、卸载、编译、管理多个python版本，并随时将其中一个设置为工作环境。<br> pyenv不支持Windows系统。</p><p><strong>pywin</strong><br> Windows上有一个pyenv的替代品，是pywin。它用来在多个安装的Python版本之间进行切换，也支持MSYS/MINGW32。</p><p><strong>Python Launcher for Windows</strong><br> Python从3.3版本开始，在Windows系统中自带了一个py.exe启动工具。如果你是使用Python.org官网下载的安装包安装的Python3.3(或更新版本)环境，那么可以<br> 直接在命令提示符中使用这个工具。<br> py可以打开默认的python提示符：py-2.7和py-3打开对应的Python版本。</p><p><strong>虚拟环境可以解决不同项目的依赖冲突的问题, 上述工具可以解决不同项目中python版本切换问题.</strong></p><h3 id="venv语法" tabindex="-1"><a class="header-anchor" href="#venv语法" aria-hidden="true">#</a> venv语法</h3><ol><li>切换到项目根目录下</li><li>在项目根目录下创建虚拟环境.</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> python <span class="token parameter variable">-m</span> venv <span class="token operator">&lt;</span>虚拟环境目录名, 官方推荐叫environment<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>项目根目录下激活/取消激活虚拟环境<br> 激活根据电脑的系统(windows还是MOS), 使用的命令行软件(CMD还是powershell)激活方式不同</li></ol><p>具体来说: MOS需要运行&quot;虚拟环境目录/bin/activate&quot;文件, windows+CMD需要运行&quot;虚拟环境目录/Scripts/activate.<br> bat&quot;文件<br> windows+powershell需要运行&quot;虚拟环境目录/Scripts/Activate.ps1&quot;<br><img src="`+c+'"></p><ol start="4"><li>安装包, 并观察安装后包的位置<br><img src="'+d+'"></li></ol><h3 id="使用pycharm建立虚拟环境" tabindex="-1"><a class="header-anchor" href="#使用pycharm建立虚拟环境" aria-hidden="true">#</a> 使用pycharm建立虚拟环境</h3><img src="'+h+`" width="900"><p>注: pycharm中的方法一种的Virtualenv其实就是venv</p><h3 id="复制环境" tabindex="-1"><a class="header-anchor" href="#复制环境" aria-hidden="true">#</a> 复制环境</h3><p>回忆一下一个js项目是如何多人协作的:</p><ol><li>首先自己通过git将项目push到gitlab中, 并且.gitignore会把node_modules忽略掉</li><li>其他开发者通过git clone将项目克隆下来. 并执行npm install. npm会按照package.json的记录下载对应版本的依赖包</li></ol><p>python中的pip也可以实现这个功能, 从而实现项目的多人协作</p><ol><li>在项目根目录下执行(需要保证当前虚拟环境已激活)<code>pip freeze &gt; requirements.txt</code>,该命令会将虚拟环境中已经安装的包生成到requirements.txt中</li><li>将项目git push到gitlab中</li><li>其他开发者执行 <code>pip install -r requirements.txt</code> 该命令会根据requirements.<br> txt中记录的包版本下载对应的依赖包</li></ol><h2 id="列表生成式" tabindex="-1"><a class="header-anchor" href="#列表生成式" aria-hidden="true">#</a> 列表生成式</h2><p>列表生成式是 Python 中用于创建列表的一种简洁语法。</p><p>它将创建列表的过程简化为单行表达式。</p><p>列表生成式可以包含循环和条件语句。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">[</span>expression <span class="token keyword">for</span> item <span class="token keyword">in</span> iterable <span class="token keyword">if</span> condition<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例子:<br> 将列表字符串转大写</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cherry&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;date&quot;</span><span class="token punctuation">]</span>
upper_words <span class="token operator">=</span> <span class="token punctuation">[</span>word<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>upper_words<span class="token punctuation">)</span>
<span class="token comment"># 输出: [&#39;APPLE&#39;, &#39;BANANA&#39;, &#39;CHERRY&#39;, &#39;DATE&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成不同页码的url</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>start_urls <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string-interpolation"><span class="token string">f&quot;http://category.dangdang.com/pg</span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">-cp01.54.06.00.00.00.html&quot;</span></span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="python-类" tabindex="-1"><a class="header-anchor" href="#python-类" aria-hidden="true">#</a> python 类</h2>`,46);function k(g,_){const s=e("ExternalLinkIcon");return p(),o("div",null,[y,v,n("blockquote",null,[n("p",null,[a("参考视频: "),n("a",b,[a("python虚拟环境"),r(s)])])]),m])}const q=t(u,[["render",k],["__file","python高级.html.vue"]]);export{q as default};
